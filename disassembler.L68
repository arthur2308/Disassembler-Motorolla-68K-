00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 11/30/2015 2:59:54 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Team A (Phat, Felicia, Arthur)
00000000                             4  * Date       : Thanksgiving 2015 (We started earlier but I happen to be filling this in today)
00000000                             5  * Description: Converts assembly language written in hex to readable human code (CSS422 Project)
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00000000                             9  ********************************
00000000                            10  * INFO:
00000000                            11  * bit0-4 are used to store information about binary op-code split into it's split-up stage
00000000                            12  * They are stored at the end of the code. (You can find code for storage at the end, after all the messages.)
00000000                            13  *   bit0 - Store first hex of op code
00000000                            14  *   bit1 - Store first 'bit' of a split op code
00000000                            15  *   bit2 - Store second 'bit' of a split op code
00000000                            16  *   bit3 - Store third 'bit' of a split op code
00000000                            17  *   bit4 - Store fourth 'bit' of a split op code
00000000                            18  * 
00000000                            19  * 
00000000                            20  * 
00000000                            21  * COMPLETED WORK:
00000000                            22  * SUB
00000000                            23  * SUBA      ERROR on CFC6 produces SUBA.L D6,A7 should be MULS.W    D6,D7 fixed however further testing needed 
00000000                            24  * AND
00000000                            25  * ADD   - NOT TESTED
00000000                            26  * SUBI
00000000                            27  * ORI   - EORI and CMPI uses the same logic as these two
00000000                            28  * NOT
00000000                            29  * 
00000000                            30  * MOVE      MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE                       1806
00000000                            31  * MOVEA     MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE                       3846
00000000                            32  * MULS      MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE        MULS LONG?     CFC6
00000000                            33  * DIVS      MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE                       85C3
00000000                            34  * NEG       MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE                       4443
00000000                            35  * LSL       MISSES  EFFECTIVE ADDRESSES                   INVALID OPCODE                       E76A
00000000                            36  * LSR       MISSES  EFFECTIVE ADDRESSES                   INVALID OPCODE                       E66A
00000000                            37  ****************************************************************************
00000000                            38  
00000000                            39  
00000000                            40  * sets start and end address
00000000                            41  * temp hard code
00000000                            42  * make UI later for input
00000000  =00007000                 43  addr1   EQU     $7000
00000000                            44  *addr2   EQU     $7050
00000000  =0000725A                 45  addr2   EQU     $725A
00000000                            46  
00000000                            47  
00001000                            48      ORG    $1000
00001000                            49  START:                  ; first instruction of program
00001000                            50  
00001000                            51          
00001000                            52  
00001000                            53  
00001000                            54          *   this stores some test EA into memory
00001000                            55          *LEA     addr1,A1
00001000                            56          *MOVE.W  #$0440,(A1)+        *917C
00001000                            57          *MOVE.W  #$917C,(A1)+       
00001000                            58          *MOVE.L  #$5555A7FF,(A1)+
00001000                            59          *MOVE.W  #$9078,(A1)+
00001000                            60          *MOVE.W  #$5555,(A1)+
00001000                            61          
00001000                            62          *MOVE.L  #$0,A1              This clears the memory at A1, not sure why i didn't it but its probably important
00001000                            63          
00001000  31FC CFC6 7000            64          MOVE.W  #$CFC6, $7000
00001006                            65          
00001006                            66  ******************************************** displays address location***********************************************
00001006                            67  * This displays the address location of the op-code being worked on
00001006                            68  * A6 is used as current address
00001006                            69  
00001006  2C7C 00007000             70          MOVEA.L #addr1,A6            Moves starting addr into A6 register
0000100C                            71          
0000100C                            72  NEWADDR
0000100C  2E0E                      73          MOVE.L  A6,D7               Loads the current address into D7
0000100E  BEBC 0000725A             74          CMP.L   #addr2,D7            Compares current address to end address
00001014  6E00 1498                 75          BGT     DONE                Branches to done if current address > end address
00001018                            76          
00001018                            77          
00001018  1C3C 0002                 78          MOVE.B  #2,D6               D6 is a counter, used for looping
0000101C  2407                      79          MOVE.L  D7,D2               Copies opcode saved in D7 to D2 to be manipulated
0000101E  4842                      80          SWAP    D2                  Swaps the location to be displayed (Display first word of a long word)
00001020  6000 0004                 81          BRA     DISPADDR2           Skips the second part to do later
00001024                            82  
00001024                            83  DISPADDR1
00001024  3407                      84          MOVE.W  D7,D2
00001026                            85  DISPADDR2
00001026  3202                      86          MOVE.W  D2,D1               D1 will be the first byte of the word
00001028  3602                      87          MOVE.W  D2,D3               D3 will be the second byte of the word
0000102A  3802                      88          MOVE.W  D2,D4               D4 will be the third byte of the word
0000102C  3A02                      89          MOVE.W  D2,D5               D5 will be the fourth byte of the word
0000102E                            90  
0000102E  E049                      91          LSR.W   #8,D1               Shifts D1 right 12 times to move the first byte of the word to the last byte
00001030  E849                      92          LSR.W   #4,D1
00001032  E94B                      93          LSL.W   #4,D3               Shifts D3 left 4 times to get rid of the first byte
00001034  E04B                      94          LSR.W   #8,D3                 Then shifts D3 right 12 times to move it to the last byte
00001036  E84B                      95          LSR.W   #4,D3
00001038  E14C                      96          LSL.W   #8,D4               Shifts D4 to the left 8 times to get rid of first 2 bytes
0000103A  E04C                      97          LSR.W   #8,D4                 Then shifts it right 12 times to move it to the last byte
0000103C  E84C                      98          LSR.W   #4,D4
0000103E  E14D                      99          LSL.W   #8,D5               Shifts D5 to the left 12 times to get rid of the first 3 bytes
00001040  E94D                     100          LSL.W   #4,D5                 Then shifts it back to the left 12 times to move it to the last byte position
00001042  E04D                     101          LSR.W   #8,D5
00001044  E84D                     102          LSR.W   #4,D5
00001046                           103          
00001046                           104          
00001046  47F9 0000105A            105          LEA     DISPADDR3,A3        Place address of TENS into A3 to continue from there after conversion
0000104C  B23C 0009                106          CMP.B   #9,D1               Compares digit to 9
00001050  6E00 13D8                107          BGT     CONV                Print out letter representation if greater than 9
00001054                           108  
00001054  103C 0003                109          MOVE.B  #3,D0               Displays digit if it is less than A
00001058  4E4F                     110          TRAP    #15
0000105A                           111          
0000105A                           112  DISPADDR3   
0000105A  1203                     113          MOVE.B  D3,D1               Displays digit in 1's place second
0000105C                           114  
0000105C                           115          *   converts digits 10+ into letters
0000105C  47F9 00001070            116          LEA     DISPADDR4,A3           Places address of NEXT into A3 to continue from there after conversion
00001062  B23C 0009                117          CMP.B   #9,D1               Compares digit to 9
00001066  6E00 13C2                118          BGT     CONV                Print out letter representation if greater than 9
0000106A                           119          
0000106A  103C 0003                120          MOVE.B  #3,D0               Displays digit if it is less than A
0000106E  4E4F                     121          TRAP    #15
00001070                           122  
00001070                           123  DISPADDR4
00001070  1204                     124          MOVE.B  D4,D1               Displays digit in 1's place second
00001072                           125  
00001072                           126          *   converts digits 10+ into letters
00001072  47F9 00001086            127          LEA     DISPADDR5,A3           Places address of NEXT into A3 to continue from there after conversion
00001078  B23C 0009                128          CMP.B   #9,D1               Compares digit to 9
0000107C  6E00 13AC                129          BGT     CONV                Print out letter representation if greater than 9
00001080                           130          
00001080  103C 0003                131          MOVE.B  #3,D0               Displays digit if it is less than A
00001084  4E4F                     132          TRAP    #15
00001086                           133  
00001086                           134  DISPADDR5
00001086  1205                     135          MOVE.B  D5,D1               Displays digit in 1's place second
00001088                           136  
00001088                           137          *   converts digits 10+ into letters
00001088  47F9 0000109C            138          LEA     DISPADDR6,A3           Places address of NEXT into A3 to continue from there after conversion
0000108E  B23C 0009                139          CMP.B   #9,D1               Compares digit to 9
00001092  6E00 1396                140          BGT     CONV                Print out letter representation if greater than 9
00001096                           141          
00001096  103C 0003                142          MOVE.B  #3,D0               Displays digit if it is less than A
0000109A  4E4F                     143          TRAP    #15
0000109C                           144          
0000109C                           145  DISPADDR6
0000109C                           146  * Display counter -- creates new line every 8 bytes
0000109C                           147          * D6 is used as counter
0000109C                           148          
0000109C  5306                     149          SUB.B   #1,D6
0000109E  BC3C 0000                150          CMP.B   #0,D6
000010A2  6680                     151          BNE     DISPADDR1
000010A4                           152  
000010A4  43F9 000024C5            153          LEA     TAB,A1
000010AA  103C 000E                154          MOVE.B  #14,D0
000010AE  4E4F                     155          TRAP    #15
000010B0                           156          
000010B0                           157  *********************************************************************************************************************
000010B0                           158  * Splits the first byte of the op code into nibbles
000010B0                           159  * then sends it to the branch-table to jump to the appropiate section to be decoded
000010B0                           160  
000010B0  4281                     161          CLR.L   D1                  Clears the data registers
000010B2  4282                     162          CLR.L   D2
000010B4  4283                     163          CLR.L   D3
000010B6  4284                     164          CLR.L   D4
000010B8  4285                     165          CLR.L   D5
000010BA  4286                     166          CLR.L   D6
000010BC  3C16                     167          MOVE.W  (A6),D6
000010BE  141E                     168          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
000010C0                           169    
000010C0  1E02                     170          MOVE.B  D2,D7
000010C2  E14F                     171          LSL.W   #8,D7
000010C4                           172          
000010C4  1602                     173          MOVE.B  D2,D3               Copies data at D2 to D3
000010C6                           174          *   this gets digit in 10's place
000010C6  E80B                     175          LSR.B   #4,D3               Shifts right to get rid of 1's place
000010C8                           176          *   this gets digit in 1's place
000010C8  E90A                     177          LSL.B   #4,D2               Shifts left to get rid of 10's place
000010CA  E80A                     178          LSR.B   #4,D2               Shifts back right into 1's place
000010CC                           179          
000010CC                           180          *   D3 holds digit in 10's place
000010CC                           181          *   D2 holds digit in 1's place
000010CC                           182  
000010CC                           183          *   Moves second nibble to D5 to be used later
000010CC  1A02                     184          MOVE.B  D2,D5
000010CE  13C3 0000258E            185          MOVE.B  D3,bit0
000010D4                           186          *   Goes to a branch-table to figure out which op code it is
000010D4  6000 0002                187          BRA     CODE
000010D8                           188  
000010D8                           189  ******************************************************************************************************
000010D8                           190  *   This is where the table goes to detirmine which op-code to use
000010D8                           191  CODE    
000010D8  B63C 0000                192          CMP.B   #$0,D3              Goes to immediate operation section
000010DC  6700 0A9C                193          BEQ     IMD
000010E0  B63C 0004                194          CMP.B   #$4,D3              Goes to miscellaneous section
000010E4  6700 0BA4                195          BEQ     MISC
000010E8  B63C 0009                196          CMP.B   #$9,D3              Goes to sub section
000010EC  6700 0C66                197          BEQ     SUB
000010F0  B63C 000C                198          CMP.B   #$C,D3              Goes to sub but displays as AND
000010F4  6700 0C5E                199          BEQ     SUB
000010F8  B63C 000D                200          CMP.B   #$D,D3              Goes to sub but displays as ADD
000010FC  6700 0C56                201          BEQ     SUB
00001100  B63C 0001                202          CMP.B   #$1,D3
00001104  6700 01EA                203          BEQ     MOVB                Goes to movb
00001108  B63C 0003                204          CMP.B   #$3,D3
0000110C  6700 001E                205          BEQ     MOVW                Goes to movw
00001110  B63C 0002                206          CMP.B   #$2,D3
00001114  6700 00FA                207          BEQ     MOVL                Goes to movl
00001118  B63C 0008                208          CMP.B   #$8,D3
0000111C  6700 0714                209          BEQ     DIVSW               Goes to divsw
00001120  B63C 000E                210          CMP.B   #$E,D3
00001124  6700 08F0                211          BEQ     LSLR                Goes to divsw
00001128                           212          
00001128  6000 127C                213          BRA     INVOPCODE
0000112C                           214  
0000112C                           215  MOVW
0000112C                           216          
0000112C                           217          
0000112C  E20A                     218          LSR.B   #1, D2
0000112E  13C2 0000258F            219          MOVE.B  D2, bit1
00001134                           220          
00001134  1416                     221          MOVE.B  (A6),D2
00001136  EB0A                     222          LSL.B   #5, D2
00001138  EA0A                     223          LSR.B   #5, D2
0000113A  13C2 00002592            224          MOVE.B  D2, bit4
00001140                           225          
00001140  141E                     226          MOVE.B  (A6)+,D2
00001142  E50A                     227          LSL.B   #2, D2
00001144  EA0A                     228          LSR.B   #5, D2
00001146  13C2 00002591            229          MOVE.B  D2, bit3
0000114C                           230          
0000114C  EF4E                     231          LSL.W   #7, D6
0000114E  E04E                     232          LSR.W   #8, D6 
00001150  EA4E                     233          LSR.W   #5, D6 
00001152  13C6 00002590            234          MOVE.B  D6, bit2
00001158                           235  
00001158  0C39 0001 00002590       236          CMP.B   #$1, bit2
00001160  6700 005A                237          BEQ     MOVEAW
00001164                           238  
00001164  43F9 00002514            239          LEA MMOVEW, A1
0000116A  103C 000E                240          MOVE.B  #14, D0
0000116E  4E4F                     241          TRAP    #15 
00001170                           242  
00001170  0C39 0000 00002591       243          CMP.B   #$0, bit3           
00001178  6700 044A                244          BEQ     MOVBDN1
0000117C  0C39 0001 00002591       245          CMP.B   #$1, bit3
00001184  6700 020E                246          BEQ     MOVEAN1
00001188  0C39 0002 00002591       247          CMP.B   #$2, bit3
00001190  6700 0276                248          BEQ     MOVEIAN1
00001194  0C39 0003 00002591       249          CMP.B   #$3, bit3
0000119C  6700 02F6                250          BEQ     MOVEIANI1
000011A0  0C39 0004 00002591       251          CMP.B   #$4, bit3
000011A8  6700 0382                252          BEQ     MOVEIAND1
000011AC  0C39 0007 00002591       253          CMP.B   #$7, bit3
000011B4  6700 01BA                254          BEQ     ADDIMD
000011B8                           255          
000011B8  6000 11EE                256          BRA INVOP  
000011BC                           257  MOVEAW
000011BC  43F9 00002522            258          LEA MMOVEAW, A1
000011C2  103C 000E                259          MOVE.B  #14, D0
000011C6  4E4F                     260          TRAP    #15 
000011C8                           261          
000011C8  0C39 0000 00002591       262          CMP.B   #$0, bit3           
000011D0  6700 03F2                263          BEQ     MOVBDN1
000011D4  0C39 0001 00002591       264          CMP.B   #$1, bit3
000011DC  6700 01B6                265          BEQ     MOVEAN1
000011E0  0C39 0002 00002591       266          CMP.B   #$2, bit3
000011E8  6700 021E                267          BEQ     MOVEIAN1
000011EC  0C39 0003 00002591       268          CMP.B   #$3, bit3
000011F4  6700 029E                269          BEQ     MOVEIANI1
000011F8  0C39 0004 00002591       270          CMP.B   #$4, bit3
00001200  6700 032A                271          BEQ     MOVEIAND1
00001204  0C39 0007 00002591       272          CMP.B   #$7, bit3
0000120C  6700 0162                273          BEQ     ADDIMD
00001210                           274  
00001210                           275  MOVL
00001210  E20A                     276          LSR.B   #1, D2
00001212  13C2 0000258F            277          MOVE.B  D2, bit1
00001218                           278          
00001218  1416                     279          MOVE.B  (A6),D2
0000121A  EB0A                     280          LSL.B   #5, D2
0000121C  EA0A                     281          LSR.B   #5, D2
0000121E  13C2 00002592            282          MOVE.B  D2, bit4
00001224                           283          
00001224  141E                     284          MOVE.B  (A6)+,D2
00001226  E50A                     285          LSL.B   #2, D2
00001228  EA0A                     286          LSR.B   #5, D2
0000122A  13C2 00002591            287          MOVE.B  D2, bit3
00001230                           288          
00001230  EF4E                     289          LSL.W   #7, D6
00001232  E04E                     290          LSR.W   #8, D6 
00001234  EA4E                     291          LSR.W   #5, D6 
00001236  13C6 00002590            292          MOVE.B  D6, bit2
0000123C                           293          
0000123C  0C39 0001 00002590       294          CMP.B   #$1, bit2
00001244  6700 0056                295          BEQ     MOVEAL
00001248                           296  
00001248  43F9 0000251B            297          LEA MMOVEL, A1
0000124E  103C 000E                298          MOVE.B  #14, D0
00001252  4E4F                     299          TRAP    #15 
00001254                           300          
00001254  0C39 0000 00002591       301          CMP.B   #$0, bit3           
0000125C  6700 0366                302          BEQ     MOVBDN1
00001260  0C39 0001 00002591       303          CMP.B   #$1, bit3
00001268  6700 012A                304          BEQ     MOVEAN1
0000126C  0C39 0002 00002591       305          CMP.B   #$2, bit3
00001274  6700 0192                306          BEQ     MOVEIAN1
00001278  0C39 0003 00002591       307          CMP.B   #$3, bit3
00001280  6700 0212                308          BEQ     MOVEIANI1
00001284  0C39 0004 00002591       309          CMP.B   #$4, bit3
0000128C  6700 029E                310          BEQ     MOVEIAND1
00001290  0C39 0007 00002591       311          CMP.B   #$7, bit3
00001298  6700 00D6                312          BEQ     ADDIMD
0000129C                           313          
0000129C                           314  MOVEAL
0000129C  43F9 0000252A            315          LEA MMOVEAL, A1
000012A2  103C 000E                316          MOVE.B  #14, D0
000012A6  4E4F                     317          TRAP    #15 
000012A8                           318          
000012A8  0C39 0000 00002591       319          CMP.B   #$0, bit3           
000012B0  6700 0312                320          BEQ     MOVBDN1
000012B4  0C39 0001 00002591       321          CMP.B   #$1, bit3
000012BC  6700 00D6                322          BEQ     MOVEAN1
000012C0  0C39 0002 00002591       323          CMP.B   #$2, bit3
000012C8  6700 013E                324          BEQ     MOVEIAN1
000012CC  0C39 0003 00002591       325          CMP.B   #$3, bit3
000012D4  6700 01BE                326          BEQ     MOVEIANI1
000012D8  0C39 0004 00002591       327          CMP.B   #$4, bit3
000012E0  6700 024A                328          BEQ     MOVEIAND1
000012E4  0C39 0007 00002591       329          CMP.B   #$7, bit3
000012EC  6700 0082                330          BEQ     ADDIMD        
000012F0                           331  
000012F0                           332  MOVB
000012F0  43F9 0000250D            333          LEA MMOVEB, A1
000012F6  103C 000E                334          MOVE.B  #14, D0
000012FA  4E4F                     335          TRAP    #15 
000012FC                           336          
000012FC  E20A                     337          LSR.B   #1, D2
000012FE  13C2 0000258F            338          MOVE.B  D2, bit1
00001304                           339          
00001304  1416                     340          MOVE.B  (A6),D2
00001306  EB0A                     341          LSL.B   #5, D2
00001308  EA0A                     342          LSR.B   #5, D2
0000130A  13C2 00002592            343          MOVE.B  D2, bit4
00001310                           344          
00001310  141E                     345          MOVE.B  (A6)+,D2
00001312  E50A                     346          LSL.B   #2, D2
00001314  EA0A                     347          LSR.B   #5, D2
00001316  13C2 00002591            348          MOVE.B  D2, bit3
0000131C                           349          
0000131C  EF4E                     350          LSL.W   #7, D6
0000131E  E04E                     351          LSR.W   #8, D6 
00001320  EA4E                     352          LSR.W   #5, D6 
00001322  13C6 00002590            353          MOVE.B  D6, bit2
00001328                           354          
00001328  0C39 0000 00002591       355          CMP.B   #$0, bit3           
00001330  6700 0292                356          BEQ     MOVBDN1
00001334  0C39 0001 00002591       357          CMP.B   #$1, bit3
0000133C  6700 0056                358          BEQ     MOVEAN1
00001340  0C39 0002 00002591       359          CMP.B   #$2, bit3
00001348  6700 00BE                360          BEQ     MOVEIAN1
0000134C  0C39 0003 00002591       361          CMP.B   #$3, bit3
00001354  6700 013E                362          BEQ     MOVEIANI1
00001358  0C39 0004 00002591       363          CMP.B   #$4, bit3
00001360  6700 01CA                364          BEQ     MOVEIAND1
00001364  0C39 0007 00002591       365          CMP.B   #$7, bit3
0000136C  6700 0002                366          BEQ     ADDIMD
00001370                           367  
00001370                           368  ADDIMD
00001370  0C39 0000 00002592       369      CMP.B   #$0, bit4
00001378  6700 001A                370      BEQ     ADDIMD0
0000137C  0C39 0001 00002592       371      CMP.B   #$1, bit4
00001384  6700 000E                372      BEQ     ADDIMD1
00001388  0C39 0003 00002592       373      CMP.B   #$3, bit4
00001390  6700 0002                374      BEQ     ADDIMD3
00001394                           375  
00001394                           376  ADDIMD0
00001394                           377      * TODO 
00001394                           378  ADDIMD1 
00001394                           379      * TODO
00001394                           380  ADDIMD3
00001394                           381      * TODO    
00001394                           382  MOVEAN1
00001394  43F9 000024C5            383      LEA TAB, A1
0000139A  103C 000E                384      MOVE.B  #14,D0
0000139E  4E4F                     385      TRAP    #15
000013A0                           386  
000013A0  43F9 000024D5            387      LEA DISPA,A1
000013A6  103C 000E                388      MOVE.B  #14,D0
000013AA  4E4F                     389      TRAP    #15
000013AC                           390      
000013AC  1239 00002592            391      MOVE.B  bit4, D1
000013B2  103C 0003                392      MOVE.B  #3, D0
000013B6  4E4F                     393      TRAP    #15
000013B8                           394      
000013B8  43F9 000024C9            395      LEA COMMA, A1
000013BE  103C 000E                396      MOVE.B  #14,D0
000013C2  4E4F                     397      TRAP    #15
000013C4                           398      
000013C4  0C39 0000 00002590       399      CMP.B   #$0,bit2
000013CC  6700 03AA                400      BEQ     MOVBDN2
000013D0  0C39 0001 00002590       401      CMP.B   #$1,bit2
000013D8  6700 02BE                402      BEQ     MOVEAN2
000013DC  0C39 0002 00002590       403      CMP.B   #$2, bit2 
000013E4  6700 02D2                404      BEQ     MOVIAN2
000013E8  0C39 0003 00002590       405      CMP.B   #$3, bit2 
000013F0  6700 02FE                406      BEQ     MOVIANI2
000013F4  0C39 0004 00002590       407      CMP.B   #$4, bit2 
000013FC  6700 0336                408      BEQ     MOVIAND2
00001400  BA3C 0005                409      CMP.B   #$5, D5
00001404  6700 0372                410      BEQ     MOVBDN2
00001408                           411      
00001408                           412  MOVEIAN1
00001408  43F9 000024C5            413      LEA TAB, A1
0000140E  103C 000E                414      MOVE.B  #14,D0
00001412  4E4F                     415      TRAP    #15
00001414                           416      
00001414  43F9 000024CB            417      LEA OPENBRA, A1
0000141A  103C 000E                418      MOVE.B  #14,D0
0000141E  4E4F                     419      TRAP    #15
00001420                           420  
00001420  43F9 000024D5            421      LEA DISPA,A1
00001426  103C 000E                422      MOVE.B  #14,D0
0000142A  4E4F                     423      TRAP    #15
0000142C                           424      
0000142C  1239 00002592            425      MOVE.B  bit4, D1
00001432  103C 0003                426      MOVE.B  #3, D0
00001436  4E4F                     427      TRAP    #15
00001438                           428      
00001438  43F9 000024CD            429      LEA CLOSEBRA, A1
0000143E  103C 000E                430      MOVE.B  #14,D0
00001442  4E4F                     431      TRAP    #15
00001444                           432      
00001444  43F9 000024C9            433      LEA COMMA, A1
0000144A  103C 000E                434      MOVE.B  #14,D0
0000144E  4E4F                     435      TRAP    #15
00001450                           436      
00001450  0C39 0000 00002590       437      CMP.B   #$0,bit2
00001458  6700 031E                438      BEQ     MOVBDN2
0000145C  0C39 0001 00002590       439      CMP.B   #$1,bit2
00001464  6700 0232                440      BEQ     MOVEAN2
00001468  0C39 0002 00002590       441      CMP.B   #$2, bit2 
00001470  6700 0246                442      BEQ     MOVIAN2
00001474  0C39 0003 00002590       443      CMP.B   #$3, bit2 
0000147C  6700 0272                444      BEQ     MOVIANI2
00001480  0C39 0004 00002590       445      CMP.B   #$4, bit2 
00001488  6700 02AA                446      BEQ     MOVIAND2
0000148C  BA3C 0005                447      CMP.B   #$5, D5
00001490  6700 02E6                448      BEQ     MOVBDN2
00001494                           449  
00001494                           450  MOVEIANI1
00001494  43F9 000024C5            451      LEA TAB, A1
0000149A  103C 000E                452      MOVE.B  #14,D0
0000149E  4E4F                     453      TRAP    #15
000014A0                           454      
000014A0  43F9 000024CB            455      LEA OPENBRA, A1
000014A6  103C 000E                456      MOVE.B  #14,D0
000014AA  4E4F                     457      TRAP    #15
000014AC                           458  
000014AC  43F9 000024D5            459      LEA DISPA,A1
000014B2  103C 000E                460      MOVE.B  #14,D0
000014B6  4E4F                     461      TRAP    #15
000014B8                           462      
000014B8  1239 00002592            463      MOVE.B  bit4, D1
000014BE  103C 0003                464      MOVE.B  #3, D0
000014C2  4E4F                     465      TRAP    #15
000014C4                           466      
000014C4  43F9 000024CD            467      LEA CLOSEBRA, A1
000014CA  103C 000E                468      MOVE.B  #14,D0
000014CE  4E4F                     469      TRAP    #15
000014D0                           470      
000014D0  43F9 000024CF            471      LEA POS, A1
000014D6  103C 000E                472      MOVE.B  #14,D0
000014DA  4E4F                     473      TRAP    #15
000014DC                           474      
000014DC  43F9 000024C9            475      LEA COMMA, A1
000014E2  103C 000E                476      MOVE.B  #14,D0
000014E6  4E4F                     477      TRAP    #15
000014E8                           478      
000014E8  0C39 0000 00002590       479      CMP.B   #$0,bit2
000014F0  6700 0286                480      BEQ     MOVBDN2
000014F4  0C39 0001 00002590       481      CMP.B   #$1,bit2
000014FC  6700 019A                482      BEQ     MOVEAN2
00001500  0C39 0002 00002590       483      CMP.B   #$2, bit2 
00001508  6700 01AE                484      BEQ     MOVIAN2
0000150C  0C39 0003 00002590       485      CMP.B   #$3, bit2 
00001514  6700 01DA                486      BEQ     MOVIANI2
00001518  0C39 0004 00002590       487      CMP.B   #$4, bit2 
00001520  6700 0212                488      BEQ     MOVIAND2
00001524  BA3C 0005                489      CMP.B   #$5, D5
00001528  6700 024E                490      BEQ     MOVBDN2
0000152C                           491  
0000152C                           492  MOVEIAND1
0000152C  43F9 000024C5            493      LEA TAB, A1
00001532  103C 000E                494      MOVE.B  #14,D0
00001536  4E4F                     495      TRAP    #15
00001538                           496      
00001538  43F9 000024D1            497      LEA NEG, A1
0000153E  103C 000E                498      MOVE.B  #14,D0
00001542  4E4F                     499      TRAP    #15
00001544                           500      
00001544  43F9 000024CB            501      LEA OPENBRA, A1
0000154A  103C 000E                502      MOVE.B  #14,D0
0000154E  4E4F                     503      TRAP    #15
00001550                           504  
00001550  43F9 000024D5            505      LEA DISPA,A1
00001556  103C 000E                506      MOVE.B  #14,D0
0000155A  4E4F                     507      TRAP    #15
0000155C                           508      
0000155C  1239 00002592            509      MOVE.B  bit4, D1
00001562  103C 0003                510      MOVE.B  #3, D0
00001566  4E4F                     511      TRAP    #15
00001568                           512      
00001568  43F9 000024CD            513      LEA CLOSEBRA, A1
0000156E  103C 000E                514      MOVE.B  #14,D0
00001572  4E4F                     515      TRAP    #15
00001574                           516      
00001574  43F9 000024C9            517      LEA COMMA, A1
0000157A  103C 000E                518      MOVE.B  #14,D0
0000157E  4E4F                     519      TRAP    #15
00001580                           520      
00001580  0C39 0000 00002590       521      CMP.B   #$0,bit2
00001588  6700 01EE                522      BEQ     MOVBDN2
0000158C  0C39 0001 00002590       523      CMP.B   #$1,bit2
00001594  6700 0102                524      BEQ     MOVEAN2
00001598  0C39 0002 00002590       525      CMP.B   #$2, bit2 
000015A0  6700 0116                526      BEQ     MOVIAN2
000015A4  0C39 0003 00002590       527      CMP.B   #$3, bit2 
000015AC  6700 0142                528      BEQ     MOVIANI2
000015B0  0C39 0004 00002590       529      CMP.B   #$4, bit2 
000015B8  6700 017A                530      BEQ     MOVIAND2
000015BC  BA3C 0005                531      CMP.B   #$5, D5
000015C0  6700 01B6                532      BEQ     MOVBDN2
000015C4                           533  
000015C4                           534  MOVBDN1
000015C4  43F9 000024C5            535      LEA TAB, A1
000015CA  103C 000E                536      MOVE.B  #14,D0
000015CE  4E4F                     537      TRAP    #15
000015D0                           538      
000015D0  BA3C 0006                539      CMP.B   #$6, D5             * Data Reg for LSLR
000015D4  6700 007A                540      BEQ     LSLRSRCD
000015D8                           541  
000015D8  43F9 000024DB            542      LEA DISPD, A1
000015DE  103C 000E                543      MOVE.B  #14,D0
000015E2  4E4F                     544      TRAP    #15
000015E4                           545      
000015E4  1239 00002592            546      MOVE.B  bit4, D1
000015EA  103C 0003                547      MOVE.B  #3,D0
000015EE  4E4F                     548      TRAP    #15
000015F0                           549      
000015F0  BA3C 0004                550      CMP.B   #$4, D5
000015F4  6700 01AA                551      BEQ     ENDNLINC
000015F8                           552      
000015F8  43F9 000024C9            553      LEA COMMA, A1
000015FE  103C 000E                554      MOVE.B  #14,D0
00001602  4E4F                     555      TRAP    #15
00001604                           556      
00001604  BA3C 0006                557      CMP.B   #$6, D5             * Data Reg for LSLR
00001608  6700 006E                558      BEQ     LSLRDESD
0000160C  0C39 0000 00002590       559      CMP.B   #$0,bit2
00001614  6700 0162                560      BEQ     MOVBDN2
00001618  0C39 0001 00002590       561      CMP.B   #$1,bit2
00001620  6700 0076                562      BEQ     MOVEAN2
00001624  0C39 0002 00002590       563      CMP.B   #$2, bit2 
0000162C  6700 008A                564      BEQ     MOVIAN2
00001630  0C39 0003 00002590       565      CMP.B   #$3, bit2 
00001638  6700 00B6                566      BEQ     MOVIANI2
0000163C  0C39 0004 00002590       567      CMP.B   #$4, bit2 
00001644  6700 00EE                568      BEQ     MOVIAND2
00001648  BA3C 0005                569      CMP.B   #$5, D5
0000164C  6700 012A                570      BEQ     MOVBDN2
00001650                           571      
00001650                           572  LSLRSRCD
00001650  43F9 000024DB            573      LEA DISPD, A1
00001656  103C 000E                574      MOVE.B  #14,D0
0000165A  4E4F                     575      TRAP    #15
0000165C                           576          
0000165C  1239 0000258E            577      MOVE.B  bit0, D1
00001662  103C 0003                578      MOVE.B  #3,D0
00001666  4E4F                     579      TRAP    #15    
00001668                           580  
00001668  43F9 000024C9            581      LEA COMMA, A1
0000166E  103C 000E                582      MOVE.B  #14,D0
00001672  4E4F                     583      TRAP    #15  
00001674                           584      
00001674  6000 0002                585      BRA     LSLRDESD
00001678                           586      
00001678                           587  LSLRDESD
00001678  43F9 000024DB            588      LEA DISPD, A1
0000167E  103C 000E                589      MOVE.B  #14,D0
00001682  4E4F                     590      TRAP    #15
00001684                           591          
00001684  1239 00002592            592      MOVE.B  bit4, D1
0000168A  103C 0003                593      MOVE.B  #3,D0
0000168E  4E4F                     594      TRAP    #15      
00001690                           595      
00001690  11DE 7500                596      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001694  6000 0D84                597      BRA     ENDNEWLINE       
00001698                           598  MOVEAN2
00001698  43F9 000024D5            599      LEA DISPA,A1
0000169E  103C 000E                600      MOVE.B  #14,D0
000016A2  4E4F                     601      TRAP    #15
000016A4                           602      
000016A4  1239 0000258F            603      MOVE.B  bit1, D1
000016AA  103C 0003                604      MOVE.B  #3, D0
000016AE  4E4F                     605      TRAP    #15
000016B0                           606  
000016B0  11DE 7500                607      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000016B4  6000 0D64                608      BRA     ENDNEWLINE    
000016B8                           609      
000016B8                           610  MOVIAN2
000016B8  43F9 000024CB            611      LEA OPENBRA, A1
000016BE  103C 000E                612      MOVE.B  #14,D0
000016C2  4E4F                     613      TRAP    #15
000016C4                           614  
000016C4  43F9 000024D5            615      LEA DISPA,A1
000016CA  103C 000E                616      MOVE.B  #14,D0
000016CE  4E4F                     617      TRAP    #15
000016D0                           618      
000016D0  1239 0000258F            619      MOVE.B  bit1, D1
000016D6  103C 0003                620      MOVE.B  #3, D0
000016DA  4E4F                     621      TRAP    #15
000016DC                           622      
000016DC  43F9 000024CD            623      LEA CLOSEBRA, A1
000016E2  103C 000E                624      MOVE.B  #14,D0
000016E6  4E4F                     625      TRAP    #15
000016E8                           626      
000016E8  11DE 7500                627      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000016EC  6000 0D2C                628      BRA     ENDNEWLINE
000016F0                           629  
000016F0                           630  MOVIANI2
000016F0  43F9 000024CB            631      LEA OPENBRA, A1
000016F6  103C 000E                632      MOVE.B  #14,D0
000016FA  4E4F                     633      TRAP    #15
000016FC                           634  
000016FC  43F9 000024D5            635      LEA DISPA,A1
00001702  103C 000E                636      MOVE.B  #14,D0
00001706  4E4F                     637      TRAP    #15
00001708                           638      
00001708  1239 0000258F            639      MOVE.B  bit1, D1
0000170E  103C 0003                640      MOVE.B  #3, D0
00001712  4E4F                     641      TRAP    #15
00001714                           642      
00001714  43F9 000024CD            643      LEA CLOSEBRA, A1
0000171A  103C 000E                644      MOVE.B  #14,D0
0000171E  4E4F                     645      TRAP    #15
00001720                           646      
00001720  43F9 000024CF            647      LEA POS, A1
00001726  103C 000E                648      MOVE.B  #14,D0
0000172A  4E4F                     649      TRAP    #15
0000172C                           650      
0000172C  11DE 7500                651      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001730  6000 0CE8                652      BRA     ENDNEWLINE
00001734                           653  
00001734                           654  MOVIAND2
00001734  43F9 000024D1            655      LEA NEG, A1
0000173A  103C 000E                656      MOVE.B  #14,D0
0000173E  4E4F                     657      TRAP    #15
00001740                           658      
00001740  43F9 000024CB            659      LEA OPENBRA, A1
00001746  103C 000E                660      MOVE.B  #14,D0
0000174A  4E4F                     661      TRAP    #15
0000174C                           662  
0000174C  43F9 000024D5            663      LEA DISPA,A1
00001752  103C 000E                664      MOVE.B  #14,D0
00001756  4E4F                     665      TRAP    #15
00001758                           666      
00001758  1239 0000258F            667      MOVE.B  bit1, D1
0000175E  103C 0003                668      MOVE.B  #3, D0
00001762  4E4F                     669      TRAP    #15
00001764                           670      
00001764  43F9 000024CD            671      LEA CLOSEBRA, A1
0000176A  103C 000E                672      MOVE.B  #14,D0
0000176E  4E4F                     673      TRAP    #15
00001770                           674  
00001770  11DE 7500                675      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001774  6000 0CA4                676      BRA     ENDNEWLINE
00001778                           677  
00001778                           678  MOVBDN2
00001778  43F9 000024DB            679      LEA DISPD, A1
0000177E  103C 000E                680      MOVE.B  #14,D0
00001782  4E4F                     681      TRAP    #15
00001784                           682          
00001784  1239 0000258F            683      MOVE.B  bit1, D1
0000178A  103C 0003                684      MOVE.B  #3,D0
0000178E  4E4F                     685      TRAP    #15   
00001790                           686      
00001790  B83C 0000                687      CMP.B   #$0, D4                 * MULS meaning that A6 has already been incremented 
00001794  6700 0C84                688      BEQ     ENDNEWLINE
00001798                           689      
00001798  11DE 7500                690      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
0000179C  6000 0C7C                691      BRA     ENDNEWLINE
000017A0                           692      
000017A0                           693  ENDNLINC
000017A0  11DE 7500                694      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000017A4  6000 0C74                695      BRA     ENDNEWLINE    
000017A8                           696      
000017A8                           697  MULSW
000017A8  1407                     698          MOVE.B  D7, D2
000017AA  EB0A                     699          LSL.B   #5, D2
000017AC  EA0A                     700          LSR.B   #5, D2
000017AE  13C2 00002592            701          MOVE.B  D2, bit4
000017B4                           702          
000017B4  1407                     703          MOVE.B  D7, D2
000017B6  E50A                     704          LSL.B   #2, D2
000017B8  EA0A                     705          LSR.B   #5, D2
000017BA  13C2 00002591            706          MOVE.B  D2, bit3
000017C0                           707          
000017C0  3C07                     708          MOVE.W  D7, D6
000017C2  EF4E                     709          LSL.W   #7, D6
000017C4  E04E                     710          LSR.W   #8, D6 
000017C6  EA4E                     711          LSR.W   #5, D6 
000017C8  13C6 00002590            712          MOVE.B  D6, bit2
000017CE                           713          
000017CE  E94F                     714          LSL.W   #4, D7
000017D0  E04F                     715          LSR.W   #8, D7 
000017D2  EA4F                     716          LSR.W   #5, D7 
000017D4  13C7 0000258F            717          MOVE.B  D7, bit1
000017DA                           718          
000017DA  43F9 00002506            719          LEA MMULSW, A1
000017E0  323C 000E                720          MOVE    #14, D1
000017E4  4E4F                     721          TRAP    #15
000017E6                           722          
000017E6  1A3C 0005                723          MOVE.B  #$5, D5 
000017EA                           724          
000017EA  0C39 0000 00002591       725          CMP.B   #$0, bit3           
000017F2  6700 FDD0                726          BEQ     MOVBDN1
000017F6  0C39 0001 00002591       727          CMP.B   #$1, bit3
000017FE  6700 FB94                728          BEQ     MOVEAN1
00001802  0C39 0002 00002591       729          CMP.B   #$2, bit3
0000180A  6700 FBFC                730          BEQ     MOVEIAN1
0000180E  0C39 0003 00002591       731          CMP.B   #$3, bit3
00001816  6700 FC7C                732          BEQ     MOVEIANI1
0000181A  0C39 0004 00002591       733          CMP.B   #$4, bit3
00001822  6700 FD08                734          BEQ     MOVEIAND1
00001826  0C39 0007 00002591       735          CMP.B   #$7, bit3
0000182E  6700 FB40                736          BEQ     ADDIMD
00001832                           737  
00001832                           738           
00001832                           739  DIVSW               
00001832  1406                     740          MOVE.B  D6, D2
00001834  EB0A                     741          LSL.B   #5, D2
00001836  EA0A                     742          LSR.B   #5, D2
00001838  13C2 00002592            743          MOVE.B  D2, bit4
0000183E                           744          
0000183E  1406                     745          MOVE.B  D6, D2
00001840  E50A                     746          LSL.B   #2, D2
00001842  EA0A                     747          LSR.B   #5, D2
00001844  13C2 00002591            748          MOVE.B  D2, bit3
0000184A                           749          
0000184A  3E06                     750          MOVE.W  D6, D7
0000184C  EF4F                     751          LSL.W   #7, D7
0000184E  E04F                     752          LSR.W   #8, D7 
00001850  EA4F                     753          LSR.W   #5, D7 
00001852  13C7 00002590            754          MOVE.B  D7, bit2
00001858                           755          
00001858  E94E                     756          LSL.W   #4, D6
0000185A  E04E                     757          LSR.W   #8, D6 
0000185C  EA4E                     758          LSR.W   #5, D6 
0000185E  13C6 0000258F            759          MOVE.B  D6, bit1
00001864                           760          
00001864  43F9 000024FF            761          LEA MMDIVSW, A1
0000186A  323C 000E                762          MOVE    #14, D1
0000186E  4E4F                     763          TRAP    #15
00001870                           764          
00001870  1A3C 0005                765          MOVE.B  #$5, D5 
00001874  183C 0004                766          MOVE.B  #$4, D4
00001878                           767          
00001878  0C39 0000 00002591       768          CMP.B   #$0, bit3           
00001880  6700 FD42                769          BEQ     MOVBDN1
00001884  0C39 0001 00002591       770          CMP.B   #$1, bit3
0000188C  6700 FB06                771          BEQ     MOVEAN1
00001890  0C39 0002 00002591       772          CMP.B   #$2, bit3
00001898  6700 FB6E                773          BEQ     MOVEIAN1
0000189C  0C39 0003 00002591       774          CMP.B   #$3, bit3
000018A4  6700 FBEE                775          BEQ     MOVEIANI1
000018A8  0C39 0004 00002591       776          CMP.B   #$4, bit3
000018B0  6700 FC7A                777          BEQ     MOVEIAND1
000018B4  0C39 0007 00002591       778          CMP.B   #$7, bit3
000018BC  6700 FAB2                779          BEQ     ADDIMD
000018C0                           780  
000018C0                           781  NEGW
000018C0  1406                     782          MOVE.B  D6, D2
000018C2  EB0A                     783          LSL.B   #5, D2
000018C4  EA0A                     784          LSR.B   #5, D2
000018C6  13C2 00002592            785          MOVE.B  D2, bit4
000018CC                           786          
000018CC  1406                     787          MOVE.B  D6, D2
000018CE  E50A                     788          LSL.B   #2, D2
000018D0  EA0A                     789          LSR.B   #5, D2
000018D2  13C2 00002591            790          MOVE.B  D2, bit3
000018D8                           791          
000018D8  3E06                     792          MOVE.W  D6, D7
000018DA  E14F                     793          LSL.W   #8, D7
000018DC  E04F                     794          LSR.W   #8, D7 
000018DE  EC4F                     795          LSR.W   #6, D7 
000018E0  13C7 00002590            796          MOVE.B  D7, bit2
000018E6                           797          
000018E6  43F9 000024FA            798          LEA MMNEGW, A1
000018EC  323C 000E                799          MOVE    #14, D1
000018F0  4E4F                     800          TRAP    #15
000018F2                           801          
000018F2  1A3C 0004                802          MOVE.B  #$4, D5
000018F6                           803          
000018F6  0C39 0000 00002590       804          CMP.B   #$0, bit2
000018FE  6700 001A                805          BEQ     PRINTBYTE
00001902  0C39 0001 00002590       806          CMP.B   #$1, bit2
0000190A  6700 0062                807          BEQ     PRINTWORD
0000190E  0C39 0002 00002590       808          CMP.B   #$2, bit2
00001916  6700 00AA                809          BEQ     PRINTLONG
0000191A                           810          
0000191A                           811  PRINTBYTE
0000191A  43F9 000024E3            812      LEA MBYTE, A1
00001920  323C 000E                813      MOVE    #14, D1
00001924  4E4F                     814      TRAP    #15
00001926                           815  
00001926  0C39 0000 00002591       816      CMP.B   #$0, bit3           
0000192E  6700 FC94                817          BEQ     MOVBDN1
00001932  0C39 0001 00002591       818          CMP.B   #$1, bit3
0000193A  6700 FA58                819          BEQ     MOVEAN1
0000193E  0C39 0002 00002591       820          CMP.B   #$2, bit3
00001946  6700 FAC0                821          BEQ     MOVEIAN1
0000194A  0C39 0003 00002591       822          CMP.B   #$3, bit3
00001952  6700 FB40                823          BEQ     MOVEIANI1
00001956  0C39 0004 00002591       824          CMP.B   #$4, bit3
0000195E  6700 FBCC                825          BEQ     MOVEIAND1
00001962  0C39 0007 00002591       826          CMP.B   #$7, bit3
0000196A  6700 FA04                827          BEQ     ADDIMD
0000196E                           828      
0000196E                           829  PRINTWORD
0000196E  43F9 000024E6            830      LEA MWORD, A1
00001974  323C 000E                831      MOVE    #14, D1
00001978  4E4F                     832      TRAP    #15
0000197A                           833  
0000197A  0C39 0000 00002591       834      CMP.B   #$0, bit3           
00001982  6700 FC40                835          BEQ     MOVBDN1
00001986  0C39 0001 00002591       836          CMP.B   #$1, bit3
0000198E  6700 FA04                837          BEQ     MOVEAN1
00001992  0C39 0002 00002591       838          CMP.B   #$2, bit3
0000199A  6700 FA6C                839          BEQ     MOVEIAN1
0000199E  0C39 0003 00002591       840          CMP.B   #$3, bit3
000019A6  6700 FAEC                841          BEQ     MOVEIANI1
000019AA  0C39 0004 00002591       842          CMP.B   #$4, bit3
000019B2  6700 FB78                843          BEQ     MOVEIAND1
000019B6  0C39 0007 00002591       844          CMP.B   #$7, bit3
000019BE  6700 F9B0                845          BEQ     ADDIMD
000019C2                           846      
000019C2                           847  PRINTLONG
000019C2  43F9 000024E9            848      LEA MLONG, A1
000019C8  323C 000E                849      MOVE    #14, D1
000019CC  4E4F                     850      TRAP    #15
000019CE                           851   
000019CE  0C39 0000 00002591       852      CMP.B   #$0, bit3           
000019D6  6700 FBEC                853          BEQ     MOVBDN1
000019DA  0C39 0001 00002591       854          CMP.B   #$1, bit3
000019E2  6700 F9B0                855          BEQ     MOVEAN1
000019E6  0C39 0002 00002591       856          CMP.B   #$2, bit3
000019EE  6700 FA18                857          BEQ     MOVEIAN1
000019F2  0C39 0003 00002591       858          CMP.B   #$3, bit3
000019FA  6700 FA98                859          BEQ     MOVEIANI1
000019FE  0C39 0004 00002591       860          CMP.B   #$4, bit3
00001A06  6700 FB24                861          BEQ     MOVEIAND1
00001A0A  0C39 0007 00002591       862          CMP.B   #$7, bit3
00001A12  6700 F95C                863          BEQ     ADDIMD
00001A16                           864          
00001A16                           865  LSLR                
00001A16  1406                     866          MOVE.B  D6, D2
00001A18  EB0A                     867          LSL.B   #5, D2
00001A1A  EA0A                     868          LSR.B   #5, D2
00001A1C  13C2 00002592            869          MOVE.B  D2, bit4
00001A22                           870          
00001A22  1406                     871          MOVE.B  D6, D2
00001A24  E50A                     872          LSL.B   #2, D2
00001A26  EE0A                     873          LSR.B   #7, D2
00001A28  13C2 00002591            874          MOVE.B  D2, bit3
00001A2E                           875          
00001A2E  3E06                     876          MOVE.W  D6, D7
00001A30  E14F                     877          LSL.W   #8, D7
00001A32  E04F                     878          LSR.W   #8, D7 
00001A34  EC4F                     879          LSR.W   #6, D7 
00001A36  13C7 00002590            880          MOVE.B  D7, bit2
00001A3C                           881          
00001A3C  3E06                     882          MOVE.W  D6, D7
00001A3E  EF4F                     883          LSL.W   #7, D7
00001A40  E04F                     884          LSR.W   #8, D7 
00001A42  EE4F                     885          LSR.W   #7, D7
00001A44  13C7 0000258F            886          MOVE.B  D7, bit1   
00001A4A                           887      
00001A4A  E94E                     888          LSL.W   #4, D6
00001A4C  E04E                     889          LSR.W   #8, D6 
00001A4E  EA4E                     890          LSR.W   #5, D6
00001A50  13C6 0000258E            891          MOVE.B  D6, bit0 
00001A56                           892          
00001A56  0C39 0001 0000258F       893          CMP.B   #$1, bit1
00001A5E  6700 000E                894          BEQ     PRINTLSL
00001A62  0C39 0000 0000258F       895          CMP.B   #$0, bit1
00001A6A  6700 00DE                896          BEQ     PRINTLSR
00001A6E                           897          
00001A6E                           898  PRINTLSL
00001A6E  43F9 000024F0            899          LEA MLSL, A1
00001A74  303C 000E                900          MOVE    #14,D0
00001A78  4E4F                     901          TRAP    #15
00001A7A                           902          
00001A7A  0C39 0000 00002590       903          CMP.B   #$0, bit2
00001A82  6700 001A                904          BEQ     PRINTB
00001A86  0C39 0001 00002590       905          CMP.B   #$1, bit2
00001A8E  6700 0036                906          BEQ     PRINTW
00001A92  0C39 0002 00002590       907          CMP.B   #$2, bit2
00001A9A  6700 0052                908          BEQ     PRINTL
00001A9E                           909          
00001A9E                           910  PRINTB
00001A9E  43F9 000024E3            911          LEA MBYTE,  A1
00001AA4  303C 000E                912          MOVE    #14, D0
00001AA8  4E4F                     913          TRAP    #15
00001AAA                           914          
00001AAA  3A3C 0006                915          MOVE #$6, D5
00001AAE                           916          
00001AAE  0C39 0000 00002591       917          CMP.B   #0, bit3
00001AB6  6700 005E                918          BEQ     PRINTLSLRCOUNT
00001ABA  0C39 0001 00002591       919          CMP.B   #1, bit3
00001AC2  6700 FB00                920          BEQ     MOVBDN1
00001AC6                           921  
00001AC6                           922  PRINTW 
00001AC6  43F9 000024E6            923          LEA MWORD, A1
00001ACC  303C 000E                924          MOVE    #14, D0
00001AD0  4E4F                     925          TRAP    #15
00001AD2                           926          
00001AD2  3A3C 0006                927          MOVE #$6, D5
00001AD6                           928          
00001AD6  0C39 0000 00002591       929          CMP.B   #0, bit3
00001ADE  6700 0036                930          BEQ     PRINTLSLRCOUNT
00001AE2  0C39 0001 00002591       931          CMP.B   #1, bit3
00001AEA  6700 FAD8                932          BEQ     MOVBDN1
00001AEE                           933  
00001AEE                           934  PRINTL
00001AEE  43F9 000024E9            935          LEA MLONG, A1
00001AF4  303C 000E                936          MOVE    #14, D0
00001AF8  4E4F                     937          TRAP    #15
00001AFA                           938  
00001AFA  3A3C 0006                939          MOVE #$6, D5
00001AFE                           940          
00001AFE  0C39 0000 00002591       941          CMP.B   #0, bit3
00001B06  6700 000E                942          BEQ     PRINTLSLRCOUNT
00001B0A  0C39 0001 00002591       943          CMP.B   #1, bit3
00001B12  6700 FAB0                944          BEQ     MOVBDN1    
00001B16                           945  
00001B16                           946  PRINTLSLRCOUNT
00001B16  43F9 000024C5            947          LEA TAB, A1
00001B1C  303C 000E                948          MOVE    #14,D0
00001B20  4E4F                     949          TRAP    #15
00001B22                           950          
00001B22  45F9 000024D3            951          LEA HASH, A2
00001B28  303C 000E                952          MOVE    #14,D0
00001B2C  4E4F                     953          TRAP    #15
00001B2E                           954          
00001B2E  1239 0000258E            955          MOVE.B  bit0, D1
00001B34  303C 0003                956          MOVE    #3,D0
00001B38  4E4F                     957          TRAP    #15
00001B3A                           958          
00001B3A  43F9 000024C9            959          LEA COMMA, A1
00001B40  303C 000E                960          MOVE    #14,D0
00001B44  4E4F                     961          TRAP    #15
00001B46                           962          
00001B46  6000 FB30                963          BRA LSLRDESD
00001B4A                           964    
00001B4A                           965  PRINTLSR
00001B4A  43F9 000024F5            966          LEA MLSR, A1
00001B50  323C 000E                967          MOVE    #14,D1
00001B54  4E4F                     968          TRAP    #15
00001B56                           969          
00001B56  0C39 0000 00002590       970          CMP.B   #$0, bit2
00001B5E  6700 FF3E                971          BEQ     PRINTB
00001B62  0C39 0001 00002590       972          CMP.B   #$1, bit2
00001B6A  6700 FF5A                973          BEQ     PRINTW
00001B6E  0C39 0002 00002590       974          CMP.B   #$2, bit2
00001B76  6700 FF76                975          BEQ     PRINTL
00001B7A                           976  ******************************************************************************************************
00001B7A                           977  *   Immediate data arithmetic operations
00001B7A                           978  *   SUBI
00001B7A                           979  
00001B7A  13C5 0000258F            980  IMD     MOVE.B  D5,bit1
00001B80  141E                     981          MOVE.B  (A6)+,D2
00001B82                           982  
00001B82  DE02                     983          ADD.B   D2,D7
00001B84                           984  
00001B84  1602                     985          MOVE.B  D2,D3               Copies data at D2 to D3
00001B86                           986          *   this gets digit in 10's place
00001B86  E80B                     987          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001B88                           988          *   this gets digit in 1's place
00001B88  E90A                     989          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001B8A  E80A                     990          LSR.B   #4,D2               Shifts back right into 1's place
00001B8C                           991  
00001B8C                           992          *   D3 holds digit in 10's place
00001B8C                           993          *   D2 holds digit in 1's place
00001B8C                           994  
00001B8C  E20B                     995          LSR.B   #1,D3
00001B8E  6400 0004                996          BCC     IMD2
00001B92  5404                     997          ADD.B   #$2,D4
00001B94  E20B                     998  IMD2    LSR.B   #1,D3
00001B96  6400 0004                999          BCC     IMD3
00001B9A  5804                    1000          ADD.B   #$4,D4
00001B9C  B43C 0007               1001  IMD3    CMP.B   #$7,D2
00001BA0  6D00 0006               1002          BLT     IMD4
00001BA4  5204                    1003          ADD.B   #$1,D4
00001BA6  5102                    1004          SUB.B   #$8,D2
00001BA8                          1005  
00001BA8                          1006          *   Stores them into addr
00001BA8  13C3 00002590           1007  IMD4    MOVE.B  D3,bit2
00001BAE  13C4 00002591           1008          MOVE.B  D4,bit3
00001BB4  13C2 00002592           1009          MOVE.B  D2,bit4
00001BBA                          1010  
00001BBA                          1011  **************************
00001BBA                          1012  * This finds the size of the operation
00001BBA                          1013  
00001BBA  0C39 0000 00002590      1014          CMP.B   #$0,bit2
00001BC2  6700 0068               1015          BEQ     IMDBYTE
00001BC6  0C39 0001 00002590      1016          CMP.B   #$1,bit2
00001BCE  6700 006C               1017          BEQ     IMDWORD
00001BD2  0C39 0002 00002590      1018          CMP.B   #$2,bit2
00001BDA  6700 006E               1019          BEQ     IMDLONG
00001BDE  6000 07C8               1020          BRA     INVOP
00001BE2                          1021  
00001BE2                          1022  *************************************************************
00001BE2                          1023  * Display IMD op-code
00001BE2                          1024  IMDPRINT
00001BE2  0C39 0000 0000258F      1025          CMP.B   #$0,bit1
00001BEA  6700 001A               1026          BEQ     IMDPRINTORI
00001BEE  0C39 0004 0000258F      1027          CMP.B   #$4,bit1
00001BF6  6700 0018               1028          BEQ     IMDPRINTSUBI
00001BFA  0C39 0006 0000258F      1029          CMP.B   #$6,bit1
00001C02  6700 0016               1030          BEQ     IMDPRINTNOT
00001C06                          1031  
00001C06                          1032  IMDPRINTORI
00001C06  43F9 00002552           1033          LEA     MORI,A1
00001C0C  6000 0016               1034          BRA     IMDPRINTEND
00001C10                          1035  
00001C10                          1036  IMDPRINTSUBI
00001C10  43F9 0000254C           1037          LEA     MSUBI,A1
00001C16  6000 000C               1038          BRA     IMDPRINTEND
00001C1A                          1039  
00001C1A                          1040  * NOT isn't part of immediate operation, but they share similar structure so I put it here too
00001C1A                          1041  IMDPRINTNOT
00001C1A  43F9 00002557           1042          LEA     MNOT,A1
00001C20  6000 0002               1043          BRA     IMDPRINTEND
00001C24                          1044  
00001C24                          1045  IMDPRINTEND
00001C24  103C 000E               1046          MOVE.B  #14,D0
00001C28  4E4F                    1047          TRAP    #15
00001C2A  4E75                    1048          RTS
00001C2C                          1049  
00001C2C                          1050  *************************************************************
00001C2C                          1051  * Immediate data operation size BYTE
00001C2C                          1052  IMDBYTE
00001C2C  61B4                    1053          BSR     IMDPRINT
00001C2E  43F9 000024E3           1054          LEA     MBYTE,A1
00001C34                          1055  
00001C34                          1056          * Moves size to D4, needed to use DISPEA
00001C34  183C 0001               1057          MOVE.B  #$1,D4
00001C38  6000 001A               1058          BRA     IMDEA
00001C3C                          1059  
00001C3C                          1060  *************************************************************
00001C3C                          1061  * Immediate data operation size WORD
00001C3C                          1062  IMDWORD
00001C3C  61A4                    1063          BSR     IMDPRINT
00001C3E  43F9 000024E6           1064          LEA     MWORD,A1
00001C44                          1065  
00001C44  1803                    1066          MOVE.B  D3,D4
00001C46  6000 000C               1067          BRA     IMDEA
00001C4A                          1068  
00001C4A                          1069  
00001C4A                          1070  *************************************************************
00001C4A                          1071  * Immediate data operation size LONG
00001C4A                          1072  IMDLONG
00001C4A  6196                    1073          BSR     IMDPRINT
00001C4C  43F9 000024E9           1074          LEA     MLONG,A1
00001C52                          1075          
00001C52                          1076  
00001C52                          1077          * Moves size to D4, needed to use DISPEA
00001C52  1803                    1078          MOVE.B  D3,D4
00001C54                          1079  
00001C54                          1080  IMDEA
00001C54                          1081          * This prints out the size and creates tab
00001C54  103C 000E               1082          MOVE.B  #14,D0
00001C58  4E4F                    1083          TRAP    #15
00001C5A  43F9 000024C5           1084          LEA     TAB,A1
00001C60  103C 000E               1085          MOVE.B  #14,D0
00001C64  4E4F                    1086          TRAP    #15
00001C66                          1087          * Loads return address into A2
00001C66  45F9 00001C70           1088          LEA     IMDEA2,A2
00001C6C  6000 06D2               1089          BRA     DISPEA
00001C70                          1090  IMDEA2
00001C70  43F9 000024C9           1091          LEA     COMMA,A1
00001C76  103C 000E               1092          MOVE.B  #14,D0
00001C7A  4E4F                    1093          TRAP    #15
00001C7C                          1094  
00001C7C  45F9 00001C86           1095          LEA     IMDEA3,A2
00001C82  6000 056C               1096          BRA     SUBEA
00001C86                          1097  IMDEA3
00001C86  6000 0792               1098          BRA     ENDNEWLINE
00001C8A                          1099  
00001C8A                          1100  ******************************************************************************************************
00001C8A                          1101  * Miscellaneous section
00001C8A                          1102  *   Not goes here
00001C8A                          1103  
00001C8A                          1104  MISC
00001C8A  B43C 0004               1105          CMP.B   #$4, D2
00001C8E  6700 FC30               1106          BEQ     NEGW
00001C92  13C5 0000258F           1107          MOVE.B  D5,bit1
00001C98  141E                    1108          MOVE.B  (A6)+,D2
00001C9A                          1109  
00001C9A  DE02                    1110          ADD.B   D2,D7
00001C9C                          1111  
00001C9C  1602                    1112          MOVE.B  D2,D3               Copies data at D2 to D3
00001C9E                          1113          *   this gets digit in 10's place
00001C9E  E80B                    1114          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001CA0                          1115          *   this gets digit in 1's place
00001CA0  E90A                    1116          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001CA2  E80A                    1117          LSR.B   #4,D2               Shifts back right into 1's place
00001CA4                          1118  
00001CA4                          1119          *   D3 holds digit in 10's place
00001CA4                          1120          *   D2 holds digit in 1's place
00001CA4                          1121  
00001CA4  E20B                    1122          LSR.B   #1,D3
00001CA6  6400 0004               1123          BCC     MISC2
00001CAA  5404                    1124          ADD.B   #$2,D4
00001CAC  E20B                    1125  MISC2   LSR.B   #1,D3
00001CAE  6400 0004               1126          BCC     MISC3
00001CB2  5804                    1127          ADD.B   #$4,D4
00001CB4  B43C 0007               1128  MISC3   CMP.B   #$7,D2
00001CB8  6D00 0006               1129          BLT     MISC4
00001CBC  5204                    1130          ADD.B   #$1,D4
00001CBE  5102                    1131          SUB.B   #$8,D2
00001CC0                          1132  
00001CC0                          1133          *   Stores them into addr
00001CC0  13C3 00002590           1134  MISC4   MOVE.B  D3,bit2
00001CC6  13C4 00002591           1135          MOVE.B  D4,bit3
00001CCC  13C2 00002592           1136          MOVE.B  D2,bit4
00001CD2                          1137  
00001CD2                          1138  **************************
00001CD2                          1139  * This finds the size of the operation
00001CD2                          1140  
00001CD2  0C39 0006 0000258F      1141          CMP.B   #$6,bit1
00001CDA  6700 0006               1142          BEQ     MISCNOT
00001CDE  6000 06C8               1143          BRA     INVOP
00001CE2                          1144  
00001CE2                          1145  ******************************************************
00001CE2                          1146  * NOT
00001CE2                          1147  * Reuses some of IMD section to display because they have similar format
00001CE2                          1148  *  (I was kinda lazy too)
00001CE2                          1149  MISCNOT
00001CE2  0C39 0000 00002590      1150          CMP.B   #$0,bit2
00001CEA  6700 001A               1151          BEQ     MISCBYTE
00001CEE  0C39 0001 00002590      1152          CMP.B   #$1,bit2
00001CF6  6700 0020               1153          BEQ     MISCWORD
00001CFA  0C39 0002 00002590      1154          CMP.B   #$2,bit2
00001D02  6700 0024               1155          BEQ     MISCLONG
00001D06                          1156  
00001D06                          1157  *************************************************************
00001D06                          1158  * Immediate data operation size BYTE
00001D06                          1159  MISCBYTE
00001D06  6100 FEDA               1160          BSR     IMDPRINT
00001D0A  43F9 000024E3           1161          LEA     MBYTE,A1
00001D10                          1162  
00001D10                          1163          * Moves size to D4, needed to use DISPEA
00001D10  183C 0001               1164          MOVE.B  #$1,D4
00001D14  6000 001E               1165          BRA     MISCEA
00001D18                          1166  
00001D18                          1167  *************************************************************
00001D18                          1168  * Immediate data operation size WORD
00001D18                          1169  MISCWORD
00001D18  6100 FEC8               1170          BSR     IMDPRINT
00001D1C  43F9 000024E6           1171          LEA     MWORD,A1
00001D22                          1172  
00001D22  1803                    1173          MOVE.B  D3,D4
00001D24  6000 000E               1174          BRA     MISCEA
00001D28                          1175  
00001D28                          1176  
00001D28                          1177  *************************************************************
00001D28                          1178  * Immediate data operation size LONG
00001D28                          1179  MISCLONG
00001D28  6100 FEB8               1180          BSR     IMDPRINT
00001D2C  43F9 000024E9           1181          LEA     MLONG,A1
00001D32                          1182  
00001D32                          1183          * Moves size to D4, needed to use DISPEA
00001D32  1803                    1184          MOVE.B  D3,D4
00001D34                          1185  
00001D34                          1186  MISCEA
00001D34  103C 000E               1187          MOVE.B  #14,D0
00001D38  4E4F                    1188          TRAP    #15
00001D3A  43F9 000024C5           1189          LEA     TAB,A1
00001D40  103C 000E               1190          MOVE.B  #14,D0
00001D44  4E4F                    1191          TRAP    #15
00001D46                          1192  
00001D46  45F9 00001D50           1193          LEA     MISCEA2,A2
00001D4C  6000 04A2               1194          BRA     SUBEA
00001D50                          1195  MISCEA2
00001D50  6000 06C8               1196          BRA     ENDNEWLINE
00001D54                          1197  
00001D54                          1198  
00001D54                          1199  ******************************************************************************************************
00001D54                          1200  * SUB section
00001D54                          1201  
00001D54                          1202          *   Grabs next two nibbles
00001D54  141E                    1203  SUB     MOVE.B  (A6)+,D2
00001D56                          1204  
00001D56  DE02                    1205          ADD.B   D2,D7
00001D58                          1206  
00001D58  1602                    1207          MOVE.B  D2,D3               Copies data at D2 to D3
00001D5A                          1208          *   this gets digit in 10's place
00001D5A  E80B                    1209          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001D5C                          1210          *   this gets digit in 1's place
00001D5C  E90A                    1211          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001D5E  E80A                    1212          LSR.B   #4,D2               Shifts back right into 1's place
00001D60                          1213  
00001D60                          1214          *   D3 holds digit in 10's place
00001D60                          1215          *   D2 holds digit in 1's place
00001D60                          1216  
00001D60                          1217          
00001D60                          1218          *   Converts nibble into 3-bit parts
00001D60  E20B                    1219          LSR.B   #1,D3
00001D62  6400 0004               1220          BCC     SUB2
00001D66  5404                    1221          ADD.B   #$2,D4
00001D68                          1222          
00001D68  E20B                    1223  SUB2    LSR.B   #1,D3
00001D6A  6400 0004               1224          BCC     SUB3
00001D6E  5804                    1225          ADD.B   #$4,D4
00001D70                          1226          
00001D70  1205                    1227  SUB3    MOVE.B  D5,D1
00001D72  E209                    1228          LSR.B   #1,D1
00001D74  6400 0004               1229          BCC     SUB4
00001D78  5803                    1230          ADD.B   #$4,D3
00001D7A                          1231  
00001D7A  B43C 0007               1232  SUB4    CMP.B   #$7,D2
00001D7E  6D00 0006               1233          BLT     SUB1
00001D82  5204                    1234          ADD.B   #$1,D4
00001D84  5102                    1235          SUB.B   #$8,D2
00001D86                          1236  
00001D86                          1237          *   Stores them into addr
00001D86  13C1 0000258F           1238  SUB1    MOVE.B  D1,bit1
00001D8C  13C3 00002590           1239          MOVE.B  D3,bit2
00001D92  13C4 00002591           1240          MOVE.B  D4,bit3
00001D98  13C2 00002592           1241          MOVE.B  D2,bit4
00001D9E                          1242  
00001D9E                          1243          * do this later
00001D9E  4241                    1244          CLR     D1
00001DA0  7400                    1245          MOVE.L  #0,D2
00001DA2  7600                    1246          MOVE.L  #0,D3
00001DA4  7800                    1247          MOVE.L  #0,D4
00001DA6  7A00                    1248          MOVE.L  #0,D5
00001DA8  7C00                    1249          MOVE.L  #0,D6
00001DAA                          1250  
00001DAA                          1251          
00001DAA                          1252  ******************************************************************************************************
00001DAA                          1253  * After spliting the op-code into SUB's defined groupings
00001DAA                          1254  *   This figures out which operation it is and goes to that sub-routine
00001DAA                          1255  
00001DAA                          1256          * This will display SUBA instead  -- check this later
00001DAA  0C39 0003 00002590      1257          CMP.B   #$3,bit2
00001DB2  6700 01E6               1258          BEQ     SUBA
00001DB6  0C39 0007 00002590      1259          CMP.B   #$7,bit2
00001DBE  6700 F9E8               1260          BEQ     MULSW
00001DC2                          1261  
00001DC2                          1262  
00001DC2                          1263          * This will find the size and stuff
00001DC2  0C39 0000 00002590      1264          CMP.B   #$0,bit2
00001DCA  6700 003E               1265          BEQ     SUBSIZE1
00001DCE  0C39 0001 00002590      1266          CMP.B   #$1,bit2
00001DD6  6700 0072               1267          BEQ     SUBSIZE2
00001DDA  0C39 0002 00002590      1268          CMP.B   #$2,bit2
00001DE2  6700 00A6               1269          BEQ     SUBSIZE3
00001DE6  0C39 0004 00002590      1270          CMP.B   #$4,bit2
00001DEE  6700 00DA               1271          BEQ     SUBSIZE4
00001DF2  0C39 0005 00002590      1272          CMP.B   #$5,bit2
00001DFA  6700 0112               1273          BEQ     SUBSIZE5
00001DFE  0C39 0006 00002590      1274          CMP.B   #$6,bit2
00001E06  6700 014A               1275          BEQ     SUBSIZE6
00001E0A                          1276     
00001E0A                          1277  ******************************************************************************************************
00001E0A                          1278  *   Displays size, then does operation order
00001E0A                          1279  
00001E0A                          1280  *   000 byte    EA,DN
00001E0A                          1281  SUBSIZE1
00001E0A  6100 0228               1282          BSR     SUBPRINT
00001E0E  43F9 000024E3           1283          LEA     MBYTE,A1
00001E14  103C 000E               1284          MOVE.B  #14,D0
00001E18  4E4F                    1285          TRAP    #15
00001E1A  43F9 000024C5           1286          LEA     TAB,A1
00001E20  103C 000E               1287          MOVE.B  #14,D0
00001E24  4E4F                    1288          TRAP    #15
00001E26                          1289  
00001E26  45F9 00001E30           1290          LEA     SUBSIZE11,A2
00001E2C  6000 03C2               1291          BRA     SUBEA
00001E30                          1292  SUBSIZE11
00001E30  45F9 00001E46           1293          LEA     SUBSIZE12,A2
00001E36  43F9 000024C9           1294          LEA     COMMA,A1
00001E3C  103C 000E               1295          MOVE.B  #14,D0
00001E40  4E4F                    1296          TRAP    #15
00001E42  6000 0288               1297          BRA     SUBDN
00001E46                          1298  SUBSIZE12
00001E46  6000 05D2               1299          BRA     ENDNEWLINE
00001E4A                          1300  
00001E4A                          1301  *************************************************
00001E4A                          1302  *   001 word    EA,DN
00001E4A                          1303  SUBSIZE2
00001E4A  6100 01E8               1304          BSR     SUBPRINT
00001E4E  43F9 000024E6           1305          LEA     MWORD,A1
00001E54  103C 000E               1306          MOVE.B  #14,D0
00001E58  4E4F                    1307          TRAP    #15
00001E5A  43F9 000024C5           1308          LEA     TAB,A1
00001E60  103C 000E               1309          MOVE.B  #14,D0
00001E64  4E4F                    1310          TRAP    #15
00001E66                          1311  
00001E66  45F9 00001E70           1312          LEA     SUBSIZE21,A2
00001E6C  6000 0382               1313          BRA     SUBEA
00001E70                          1314  SUBSIZE21
00001E70  45F9 00001E86           1315          LEA     SUBSIZE22,A2
00001E76  43F9 000024C9           1316          LEA     COMMA,A1
00001E7C  103C 000E               1317          MOVE.B  #14,D0
00001E80  4E4F                    1318          TRAP    #15
00001E82  6000 0248               1319          BRA     SUBDN
00001E86                          1320  SUBSIZE22
00001E86  6000 0592               1321          BRA     ENDNEWLINE
00001E8A                          1322  
00001E8A                          1323  *************************************************
00001E8A                          1324  *   010 long    EA,DN
00001E8A                          1325  SUBSIZE3
00001E8A  6100 01A8               1326          BSR     SUBPRINT
00001E8E  43F9 000024E9           1327          LEA     MLONG,A1
00001E94  103C 000E               1328          MOVE.B  #14,D0
00001E98  4E4F                    1329          TRAP    #15
00001E9A  43F9 000024C5           1330          LEA     TAB,A1
00001EA0  103C 000E               1331          MOVE.B  #14,D0
00001EA4  4E4F                    1332          TRAP    #15
00001EA6                          1333  
00001EA6  45F9 00001EB0           1334          LEA     SUBSIZE31,A2
00001EAC  6000 0342               1335          BRA     SUBEA
00001EB0                          1336  SUBSIZE31
00001EB0  45F9 00001EC6           1337          LEA     SUBSIZE32,A2
00001EB6  43F9 000024C9           1338          LEA     COMMA,A1
00001EBC  103C 000E               1339          MOVE.B  #14,D0
00001EC0  4E4F                    1340          TRAP    #15
00001EC2  6000 0208               1341          BRA     SUBDN
00001EC6                          1342  SUBSIZE32
00001EC6  6000 0552               1343          BRA     ENDNEWLINE
00001ECA                          1344  
00001ECA                          1345  *************************************************
00001ECA                          1346  *   100 byte    DN,EA
00001ECA                          1347  SUBSIZE4
00001ECA  6100 0168               1348          BSR     SUBPRINT
00001ECE  43F9 000024E3           1349          LEA     MBYTE,A1
00001ED4  103C 000E               1350          MOVE.B  #14,D0
00001ED8  4E4F                    1351          TRAP    #15
00001EDA  43F9 000024C5           1352          LEA     TAB,A1
00001EE0  103C 000E               1353          MOVE.B  #14,D0
00001EE4  4E4F                    1354          TRAP    #15
00001EE6                          1355  
00001EE6  6100 01A2               1356          BSR     SUBERRORTEST1
00001EEA                          1357  
00001EEA  45F9 00001EF4           1358          LEA     SUBSIZE41,A2
00001EF0  6000 01DA               1359          BRA     SUBDN
00001EF4                          1360  SUBSIZE41
00001EF4  45F9 00001F0A           1361          LEA     SUBSIZE42,A2
00001EFA  43F9 000024C9           1362          LEA     COMMA,A1
00001F00  103C 000E               1363          MOVE.B  #14,D0
00001F04  4E4F                    1364          TRAP    #15
00001F06  6000 02E8               1365          BRA     SUBEA
00001F0A                          1366  SUBSIZE42
00001F0A  6000 050E               1367          BRA     ENDNEWLINE
00001F0E                          1368  
00001F0E                          1369  *************************************************
00001F0E                          1370  *   101 word    DN,EA
00001F0E                          1371  SUBSIZE5
00001F0E  6100 017A               1372          BSR     SUBERRORTEST1               * This does error testing
00001F12  6100 0120               1373          BSR     SUBPRINT                    * Prints out 'SUB.'
00001F16  43F9 000024E6           1374          LEA     MWORD,A1
00001F1C  103C 000E               1375          MOVE.B  #14,D0
00001F20  4E4F                    1376          TRAP    #15
00001F22  43F9 000024C5           1377          LEA     TAB,A1
00001F28  103C 000E               1378          MOVE.B  #14,D0
00001F2C  4E4F                    1379          TRAP    #15
00001F2E                          1380  
00001F2E  45F9 00001F38           1381          LEA     SUBSIZE51,A2
00001F34  6000 0196               1382          BRA     SUBDN
00001F38                          1383  SUBSIZE51
00001F38  45F9 00001F4E           1384          LEA     SUBSIZE52,A2
00001F3E  43F9 000024C9           1385          LEA     COMMA,A1
00001F44  103C 000E               1386          MOVE.B  #14,D0
00001F48  4E4F                    1387          TRAP    #15
00001F4A  6000 02A4               1388          BRA     SUBEA
00001F4E                          1389  SUBSIZE52
00001F4E  6000 04CA               1390          BRA     ENDNEWLINE
00001F52                          1391  
00001F52                          1392  *************************************************
00001F52                          1393  *   110 long    DN,EA
00001F52                          1394  SUBSIZE6
00001F52  6100 0136               1395          BSR     SUBERRORTEST1               * This does error testing
00001F56  6100 00DC               1396          BSR     SUBPRINT                    * Prints out 'SUB.'
00001F5A  43F9 000024E9           1397          LEA     MLONG,A1
00001F60  103C 000E               1398          MOVE.B  #14,D0
00001F64  4E4F                    1399          TRAP    #15
00001F66  43F9 000024C5           1400          LEA     TAB,A1
00001F6C  103C 000E               1401          MOVE.B  #14,D0
00001F70  4E4F                    1402          TRAP    #15
00001F72                          1403  
00001F72  6100 0116               1404          BSR     SUBERRORTEST1
00001F76                          1405  
00001F76  45F9 00001F80           1406          LEA     SUBSIZE61,A2
00001F7C  6000 014E               1407          BRA     SUBDN
00001F80                          1408  SUBSIZE61
00001F80  45F9 00001F96           1409          LEA     SUBSIZE62,A2
00001F86  43F9 000024C9           1410          LEA     COMMA,A1
00001F8C  103C 000E               1411          MOVE.B  #14,D0
00001F90  4E4F                    1412          TRAP    #15
00001F92  6000 025C               1413          BRA     SUBEA
00001F96                          1414  SUBSIZE62
00001F96  6000 0482               1415          BRA     ENDNEWLINE
00001F9A                          1416  
00001F9A                          1417  ****************************************************************************
00001F9A                          1418  *   This section is for SUBA
00001F9A                          1419  *   Displays 'SUBA.' then decodes the op-code as SUBA
00001F9A                          1420  SUBA
00001F9A  43F9 0000253C           1421          LEA     MSUBA,A1                    Displays 'SUBA.'
00001FA0  103C 000E               1422          MOVE.B  #14,D0
00001FA4  4E4F                    1423          TRAP    #15
00001FA6                          1424          
00001FA6                          1425          * Does the rest of SUBA
00001FA6  0C39 0003 00002590      1426          CMP.B   #$3,bit2
00001FAE  6700 000E               1427          BEQ     SUBSIZE7
00001FB2  0C39 0007 00002590      1428          CMP.B   #$7,bit2
00001FBA  6700 003E               1429          BEQ     SUBSIZE8
00001FBE                          1430  
00001FBE                          1431  *************************************************
00001FBE                          1432  *   SUBA Word   ea,An
00001FBE                          1433  SUBSIZE7
00001FBE  43F9 000024E6           1434          LEA     MWORD,A1
00001FC4  103C 000E               1435          MOVE.B  #14,D0
00001FC8  4E4F                    1436          TRAP    #15
00001FCA  43F9 000024C5           1437          LEA     TAB,A1
00001FD0  103C 000E               1438          MOVE.B  #14,D0
00001FD4  4E4F                    1439          TRAP    #15
00001FD6                          1440  
00001FD6  45F9 00001FE0           1441          LEA     SUBSIZE71,A2
00001FDC  6000 0212               1442          BRA     SUBEA
00001FE0                          1443  SUBSIZE71
00001FE0  45F9 00001FF6           1444          LEA     SUBSIZE72,A2
00001FE6  43F9 000024C9           1445          LEA     COMMA,A1
00001FEC  103C 000E               1446          MOVE.B  #14,D0
00001FF0  4E4F                    1447          TRAP    #15
00001FF2  6000 012C               1448          BRA     SUBAN2
00001FF6                          1449  SUBSIZE72
00001FF6  6000 0422               1450          BRA     ENDNEWLINE
00001FFA                          1451  
00001FFA                          1452  *************************************************
00001FFA                          1453  *   SUBA longword   ea,An
00001FFA                          1454  SUBSIZE8
00001FFA  43F9 000024E9           1455          LEA     MLONG,A1
00002000  103C 000E               1456          MOVE.B  #14,D0
00002004  4E4F                    1457          TRAP    #15
00002006  43F9 000024C5           1458          LEA     TAB,A1
0000200C  103C 000E               1459          MOVE.B  #14,D0
00002010  4E4F                    1460          TRAP    #15
00002012                          1461  
00002012  45F8 1FE0               1462          LEA     SUBSIZE71,A2
00002016  6000 01D8               1463          BRA     SUBEA
0000201A                          1464  SUBSIZE81
0000201A  45F8 1FF6               1465          LEA     SUBSIZE72,A2
0000201E  43F9 000024C9           1466          LEA     COMMA,A1
00002024  103C 000E               1467          MOVE.B  #14,D0
00002028  4E4F                    1468          TRAP    #15
0000202A  6000 00F4               1469          BRA     SUBAN2
0000202E                          1470  SUBSIZE82
0000202E  6000 03EA               1471          BRA     ENDNEWLINE
00002032                          1472  
00002032                          1473  *************************************************
00002032                          1474  * Jumps to memory location at A2
00002032                          1475  SUBJMPA2
00002032  4ED2                    1476          JMP     (A2)
00002034                          1477  
00002034                          1478  *************************************************
00002034                          1479  * Prints out opcode name
00002034                          1480  SUBPRINT
00002034  0C39 0009 0000258E      1481          CMP.B   #$9,bit0                Prints SUB
0000203C  6700 001A               1482          BEQ     SUBPRINTSUB
00002040  0C39 000C 0000258E      1483          CMP.B   #$C,bit0                Prints AND
00002048  6700 001E               1484          BEQ     SUBPRINTAND
0000204C  0C39 000D 0000258E      1485          CMP.B   #$D,bit0                Prints ADD
00002054  6700 0022               1486          BEQ     SUBPRINTADD
00002058                          1487  
00002058                          1488  
00002058                          1489  
00002058                          1490  SUBPRINTSUB   * Displays 'SUB.' 
00002058  43F9 00002537           1491          LEA     MSUB,A1
0000205E  103C 000E               1492          MOVE.B  #14,D0
00002062  4E4F                    1493          TRAP    #15
00002064  6000 0022               1494          BRA     SUBPRINTEND
00002068                          1495  
00002068                          1496  SUBPRINTAND   * Displays 'AND.' 
00002068  43F9 00002542           1497          LEA     MAND,A1
0000206E  103C 000E               1498          MOVE.B  #14,D0
00002072  4E4F                    1499          TRAP    #15
00002074  6000 0012               1500          BRA     SUBPRINTEND
00002078                          1501  
00002078                          1502  SUBPRINTADD   * Displays 'ADD.' 
00002078  43F9 00002547           1503          LEA     MADD,A1
0000207E  103C 000E               1504          MOVE.B  #14,D0
00002082  4E4F                    1505          TRAP    #15
00002084  6000 0002               1506          BRA     SUBPRINTEND
00002088                          1507  
00002088                          1508  
00002088                          1509  SUBPRINTEND
00002088  4E75                    1510          RTS
0000208A                          1511  
0000208A                          1512  
0000208A                          1513  *******************************************************************
0000208A                          1514  * Error testing for DN->EA operations
0000208A                          1515  *  Data register, address register, and immediate data cannot be destinations
0000208A                          1516  SUBERRORTEST1
0000208A                          1517          * test for DN or AN register, branches to invalid op code if true
0000208A  0C39 0000 00002591      1518          CMP.B   #0,bit3
00002092  6700 0314               1519          BEQ     INVOP
00002096  0C39 0001 00002591      1520          CMP.B   #1,bit3
0000209E  6700 0308               1521          BEQ     INVOP
000020A2                          1522          
000020A2                          1523          * check if destination is immediate data
000020A2  0C39 0007 00002591      1524          CMP.B   #7,bit3
000020AA  6600 001E               1525          BNE     SUBERRORTEST11
000020AE  0C39 0000 00002592      1526          CMP.B   #0,bit4
000020B6  6700 0012               1527          BEQ     SUBERRORTEST11
000020BA  0C39 0001 00002592      1528          CMP.B   #1,bit4
000020C2  6700 0006               1529          BEQ     SUBERRORTEST11
000020C6  6000 02E0               1530          BRA     INVOP
000020CA                          1531          
000020CA                          1532  SUBERRORTEST11
000020CA  4E75                    1533          RTS
000020CC                          1534  
000020CC                          1535  
000020CC                          1536  ******************************************************************************************************
000020CC                          1537  *   Displays data register
000020CC                          1538  SUBDN
000020CC  43F9 000024EC           1539          LEA     MDN,A1
000020D2  103C 000E               1540          MOVE.B  #14,D0
000020D6  4E4F                    1541          TRAP    #15
000020D8                          1542  
000020D8  1239 0000258F           1543          MOVE.B  bit1,D1
000020DE  103C 0003               1544          MOVE.B  #3,D0
000020E2  4E4F                    1545          TRAP    #15
000020E4                          1546          
000020E4  6000 FF4C               1547          BRA     SUBJMPA2
000020E8                          1548  
000020E8                          1549  *   Displays data register
000020E8                          1550  *   This is for Dn -> Dn cases. Source Dn uses bit4 as register instead of bit1
000020E8                          1551  SUBDN2
000020E8  43F9 000024EC           1552          LEA     MDN,A1
000020EE  103C 000E               1553          MOVE.B  #14,D0
000020F2  4E4F                    1554          TRAP    #15
000020F4                          1555  
000020F4  1239 00002592           1556          MOVE.B  bit4,D1
000020FA  103C 0003               1557          MOVE.B  #3,D0
000020FE  4E4F                    1558          TRAP    #15
00002100                          1559          
00002100  6000 FF30               1560          BRA     SUBJMPA2
00002104                          1561  
00002104                          1562  *   Displays address register
00002104                          1563  SUBAN
00002104  43F9 000024EE           1564          LEA     MAN,A1
0000210A  103C 000E               1565          MOVE.B  #14,D0
0000210E  4E4F                    1566          TRAP    #15
00002110                          1567  
00002110  1239 00002592           1568          MOVE.B  bit4,D1
00002116  103C 0003               1569          MOVE.B  #3,D0
0000211A  4E4F                    1570          TRAP    #15
0000211C                          1571          
0000211C  6000 FF14               1572          BRA     SUBJMPA2
00002120                          1573  
00002120                          1574  *   Displays address register
00002120                          1575  *   This is for SUBA, SUBA puts An into bit1
00002120                          1576  SUBAN2
00002120  43F9 000024EE           1577          LEA     MAN,A1
00002126  103C 000E               1578          MOVE.B  #14,D0
0000212A  4E4F                    1579          TRAP    #15
0000212C                          1580  
0000212C  1239 0000258F           1581          MOVE.B  bit1,D1
00002132  103C 0003               1582          MOVE.B  #3,D0
00002136  4E4F                    1583          TRAP    #15
00002138                          1584          
00002138  6000 FEF8               1585          BRA     SUBJMPA2
0000213C                          1586  
0000213C                          1587  
0000213C                          1588  *   Displays indirect address register
0000213C                          1589  SUBANID
0000213C  43F9 000024CB           1590          LEA     OPENBRA,A1
00002142  103C 000E               1591          MOVE.B  #14,D0
00002146  4E4F                    1592          TRAP    #15
00002148                          1593  
00002148  43F9 000024EE           1594          LEA     MAN,A1
0000214E  103C 000E               1595          MOVE.B  #14,D0
00002152  4E4F                    1596          TRAP    #15
00002154                          1597  
00002154  1239 00002592           1598          MOVE.B  bit4,D1
0000215A  103C 0003               1599          MOVE.B  #3,D0
0000215E  4E4F                    1600          TRAP    #15
00002160                          1601  
00002160  43F9 000024CD           1602          LEA     CLOSEBRA,A1
00002166  103C 000E               1603          MOVE.B  #14,D0
0000216A  4E4F                    1604          TRAP    #15
0000216C                          1605  
0000216C  6000 FEC4               1606          BRA     SUBJMPA2
00002170                          1607  
00002170                          1608  *   Displays indirect address register with post increment
00002170                          1609  SUBANIDPOS
00002170  43F9 000024CB           1610          LEA     OPENBRA,A1
00002176  103C 000E               1611          MOVE.B  #14,D0
0000217A  4E4F                    1612          TRAP    #15
0000217C                          1613  
0000217C  43F9 000024EE           1614          LEA     MAN,A1
00002182  103C 000E               1615          MOVE.B  #14,D0
00002186  4E4F                    1616          TRAP    #15
00002188                          1617  
00002188  1239 00002592           1618          MOVE.B  bit4,D1
0000218E  103C 0003               1619          MOVE.B  #3,D0
00002192  4E4F                    1620          TRAP    #15
00002194                          1621  
00002194  43F9 000024CD           1622          LEA     CLOSEBRA,A1
0000219A  103C 000E               1623          MOVE.B  #14,D0
0000219E  4E4F                    1624          TRAP    #15
000021A0                          1625  
000021A0  43F9 000024CF           1626          LEA     POS,A1
000021A6  103C 000E               1627          MOVE.B  #14,D0
000021AA  4E4F                    1628          TRAP    #15
000021AC                          1629  
000021AC  6000 FE84               1630          BRA     SUBJMPA2
000021B0                          1631  
000021B0                          1632  *   Displays indirect address register with pre decrement
000021B0                          1633  SUBANIDNEG
000021B0  43F9 000024D1           1634          LEA     NEG,A1
000021B6  103C 000E               1635          MOVE.B  #14,D0
000021BA  4E4F                    1636          TRAP    #15
000021BC                          1637  
000021BC  43F9 000024CB           1638          LEA     OPENBRA,A1
000021C2  103C 000E               1639          MOVE.B  #14,D0
000021C6  4E4F                    1640          TRAP    #15
000021C8                          1641  
000021C8  43F9 000024EE           1642          LEA     MAN,A1
000021CE  103C 000E               1643          MOVE.B  #14,D0
000021D2  4E4F                    1644          TRAP    #15
000021D4                          1645  
000021D4  1239 00002592           1646          MOVE.B  bit4,D1
000021DA  103C 0003               1647          MOVE.B  #3,D0
000021DE  4E4F                    1648          TRAP    #15
000021E0                          1649  
000021E0  43F9 000024CD           1650          LEA     CLOSEBRA,A1
000021E6  103C 000E               1651          MOVE.B  #14,D0
000021EA  4E4F                    1652          TRAP    #15
000021EC                          1653  
000021EC  6000 FE44               1654          BRA     SUBJMPA2
000021F0                          1655  
000021F0                          1656  
000021F0                          1657  
000021F0                          1658  
000021F0                          1659  ******************************************************************************************************
000021F0                          1660  * Displays the EA as hex numbers
000021F0                          1661  * 
000021F0                          1662  SUBEA
000021F0                          1663          *   This finds which mode to use
000021F0  0C39 0000 00002591      1664          CMP.B   #$0,bit3
000021F8  6700 FEEE               1665          BEQ     SUBDN2
000021FC  0C39 0001 00002591      1666          CMP.B   #$1,bit3                BYTE SIZED OPERATIONS ARE NOT ALLOWED FOR An
00002204  6700 FEFE               1667          BEQ     SUBAN
00002208  0C39 0002 00002591      1668          CMP.B   #$2,bit3
00002210  6700 FF2A               1669          BEQ     SUBANID
00002214  0C39 0003 00002591      1670          CMP.B   #$3,bit3
0000221C  6700 FF52               1671          BEQ     SUBANIDPOS
00002220  0C39 0004 00002591      1672          CMP.B   #$4,bit3
00002228  6786                    1673          BEQ     SUBANIDNEG
0000222A  0C39 0005 00002591      1674          CMP.B   #$5,bit3
00002232  6700 026A               1675          BEQ     ERROR
00002236  0C39 0006 00002591      1676          CMP.B   #$6,bit3
0000223E  6700 025E               1677          BEQ     ERROR
00002242  0C39 0007 00002591      1678          CMP.B   #$7,bit3
0000224A  6700 0002               1679          BEQ     SUBEAHEX
0000224E                          1680  
0000224E                          1681  SUBEAHEX
0000224E  0C39 0004 00002592      1682          CMP.B   #$4,bit4            Branches to immediate data section of bit4 is 4
00002256  6700 0086               1683          BEQ     SUBEAID
0000225A                          1684  SUBEAID2
0000225A                          1685          *   Else it will assume it is absolute addressing mode
0000225A  43F9 000024E1           1686          LEA     MHEX,A1
00002260  103C 000E               1687          MOVE.B  #14,D0
00002264  4E4F                    1688          TRAP    #15
00002266                          1689  
00002266  0C39 0000 00002592      1690          CMP.B   #$0,bit4
0000226E  6700 007E               1691          BEQ     SUBEAHEX1
00002272  0C39 0001 00002592      1692          CMP.B   #$1,bit4
0000227A  6700 007A               1693          BEQ     SUBEAHEX2
0000227E                          1694  
0000227E  0C39 0000 00002590      1695          CMP.B   #$0,bit2            * SUB byte displays as word
00002286  6700 0066               1696          BEQ     SUBEAHEX1
0000228A  0C39 0004 00002590      1697          CMP.B   #$4,bit2            * SUB byte displays as word
00002292  6700 005A               1698          BEQ     SUBEAHEX1
00002296  0C39 0001 00002590      1699          CMP.B   #$1,bit2            * SUB word
0000229E  6700 004E               1700          BEQ     SUBEAHEX1
000022A2  0C39 0005 00002590      1701          CMP.B   #$5,bit2            * SUB word
000022AA  6700 0042               1702          BEQ     SUBEAHEX1
000022AE  0C39 0003 00002590      1703          CMP.B   #$3,bit2            * SUBA word
000022B6  6700 0036               1704          BEQ     SUBEAHEX1
000022BA  0C39 0002 00002590      1705          CMP.B   #$2,bit2            * SUB longword
000022C2  6700 0032               1706          BEQ     SUBEAHEX2
000022C6  0C39 0006 00002590      1707          CMP.B   #$6,bit2            * SUB longword
000022CE  6700 0026               1708          BEQ     SUBEAHEX2
000022D2  0C39 0007 00002590      1709          CMP.B   #$7,bit2            * SUBA longword
000022DA  6700 001A               1710          BEQ     SUBEAHEX2
000022DE                          1711  
000022DE                          1712  SUBEAID
000022DE  43F9 000024D3           1713          LEA     HASH,A1
000022E4  103C 000E               1714          MOVE.B  #14,D0
000022E8  4E4F                    1715          TRAP    #15
000022EA  6000 FF6E               1716          BRA     SUBEAID2
000022EE                          1717  
000022EE                          1718  SUBEAHEX1  
000022EE                          1719          *absolute address word
000022EE  1E3C 0002               1720          MOVE.B  #2,D7
000022F2  6000 000A               1721          BRA     SUBEAHEX3
000022F6                          1722  
000022F6                          1723  SUBEAHEX2  *absolute address long
000022F6  1E3C 0004               1724          MOVE.B  #4,D7
000022FA  6000 0002               1725          BRA     SUBEAHEX3
000022FE                          1726  
000022FE                          1727  SUBEAHEX3
000022FE  BE3C 0000               1728          CMP.B   #0,D7               Compares current addr to ending addr
00002302  6700 FD2E               1729          BEQ     SUBJMPA2            Branches to done if they are equal
00002306                          1730  
00002306                          1731      
00002306  141E                    1732          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
00002308                          1733          
00002308  1602                    1734          MOVE.B  D2,D3               Copies data at D2 to D3
0000230A                          1735          *   this gets digit in 10's place
0000230A  E80B                    1736          LSR.B   #4,D3               Shifts right to get rid of 1's place
0000230C                          1737          *   this gets digit in 1's place
0000230C  E90A                    1738          LSL.B   #4,D2               Shifts left to get rid of 10's place
0000230E  E80A                    1739          LSR.B   #4,D2               Shifts back right into 1's place
00002310                          1740  
00002310                          1741          
00002310                          1742          *   D3 holds digit in 10's place
00002310                          1743          *   D2 holds digit in 1's place
00002310                          1744          
00002310  1203                    1745          MOVE.B  D3,D1               Displays digit in 10's place first
00002312                          1746  
00002312                          1747          *   converts digits 10+ into letters
00002312                          1748  
00002312  47F9 00002326           1749          LEA     SUBEAHEX4,A3        Place address of TENS into A3 to continue from there after conversion
00002318  B23C 0009               1750          CMP.B   #9,D1               Compares digit to 9
0000231C  6E00 010C               1751          BGT     CONV                Print out letter representation if greater than 9
00002320                          1752  
00002320  103C 0003               1753          MOVE.B  #3,D0               Displays digit if it is less than A
00002324  4E4F                    1754          TRAP    #15
00002326                          1755          
00002326                          1756  SUBEAHEX4    
00002326  1202                    1757          MOVE.B  D2,D1               Displays digit in 1's place second
00002328                          1758  
00002328                          1759          *   converts digits 10+ into letters
00002328  47F9 0000233C           1760          LEA     SUBEAHEX5,A3           Places address of NEXT into A3 to continue from there after conversion
0000232E  B23C 0009               1761          CMP.B   #9,D1               Compares digit to 9
00002332  6E00 00F6               1762          BGT     CONV                Print out letter representation if greater than 9
00002336                          1763          
00002336  103C 0003               1764          MOVE.B  #3,D0               Displays digit if it is less than A
0000233A  4E4F                    1765          TRAP    #15
0000233C                          1766          
0000233C                          1767  SUBEAHEX5         
0000233C                          1768  * Display counter -- creates new line every 8 bytes
0000233C                          1769          * D7 is used as counter
0000233C                          1770          
0000233C  5307                    1771          SUB.B   #1,D7                       
0000233E  60BE                    1772          BRA     SUBEAHEX3              Loops back to display next address
00002340                          1773  
00002340                          1774  ***   display EA ends here
00002340                          1775  
00002340                          1776  ******************************************************************************************************
00002340                          1777  * Displays the EA as hex numbers
00002340                          1778  * INPUT: Size of EA in D4; 1 = word, 2 = longword
00002340                          1779  * OUTPUT: Displays size of EA reading from A6
00002340                          1780  * Jumps to location stored in A2 when finished
00002340                          1781  DISPEA
00002340  43F9 000024E1           1782          LEA     MHEX,A1
00002346  103C 000E               1783          MOVE.B  #14,D0
0000234A  4E4F                    1784          TRAP    #15
0000234C                          1785  
0000234C  B83C 0002               1786          CMP.B   #$2,D4              Branches to longword display if size is 2
00002350  6700 000A               1787          BEQ     DISPEALONG          Else it will assume word length
00002354                          1788  
00002354                          1789  DISPEAWORD
00002354                          1790          *absolute address word
00002354  1E3C 0002               1791          MOVE.B  #2,D7
00002358  6000 000A               1792          BRA     DISPEA3
0000235C                          1793   
0000235C                          1794  DISPEALONG
0000235C                          1795          *absolute address long
0000235C  1E3C 0004               1796          MOVE.B  #4,D7
00002360  6000 0002               1797          BRA     DISPEA3
00002364                          1798  
00002364                          1799  DISPEA3
00002364  BE3C 0000               1800          CMP.B   #0,D7               Compares current addr to ending addr
00002368  6700 FCC8               1801          BEQ     SUBJMPA2            Branches to done if they are equal
0000236C                          1802  
0000236C                          1803      
0000236C  141E                    1804          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
0000236E                          1805          
0000236E  1602                    1806          MOVE.B  D2,D3               Copies data at D2 to D3
00002370                          1807          *   this gets digit in 10's place
00002370  E80B                    1808          LSR.B   #4,D3               Shifts right to get rid of 1's place
00002372                          1809          *   this gets digit in 1's place
00002372  E90A                    1810          LSL.B   #4,D2               Shifts left to get rid of 10's place
00002374  E80A                    1811          LSR.B   #4,D2               Shifts back right into 1's place
00002376                          1812  
00002376                          1813          
00002376                          1814          *   D3 holds digit in 10's place
00002376                          1815          *   D2 holds digit in 1's place
00002376                          1816          
00002376  1203                    1817          MOVE.B  D3,D1               Displays digit in 10's place first
00002378                          1818  
00002378                          1819          *   converts digits 10+ into letters
00002378                          1820  
00002378  47F9 0000238C           1821          LEA     DISPEA4,A3        Place address of TENS into A3 to continue from there after conversion
0000237E  B23C 0009               1822          CMP.B   #9,D1               Compares digit to 9
00002382  6E00 00A6               1823          BGT     CONV                Print out letter representation if greater than 9
00002386                          1824  
00002386  103C 0003               1825          MOVE.B  #3,D0               Displays digit if it is less than A
0000238A  4E4F                    1826          TRAP    #15
0000238C                          1827    
0000238C                          1828  DISPEA4
0000238C  1202                    1829          MOVE.B  D2,D1               Displays digit in 1's place second
0000238E                          1830  
0000238E                          1831          *   converts digits 10+ into letters
0000238E  47F9 000023A2           1832          LEA     DISPEA5,A3           Places address of NEXT into A3 to continue from there after conversion
00002394  B23C 0009               1833          CMP.B   #9,D1               Compares digit to 9
00002398  6E00 0090               1834          BGT     CONV                Print out letter representation if greater than 9
0000239C                          1835          
0000239C  103C 0003               1836          MOVE.B  #3,D0               Displays digit if it is less than A
000023A0  4E4F                    1837          TRAP    #15
000023A2                          1838        
000023A2                          1839  DISPEA5
000023A2                          1840  * Display counter -- creates new line every 8 bytes
000023A2                          1841          * D7 is used as counter
000023A2                          1842          
000023A2  5307                    1843          SUB.B   #1,D7                       
000023A4  60BE                    1844          BRA     DISPEA3              Loops back to display next address
000023A6                          1845  
000023A6                          1846  ***   display EA ends here
000023A6                          1847  
000023A6                          1848  
000023A6                          1849  ********************************************************************
000023A6                          1850  * Invalid op-code handling
000023A6                          1851  * Displays DATA YYYY
000023A6                          1852  *  YYYY represents the op-code that failed
000023A6                          1853  INVOPCODE
000023A6  DE1E                    1854          ADD.B   (A6)+,D7
000023A8                          1855  
000023A8                          1856  INVOP
000023A8  43F9 00002532           1857          LEA     MDATA,A1
000023AE  103C 000E               1858          MOVE.B  #14,D0
000023B2  4E4F                    1859          TRAP    #15
000023B4  43F9 000024C5           1860          LEA     TAB,A1
000023BA  103C 000E               1861          MOVE.B  #14,D0
000023BE  4E4F                    1862          TRAP    #15
000023C0  43F9 000024E1           1863          LEA     MHEX,A1
000023C6  103C 000E               1864          MOVE.B  #14,D0
000023CA  4E4F                    1865          TRAP    #15
000023CC                          1866          
000023CC  1C3C 0002               1867          MOVE.B  #2,D6               D6 is a counter, used to know loop back once
000023D0                          1868          
000023D0  3407                    1869          MOVE.W  D7,D2               Copies opcode saved in D2 to D7
000023D2  E04A                    1870          LSR.W   #8,D2               Shifts D2 right 8 spaces to get the first byte of the word
000023D4  6000 0004               1871          BRA     INVOP2              Skips the second part to do later
000023D8                          1872  
000023D8                          1873  INVOP1
000023D8  1407                    1874          MOVE.B  D7,D2
000023DA                          1875  INVOP2
000023DA  1602                    1876          MOVE.B  D2,D3               Copies data at D2 to D3
000023DC                          1877          *   this gets digit in 10's place
000023DC  E80B                    1878          LSR.B   #4,D3               Shifts right to get rid of 1's place
000023DE                          1879          *   this gets digit in 1's place
000023DE  E90A                    1880          LSL.B   #4,D2               Shifts left to get rid of 10's place
000023E0  E80A                    1881          LSR.B   #4,D2               Shifts back right into 1's place
000023E2                          1882  
000023E2                          1883          
000023E2                          1884          *   D3 holds digit in 10's place
000023E2                          1885          *   D2 holds digit in 1's place
000023E2                          1886          
000023E2  1203                    1887          MOVE.B  D3,D1               Displays digit in 10's place first
000023E4                          1888  
000023E4                          1889          *   converts digits 10+ into letters
000023E4                          1890  
000023E4  47F9 000023F8           1891          LEA     INVOP3,A3        Place address of TENS into A3 to continue from there after conversion
000023EA  B23C 0009               1892          CMP.B   #9,D1               Compares digit to 9
000023EE  6E00 003A               1893          BGT     CONV                Print out letter representation if greater than 9
000023F2                          1894  
000023F2  103C 0003               1895          MOVE.B  #3,D0               Displays digit if it is less than A
000023F6  4E4F                    1896          TRAP    #15
000023F8                          1897          
000023F8                          1898  INVOP3   
000023F8  1202                    1899          MOVE.B  D2,D1               Displays digit in 1's place second
000023FA                          1900  
000023FA                          1901          *   converts digits 10+ into letters
000023FA  47F9 0000240E           1902          LEA     INVOP4,A3           Places address of NEXT into A3 to continue from there after conversion
00002400  B23C 0009               1903          CMP.B   #9,D1               Compares digit to 9
00002404  6E00 0024               1904          BGT     CONV                Print out letter representation if greater than 9
00002408                          1905          
00002408  103C 0003               1906          MOVE.B  #3,D0               Displays digit if it is less than A
0000240C  4E4F                    1907          TRAP    #15
0000240E                          1908          
0000240E                          1909  INVOP4
0000240E                          1910  * Display counter -- creates new line every 8 bytes
0000240E                          1911          * D6 is used as counter
0000240E                          1912          
0000240E  5306                    1913          SUB.B   #1,D6
00002410  BC3C 0000               1914          CMP.B   #0,D6
00002414  6700 0004               1915          BEQ     ENDNEWLINE
00002418  60BE                    1916          BRA     INVOP1              Loops back to display next address
0000241A                          1917  
0000241A                          1918  
0000241A                          1919  ******************************************************************************************************
0000241A                          1920  * Creates a new line after an op-code is displayed, loops back to start to display next code
0000241A                          1921  ENDNEWLINE
0000241A  43F9 000024C2           1922          LEA     NEWLINE,A1
00002420  103C 000E               1923          MOVE.B  #14,D0
00002424  4E4F                    1924          TRAP    #15
00002426  6000 EBE4               1925          BRA     NEWADDR
0000242A                          1926  
0000242A                          1927  ******************************************************************************************************
0000242A                          1928  * Converts decimal number into hex and displays it
0000242A                          1929  *   converts number 10-15 to A-F
0000242A                          1930  *   INPUT: decimal number in D1
0000242A                          1931  *   OUTPUT: HEX number to output
0000242A  B23C 000A               1932  CONV    CMP.B   #10,D1              Displays 10 as A
0000242E  6700 002A               1933          BEQ     HEXA
00002432  B23C 000B               1934          CMP.B   #11,D1              Displays 11 as B
00002436  6700 002C               1935          BEQ     HEXB
0000243A  B23C 000C               1936          CMP.B   #12,D1              Displays 12 as C
0000243E  6700 002E               1937          BEQ     HEXC
00002442  B23C 000D               1938          CMP.B   #13,D1              Displays 13 as D
00002446  6700 0030               1939          BEQ     HEXD
0000244A  B23C 000E               1940          CMP.B   #14,D1              Displays 14 as E
0000244E  6700 0032               1941          BEQ     HEXE
00002452  B23C 000F               1942          CMP.B   #15,D1              Displays 15 as F
00002456  6700 0034               1943          BEQ     HEXF
0000245A                          1944  
0000245A  43F9 000024D5           1945  HEXA    LEA     DISPA,A1            Loads A character
00002460  6000 0034               1946          BRA     PRINT
00002464                          1947    
00002464  43F9 000024D7           1948  HEXB    LEA     DISPB,A1            Loads B character
0000246A  6000 002A               1949          BRA     PRINT
0000246E                          1950  
0000246E  43F9 000024D9           1951  HEXC    LEA     DISPC,A1            Loads C character
00002474  6000 0020               1952          BRA     PRINT
00002478                          1953  
00002478  43F9 000024DB           1954  HEXD    LEA     DISPD,A1            Loads D character
0000247E  6000 0016               1955          BRA     PRINT
00002482                          1956  
00002482  43F9 000024DD           1957  HEXE    LEA     DISPE,A1            Loads E character
00002488  6000 000C               1958          BRA     PRINT
0000248C                          1959  
0000248C  43F9 000024DF           1960  HEXF    LEA     DISPF,A1            Loads F character
00002492  6000 0002               1961          BRA     PRINT
00002496                          1962  
00002496  103C 000E               1963  PRINT   MOVE.B  #14,D0              Sets trap task to #14
0000249A  4E4F                    1964          TRAP    #15                 Prints out message in A1
0000249C  4ED3                    1965          JMP     (A3)
0000249E                          1966  
0000249E  43F9 0000255C           1967  ERROR   LEA     MERROR,A1
000024A4  103C 000E               1968          MOVE.B  #14,D0
000024A8  4E4F                    1969          TRAP    #15
000024AA  6000 000E               1970          BRA     EXIT
000024AE                          1971  
000024AE  43F9 00002573           1972  DONE    LEA     MDONE,A1
000024B4  103C 000E               1973          MOVE.B  #14,D0
000024B8  4E4F                    1974          TRAP    #15
000024BA                          1975  
000024BA  103C 0009               1976  EXIT    MOVE.B  #9,D0
000024BE  4E4F                    1977          TRAP    #15
000024C0                          1978  
000024C0                          1979  ************************************ Output stuff **************************************
000024C0                          1980  * Stuff for output
000024C0                          1981  
000024C0  =0000000D               1982  CR      EQU     $0D
000024C0  =0000000A               1983  LF      EQU     $0A
000024C0                          1984  
000024C0= 20 00                   1985  SPACE       DC.B    ' ',0
000024C2= 0D 0A 00                1986  NEWLINE     DC.B    '',CR,LF,0
000024C5= 20 20 20 00             1987  TAB         DC.B    '   ',0
000024C9= 2C 00                   1988  COMMA       DC.B    ',',0
000024CB= 28 00                   1989  OPENBRA     DC.B    '(',0
000024CD= 29 00                   1990  CLOSEBRA    DC.B    ')',0
000024CF= 2B 00                   1991  POS         DC.B    '+',0
000024D1= 2D 00                   1992  NEG         DC.B    '-',0
000024D3= 23 00                   1993  HASH        DC.B    '#',0
000024D5                          1994  
000024D5                          1995  
000024D5= 41 00                   1996  DISPA       DC.B    'A',0
000024D7= 42 00                   1997  DISPB       DC.B    'B',0
000024D9= 43 00                   1998  DISPC       DC.B    'C',0
000024DB= 44 00                   1999  DISPD       DC.B    'D',0
000024DD= 45 00                   2000  DISPE       DC.B    'E',0
000024DF= 46 00                   2001  DISPF       DC.B    'F',0
000024E1                          2002  
000024E1= 24 00                   2003  MHEX        DC.B    '$',0
000024E3= 42 20 00                2004  MBYTE       DC.B    'B ',0
000024E6= 57 20 00                2005  MWORD       DC.B    'W ',0
000024E9= 4C 20 00                2006  MLONG       DC.B    'L ',0
000024EC= 44 00                   2007  MDN         DC.B    'D',0
000024EE= 41 00                   2008  MAN         DC.B    'A',0
000024F0                          2009  
000024F0= 4C 53 4C 2E 00          2010  MLSL        DC.B    'LSL.',0
000024F5= 4C 53 52 2E 00          2011  MLSR        DC.B    'LSR.',0
000024FA= 4E 45 47 2E 00          2012  MMNEGW      DC.B    'NEG.',0
000024FF= 44 49 56 53 2E 57 00    2013  MMDIVSW     DC.B    'DIVS.W',0
00002506= 4D 55 4C 53 2E 57 00    2014  MMULSW      DC.B    'MULS.W',0
0000250D= 4D 4F 56 45 2E 42 00    2015  MMOVEB      DC.B    'MOVE.B',0
00002514= 4D 4F 56 45 2E 57 00    2016  MMOVEW      DC.B    'MOVE.W',0
0000251B= 4D 4F 56 45 2E 4C 00    2017  MMOVEL      DC.B    'MOVE.L',0
00002522= 4D 4F 56 45 41 2E ...   2018  MMOVEAW     DC.B    'MOVEA.W',0
0000252A= 4D 4F 56 45 41 2E ...   2019  MMOVEAL     DC.B    'MOVEA.L',0
00002532= 44 41 54 41 00          2020  MDATA       DC.B    'DATA',0
00002537= 53 55 42 2E 00          2021  MSUB        DC.B    'SUB.',0
0000253C= 53 55 42 41 2E 00       2022  MSUBA       DC.B    'SUBA.',0
00002542= 41 4E 44 2E 00          2023  MAND        DC.B    'AND.',0
00002547= 41 44 44 2E 00          2024  MADD        DC.B    'ADD.',0
0000254C= 53 55 42 49 2E 00       2025  MSUBI       DC.B    'SUBI.',0
00002552= 4F 52 49 2E 00          2026  MORI        DC.B    'ORI.',0
00002557= 4E 4F 54 2E 00          2027  MNOT        DC.B    'NOT.',0
0000255C                          2028  
0000255C= 45 52 52 4F 52 3A ...   2029  MERROR      DC.B    'ERROR: Something broke',0
00002573= 43 4F 4D 50 4C 45 ...   2030  MDONE       DC.B    'COMPLETE: IT DID NOT CRASH',0
0000258E                          2031  
0000258E                          2032  
0000258E                          2033  ********************************** MEMORY STORAGE **********************************************
0000258E                          2034  * Stores memory locations at the end of the program
0000258E                          2035  * How DS works: Give it a variable name.
0000258E                          2036  *   DS means Define Storage. Give it a size of how big you want the storage to be (Byte, Word, Longword)
0000258E                          2037  *   Last is the number of storage you want. 
0000258E                          2038  *   Example: DS.W   1   This creates a 1 longword location to be used. Memory would look like: FF FF
0000258E                          2039  *            DS.B   3   This creates three byte-sized locations to be used. Memory would look like: FF FF FF
0000258E                          2040  *            
0000258E                          2041  
0000258E                          2042  bit0        DS.B    1           SEE NOTE UP TOP
0000258F                          2043  bit1        DS.B    1           SEE NOTE UP TOP
00002590                          2044  bit2        DS.B    1           SEE NOTE UP TOP
00002591                          2045  bit3        DS.B    1           SEE NOTE UP TOP
00002592                          2046  bit4        DS.B    1           SEE NOTE UP TOP
00002593                          2047  
00002593                          2048  
00002593                          2049      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDIMD              1370
ADDIMD0             1394
ADDIMD1             1394
ADDIMD3             1394
ADDR1               7000
ADDR2               725A
BIT0                258E
BIT1                258F
BIT2                2590
BIT3                2591
BIT4                2592
CLOSEBRA            24CD
CODE                10D8
COMMA               24C9
CONV                242A
CR                  D
DISPA               24D5
DISPADDR1           1024
DISPADDR2           1026
DISPADDR3           105A
DISPADDR4           1070
DISPADDR5           1086
DISPADDR6           109C
DISPB               24D7
DISPC               24D9
DISPD               24DB
DISPE               24DD
DISPEA              2340
DISPEA3             2364
DISPEA4             238C
DISPEA5             23A2
DISPEALONG          235C
DISPEAWORD          2354
DISPF               24DF
DIVSW               1832
DONE                24AE
ENDNEWLINE          241A
ENDNLINC            17A0
ERROR               249E
EXIT                24BA
HASH                24D3
HEXA                245A
HEXB                2464
HEXC                246E
HEXD                2478
HEXE                2482
HEXF                248C
IMD                 1B7A
IMD2                1B94
IMD3                1B9C
IMD4                1BA8
IMDBYTE             1C2C
IMDEA               1C54
IMDEA2              1C70
IMDEA3              1C86
IMDLONG             1C4A
IMDPRINT            1BE2
IMDPRINTEND         1C24
IMDPRINTNOT         1C1A
IMDPRINTORI         1C06
IMDPRINTSUBI        1C10
IMDWORD             1C3C
INVOP               23A8
INVOP1              23D8
INVOP2              23DA
INVOP3              23F8
INVOP4              240E
INVOPCODE           23A6
LF                  A
LSLR                1A16
LSLRDESD            1678
LSLRSRCD            1650
MADD                2547
MAN                 24EE
MAND                2542
MBYTE               24E3
MDATA               2532
MDN                 24EC
MDONE               2573
MERROR              255C
MHEX                24E1
MISC                1C8A
MISC2               1CAC
MISC3               1CB4
MISC4               1CC0
MISCBYTE            1D06
MISCEA              1D34
MISCEA2             1D50
MISCLONG            1D28
MISCNOT             1CE2
MISCWORD            1D18
MLONG               24E9
MLSL                24F0
MLSR                24F5
MMDIVSW             24FF
MMNEGW              24FA
MMOVEAL             252A
MMOVEAW             2522
MMOVEB              250D
MMOVEL              251B
MMOVEW              2514
MMULSW              2506
MNOT                2557
MORI                2552
MOVB                12F0
MOVBDN1             15C4
MOVBDN2             1778
MOVEAL              129C
MOVEAN1             1394
MOVEAN2             1698
MOVEAW              11BC
MOVEIAN1            1408
MOVEIAND1           152C
MOVEIANI1           1494
MOVIAN2             16B8
MOVIAND2            1734
MOVIANI2            16F0
MOVL                1210
MOVW                112C
MSUB                2537
MSUBA               253C
MSUBI               254C
MULSW               17A8
MWORD               24E6
NEG                 24D1
NEGW                18C0
NEWADDR             100C
NEWLINE             24C2
OPENBRA             24CB
POS                 24CF
PRINT               2496
PRINTB              1A9E
PRINTBYTE           191A
PRINTL              1AEE
PRINTLONG           19C2
PRINTLSL            1A6E
PRINTLSLRCOUNT      1B16
PRINTLSR            1B4A
PRINTW              1AC6
PRINTWORD           196E
SPACE               24C0
START               1000
SUB                 1D54
SUB1                1D86
SUB2                1D68
SUB3                1D70
SUB4                1D7A
SUBA                1F9A
SUBAN               2104
SUBAN2              2120
SUBANID             213C
SUBANIDNEG          21B0
SUBANIDPOS          2170
SUBDN               20CC
SUBDN2              20E8
SUBEA               21F0
SUBEAHEX            224E
SUBEAHEX1           22EE
SUBEAHEX2           22F6
SUBEAHEX3           22FE
SUBEAHEX4           2326
SUBEAHEX5           233C
SUBEAID             22DE
SUBEAID2            225A
SUBERRORTEST1       208A
SUBERRORTEST11      20CA
SUBJMPA2            2032
SUBPRINT            2034
SUBPRINTADD         2078
SUBPRINTAND         2068
SUBPRINTEND         2088
SUBPRINTSUB         2058
SUBSIZE1            1E0A
SUBSIZE11           1E30
SUBSIZE12           1E46
SUBSIZE2            1E4A
SUBSIZE21           1E70
SUBSIZE22           1E86
SUBSIZE3            1E8A
SUBSIZE31           1EB0
SUBSIZE32           1EC6
SUBSIZE4            1ECA
SUBSIZE41           1EF4
SUBSIZE42           1F0A
SUBSIZE5            1F0E
SUBSIZE51           1F38
SUBSIZE52           1F4E
SUBSIZE6            1F52
SUBSIZE61           1F80
SUBSIZE62           1F96
SUBSIZE7            1FBE
SUBSIZE71           1FE0
SUBSIZE72           1FF6
SUBSIZE8            1FFA
SUBSIZE81           201A
SUBSIZE82           202E
TAB                 24C5
