00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/30/2015 3:03:56 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Team A (Phat, Felicia, Arthur)
00000000                             4  * Date       : Thanksgiving 2015 (We started earlier but I happen to be filling this in today)
00000000                             5  * Description: Converts assembly language written in hex to readable human code (CSS422 Project)
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00000000                             9  ********************************
00000000                            10  * INFO:
00000000                            11  * bit0-4 are used to store information about binary op-code split into it's split-up stage
00000000                            12  * They are stored at the end of the code. (You can find code for storage at the end, after all the messages.)
00000000                            13  *   bit0 - Store first hex of op code
00000000                            14  *   bit1 - Store first 'bit' of a split op code
00000000                            15  *   bit2 - Store second 'bit' of a split op code
00000000                            16  *   bit3 - Store third 'bit' of a split op code
00000000                            17  *   bit4 - Store fourth 'bit' of a split op code
00000000                            18  * 
00000000                            19  * 
00000000                            20  * 
00000000                            21  * COMPLETED WORK:
00000000                            22  * SUB
00000000                            23  * SUBA
00000000                            24  * AND
00000000                            25  * ADD   - NOT TESTED
00000000                            26  * SUBI
00000000                            27  * ORI   - EORI and CMPI uses the same logic as these two
00000000                            28  * NOT
00000000                            29  * Bcc
00000000                            30  * BRA   - NOT TESTED
00000000                            31  * 
00000000                            32  * Display buffer thingy
00000000                            33  *
00000000                            34  ****************************************************************************
00000000                            35  
00000000                            36  
00000000                            37  * sets start and end address
00000000                            38  * temp hard code
00000000                            39  * make UI later for input
00000000  =00007000                 40  addr1       EQU     $7000
00000000                            41  *addr2   EQU     $703C
00000000  =0000726C                 42  addr2       EQU     $726C
00000000  =0000001E                 43  dispnum     EQU     30          Number of lines output will display before asking to continue
00000000                            44  
00001000                            45      ORG    $1000
00001000                            46  START:                  ; first instruction of program
00001000                            47  
00001000                            48          
00001000                            49  
00001000                            50  
00001000                            51          *   this stores some test EA into memory
00001000                            52          *LEA     addr1,A1
00001000                            53          *MOVE.W  #$0440,(A1)+        *917C
00001000                            54          *MOVE.W  #$917C,(A1)+       
00001000                            55          *MOVE.L  #$5555A7FF,(A1)+
00001000                            56          *MOVE.W  #$9078,(A1)+
00001000                            57          *MOVE.W  #$5555,(A1)+
00001000                            58          
00001000                            59          *MOVE.L  #$0,A1             This clears the memory at A1, not sure why i didn't it but its probably important
00001000                            60          
00001000                            61          *MOVE.L  #$6700F0D8, $7000
00001000  21FC 4E71F0D8 7000        62          MOVE.L  #$4E71F0D8, $7000
00001008                            63          
00001008                            64  ******************************************** displays address location***********************************************
00001008                            65  * This displays the address location of the op-code being worked on
00001008                            66  * A6 is used as current address
00001008                            67  
00001008  2C7C 00007000             68          MOVEA.L #addr1,A6           Moves starting addr into A6 register
0000100E  13FC 001E 00002111        69          MOVE.B  #dispnum,dispcount  Sets display line counter
00001016                            70  
00001016                            71  NEWADDR
00001016  2E0E                      72          MOVE.L  A6,D7               Loads the current address into D7
00001018  BEBC 0000726C             73          CMP.L   #addr2,D7           Compares current address to end address
0000101E  6E00 100A                 74          BGT     DONE                Branches to done if current address > end address
00001022  45F9 000010B6             75          LEA     DISPADDREND,A2
00001028                            76  
00001028                            77  ************************************************
00001028                            78  * Displays address as HEX
00001028                            79  * INPUT: address stored into D7
00001028                            80  * OUTPUT: prints hex address to output window
00001028                            81  DISPADDRSTART
00001028  1C3C 0002                 82          MOVE.B  #2,D6               D6 is a counter, used for looping
0000102C  2407                      83          MOVE.L  D7,D2               Copies address saved in D7 to D2 to be manipulated
0000102E  4842                      84          SWAP    D2                  Swaps the location to be displayed (Display first word of a long word)
00001030  6000 0004                 85          BRA     DISPADDR2           Skips the second part to do later
00001034                            86  
00001034                            87  DISPADDR1
00001034  3407                      88          MOVE.W  D7,D2
00001036                            89  DISPADDR2
00001036  3202                      90          MOVE.W  D2,D1               D1 will be the first byte of the word
00001038  3602                      91          MOVE.W  D2,D3               D3 will be the second byte of the word
0000103A  3802                      92          MOVE.W  D2,D4               D4 will be the third byte of the word
0000103C  3A02                      93          MOVE.W  D2,D5               D5 will be the fourth byte of the word
0000103E                            94  
0000103E  E049                      95          LSR.W   #8,D1               Shifts D1 right 12 times to move the first byte of the word to the last byte
00001040  E849                      96          LSR.W   #4,D1
00001042  E94B                      97          LSL.W   #4,D3               Shifts D3 left 4 times to get rid of the first byte
00001044  E04B                      98          LSR.W   #8,D3                 Then shifts D3 right 12 times to move it to the last byte
00001046  E84B                      99          LSR.W   #4,D3
00001048  E14C                     100          LSL.W   #8,D4               Shifts D4 to the left 8 times to get rid of first 2 bytes
0000104A  E04C                     101          LSR.W   #8,D4                 Then shifts it right 12 times to move it to the last byte
0000104C  E84C                     102          LSR.W   #4,D4
0000104E  E14D                     103          LSL.W   #8,D5               Shifts D5 to the left 12 times to get rid of the first 3 bytes
00001050  E94D                     104          LSL.W   #4,D5                 Then shifts it back to the left 12 times to move it to the last byte position
00001052  E04D                     105          LSR.W   #8,D5
00001054  E84D                     106          LSR.W   #4,D5
00001056                           107          
00001056                           108          
00001056  47F9 0000106A            109          LEA     DISPADDR3,A3        Place address of TENS into A3 to continue from there after conversion
0000105C  B23C 0009                110          CMP.B   #9,D1               Compares digit to 9
00001060  6E00 0F44                111          BGT     CONV                Print out letter representation if greater than 9
00001064                           112  
00001064  103C 0003                113          MOVE.B  #3,D0               Displays digit if it is less than A
00001068  4E4F                     114          TRAP    #15
0000106A                           115          
0000106A                           116  DISPADDR3   
0000106A  1203                     117          MOVE.B  D3,D1               Displays digit in 1's place second
0000106C                           118  
0000106C                           119          *   converts digits 10+ into letters
0000106C  47F9 00001080            120          LEA     DISPADDR4,A3           Places address of NEXT into A3 to continue from there after conversion
00001072  B23C 0009                121          CMP.B   #9,D1               Compares digit to 9
00001076  6E00 0F2E                122          BGT     CONV                Print out letter representation if greater than 9
0000107A                           123          
0000107A  103C 0003                124          MOVE.B  #3,D0               Displays digit if it is less than A
0000107E  4E4F                     125          TRAP    #15
00001080                           126  
00001080                           127  DISPADDR4
00001080  1204                     128          MOVE.B  D4,D1               Displays digit in 1's place second
00001082                           129  
00001082                           130          *   converts digits 10+ into letters
00001082  47F9 00001096            131          LEA     DISPADDR5,A3           Places address of NEXT into A3 to continue from there after conversion
00001088  B23C 0009                132          CMP.B   #9,D1               Compares digit to 9
0000108C  6E00 0F18                133          BGT     CONV                Print out letter representation if greater than 9
00001090                           134          
00001090  103C 0003                135          MOVE.B  #3,D0               Displays digit if it is less than A
00001094  4E4F                     136          TRAP    #15
00001096                           137  
00001096                           138  DISPADDR5
00001096  1205                     139          MOVE.B  D5,D1               Displays digit in 1's place second
00001098                           140  
00001098                           141          *   converts digits 10+ into letters
00001098  47F9 000010AC            142          LEA     DISPADDR6,A3           Places address of NEXT into A3 to continue from there after conversion
0000109E  B23C 0009                143          CMP.B   #9,D1               Compares digit to 9
000010A2  6E00 0F02                144          BGT     CONV                Print out letter representation if greater than 9
000010A6                           145          
000010A6  103C 0003                146          MOVE.B  #3,D0               Displays digit if it is less than A
000010AA  4E4F                     147          TRAP    #15
000010AC                           148          
000010AC                           149  DISPADDR6
000010AC                           150  * Display counter -- creates new line every 8 bytes
000010AC                           151          * D6 is used as counter
000010AC                           152          
000010AC  5306                     153          SUB.B   #1,D6
000010AE  BC3C 0000                154          CMP.B   #0,D6
000010B2  6680                     155          BNE     DISPADDR1
000010B4                           156  
000010B4  4ED2                     157          JMP     (A2)                Jumps to address stored in A2 when complete
000010B6                           158  
000010B6                           159  DISPADDREND
000010B6  43F9 00002041            160          LEA     TAB,A1
000010BC  103C 000E                161          MOVE.B  #14,D0
000010C0  4E4F                     162          TRAP    #15
000010C2                           163          
000010C2                           164  *********************************************************************************************************************
000010C2                           165  * Splits the first byte of the op code into nibbles
000010C2                           166  * then sends it to the branch-table to jump to the appropiate section to be decoded
000010C2                           167  
000010C2  4281                     168          CLR.L   D1                  Clears the data registers
000010C4  4282                     169          CLR.L   D2
000010C6  4283                     170          CLR.L   D3
000010C8  4284                     171          CLR.L   D4
000010CA  4285                     172          CLR.L   D5
000010CC  4286                     173          CLR.L   D6
000010CE  3C16                     174          MOVE.W  (A6),D6
000010D0  141E                     175          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
000010D2                           176    
000010D2  1E02                     177          MOVE.B  D2,D7
000010D4  E14F                     178          LSL.W   #8,D7
000010D6                           179          
000010D6  1602                     180          MOVE.B  D2,D3               Copies data at D2 to D3
000010D8                           181          *   this gets digit in 10's place
000010D8  E80B                     182          LSR.B   #4,D3               Shifts right to get rid of 1's place
000010DA                           183          *   this gets digit in 1's place
000010DA  E90A                     184          LSL.B   #4,D2               Shifts left to get rid of 10's place
000010DC  E80A                     185          LSR.B   #4,D2               Shifts back right into 1's place
000010DE                           186          
000010DE                           187          *   D3 holds digit in 10's place
000010DE                           188          *   D2 holds digit in 1's place
000010DE                           189  
000010DE                           190          *   Moves second nibble to D5 to be used later
000010DE  1A02                     191          MOVE.B  D2,D5
000010E0  13C3 00002112            192          MOVE.B  D3,bit0
000010E6                           193          *   Goes to a branch-table to figure out which op code it is
000010E6  6000 0002                194          BRA     CODE
000010EA                           195  
000010EA                           196  ******************************************************************************************************
000010EA                           197  *   This is where the table goes to detirmine which op-code to use
000010EA                           198  CODE    
000010EA  B63C 0000                199          CMP.B   #$0,D3              Goes to immediate operation section
000010EE  6700 05BE                200          BEQ     IMD
000010F2  B63C 0004                201          CMP.B   #$4,D3              Goes to miscellaneous section
000010F6  6700 06C6                202          BEQ     MISC
000010FA  B63C 0006                203          CMP.B   #$6,D3
000010FE  6700 04FA                204          BEQ     BCC
00001102  B63C 0009                205          CMP.B   #$9,D3              Goes to sub section
00001106  6700 078E                206          BEQ     SUB
0000110A  B63C 000C                207          CMP.B   #$C,D3              Goes to sub but displays as AND
0000110E  6700 0786                208          BEQ     SUB
00001112  B63C 000D                209          CMP.B   #$D,D3              Goes to sub but displays as ADD
00001116  6700 077E                210          BEQ     SUB
0000111A  B63C 0001                211          CMP.B   #$1,D3
0000111E  6700 0116                212          BEQ     MOVB                Goes to movb
00001122  B63C 0003                213          CMP.B   #$3,D3
00001126  6700 000E                214          BEQ     MOVW                Goes to movb
0000112A  B63C 0002                215          CMP.B   #$2,D3
0000112E  6700 0086                216          BEQ     MOVL                Goes to movb
00001132                           217  
00001132  6000 0DB4                218          BRA     INVOPCODE
00001136                           219  
00001136                           220  MOVW
00001136  43F9 00002073            221          LEA MMOVEW, A1
0000113C  103C 000E                222          MOVE.B  #14, D0
00001140  4E4F                     223          TRAP    #15 
00001142                           224          
00001142  E20A                     225          LSR.B   #1, D2
00001144  13C2 00002113            226          MOVE.B  D2, bit1
0000114A                           227          
0000114A  1416                     228          MOVE.B  (A6), D2
0000114C  EB0A                     229          LSL.B   #5, D2
0000114E  EA0A                     230          LSR.B   #5, D2
00001150  13C2 00002116            231          MOVE.B  D2, bit4
00001156                           232          
00001156  1416                     233          MOVE.B  (A6), D2
00001158  E50A                     234          LSL.B   #2, D2
0000115A  EA0A                     235          LSR.B   #5, D2
0000115C  13C2 00002115            236          MOVE.B  D2, bit3
00001162                           237          
00001162  EF4E                     238          LSL.W   #7, D6
00001164  E04E                     239          LSR.W   #8, D6 
00001166  EA4E                     240          LSR.W   #5, D6 
00001168  13C6 00002114            241          MOVE.B  D6, bit2
0000116E                           242          
0000116E  0C39 0000 00002115       243          CMP.B   #$0, bit3           
00001176  6700 0342                244          BEQ     MOVBDN1
0000117A  0C39 0001 00002115       245          CMP.B   #$1, bit3
00001182  6700 0156                246          BEQ     MOVEAN1
00001186  0C39 0002 00002115       247          CMP.B   #$2, bit3
0000118E  6700 01AA                248          BEQ     MOVEIAN1
00001192  0C39 0003 00002115       249          CMP.B   #$3, bit3
0000119A  6700 0216                250          BEQ     MOVEIANI1
0000119E  0C39 0004 00002115       251          CMP.B   #$4, bit3
000011A6  6700 028E                252          BEQ     MOVEIAND1
000011AA  0C39 0007 00002115       253          CMP.B   #$7, bit3
000011B2  6700 0102                254          BEQ     ADDIMD
000011B6                           255  
000011B6                           256  
000011B6                           257  MOVL
000011B6  43F9 0000207A            258          LEA MMOVEL, A1
000011BC  103C 000E                259          MOVE.B  #14, D0
000011C0  4E4F                     260          TRAP    #15 
000011C2                           261          
000011C2  E20A                     262          LSR.B   #1, D2
000011C4  13C2 00002113            263          MOVE.B  D2, bit1
000011CA                           264          
000011CA  1416                     265          MOVE.B  (A6), D2
000011CC  EB0A                     266          LSL.B   #5, D2
000011CE  EA0A                     267          LSR.B   #5, D2
000011D0  13C2 00002116            268          MOVE.B  D2, bit4
000011D6                           269          
000011D6  1416                     270          MOVE.B  (A6), D2
000011D8  E50A                     271          LSL.B   #2, D2
000011DA  EA0A                     272          LSR.B   #5, D2
000011DC  13C2 00002115            273          MOVE.B  D2, bit3
000011E2                           274          
000011E2  EF4E                     275          LSL.W   #7, D6
000011E4  E04E                     276          LSR.W   #8, D6 
000011E6  EA4E                     277          LSR.W   #5, D6 
000011E8  13C6 00002114            278          MOVE.B  D6, bit2
000011EE                           279          
000011EE  0C39 0000 00002115       280          CMP.B   #$0, bit3           
000011F6  6700 02C2                281          BEQ     MOVBDN1
000011FA  0C39 0001 00002115       282          CMP.B   #$1, bit3
00001202  6700 00D6                283          BEQ     MOVEAN1
00001206  0C39 0002 00002115       284          CMP.B   #$2, bit3
0000120E  6700 012A                285          BEQ     MOVEIAN1
00001212  0C39 0003 00002115       286          CMP.B   #$3, bit3
0000121A  6700 0196                287          BEQ     MOVEIANI1
0000121E  0C39 0004 00002115       288          CMP.B   #$4, bit3
00001226  6700 020E                289          BEQ     MOVEIAND1
0000122A  0C39 0007 00002115       290          CMP.B   #$7, bit3
00001232  6700 0082                291          BEQ     ADDIMD
00001236                           292  
00001236                           293  MOVB
00001236  43F9 0000206C            294          LEA MMOVEB, A1
0000123C  103C 000E                295          MOVE.B  #14, D0
00001240  4E4F                     296          TRAP    #15 
00001242                           297          
00001242  E20A                     298          LSR.B   #1, D2
00001244  13C2 00002113            299          MOVE.B  D2, bit1
0000124A                           300          
0000124A  1416                     301          MOVE.B  (A6), D2
0000124C  EB0A                     302          LSL.B   #5, D2
0000124E  EA0A                     303          LSR.B   #5, D2
00001250  13C2 00002116            304          MOVE.B  D2, bit4
00001256                           305          
00001256  1416                     306          MOVE.B  (A6), D2
00001258  E50A                     307          LSL.B   #2, D2
0000125A  EA0A                     308          LSR.B   #5, D2
0000125C  13C2 00002115            309          MOVE.B  D2, bit3
00001262                           310          
00001262  EF4E                     311          LSL.W   #7, D6
00001264  E04E                     312          LSR.W   #8, D6 
00001266  EA4E                     313          LSR.W   #5, D6 
00001268  13C6 00002114            314          MOVE.B  D6, bit2
0000126E                           315          
0000126E  0C39 0000 00002115       316          CMP.B   #$0, bit3           
00001276  6700 0242                317          BEQ     MOVBDN1
0000127A  0C39 0001 00002115       318          CMP.B   #$1, bit3
00001282  6700 0056                319          BEQ     MOVEAN1
00001286  0C39 0002 00002115       320          CMP.B   #$2, bit3
0000128E  6700 00AA                321          BEQ     MOVEIAN1
00001292  0C39 0003 00002115       322          CMP.B   #$3, bit3
0000129A  6700 0116                323          BEQ     MOVEIANI1
0000129E  0C39 0004 00002115       324          CMP.B   #$4, bit3
000012A6  6700 018E                325          BEQ     MOVEIAND1
000012AA  0C39 0007 00002115       326          CMP.B   #$7, bit3
000012B2  6700 0002                327          BEQ     ADDIMD
000012B6                           328  
000012B6                           329  ADDIMD
000012B6  0C39 0000 00002116       330      CMP.B   #$0, bit4
000012BE  6700 001A                331      BEQ     ADDIMD0
000012C2  0C39 0001 00002116       332      CMP.B   #$1, bit4
000012CA  6700 000E                333      BEQ     ADDIMD1
000012CE  0C39 0003 00002116       334      CMP.B   #$3, bit4
000012D6  6700 0002                335      BEQ     ADDIMD3
000012DA                           336  
000012DA                           337  ADDIMD0
000012DA                           338      * TODO 
000012DA                           339  ADDIMD1 
000012DA                           340      * TODO
000012DA                           341  ADDIMD3
000012DA                           342      * TODO    
000012DA                           343  MOVEAN1
000012DA  43F9 00002041            344      LEA TAB, A1
000012E0  103C 000E                345      MOVE.B  #14,D0
000012E4  4E4F                     346      TRAP    #15
000012E6                           347  
000012E6  43F9 00002051            348      LEA DISPA,A1
000012EC  103C 000E                349      MOVE.B  #14,D0
000012F0  4E4F                     350      TRAP    #15
000012F2                           351      
000012F2  1239 00002116            352      MOVE.B  bit4, D1
000012F8  103C 0003                353      MOVE.B  #3, D0
000012FC  4E4F                     354      TRAP    #15
000012FE                           355      
000012FE  43F9 00002045            356      LEA COMMA, A1
00001304  103C 000E                357      MOVE.B  #14,D0
00001308  4E4F                     358      TRAP    #15
0000130A                           359      
0000130A  0C39 0000 00002114       360      CMP.B   #$0,bit2
00001312  6700 02C6                361      BEQ     MOVBDN2
00001316  0C39 0002 00002114       362      CMP.B   #$2, bit2 
0000131E  6700 01FA                363      BEQ     MOVIAN2
00001322  0C39 0003 00002114       364      CMP.B   #$3, bit2 
0000132A  6700 0226                365      BEQ     MOVIANI2
0000132E  0C39 0004 00002114       366      CMP.B   #$4, bit2 
00001336  6700 025E                367      BEQ     MOVIAND2
0000133A                           368      
0000133A                           369  MOVEIAN1
0000133A  43F9 00002041            370      LEA TAB, A1
00001340  103C 000E                371      MOVE.B  #14,D0
00001344  4E4F                     372      TRAP    #15
00001346                           373      
00001346  43F9 00002047            374      LEA OPENBRA, A1
0000134C  103C 000E                375      MOVE.B  #14,D0
00001350  4E4F                     376      TRAP    #15
00001352                           377  
00001352  43F9 00002051            378      LEA DISPA,A1
00001358  103C 000E                379      MOVE.B  #14,D0
0000135C  4E4F                     380      TRAP    #15
0000135E                           381      
0000135E  1239 00002116            382      MOVE.B  bit4, D1
00001364  103C 0003                383      MOVE.B  #3, D0
00001368  4E4F                     384      TRAP    #15
0000136A                           385      
0000136A  43F9 00002049            386      LEA CLOSEBRA, A1
00001370  103C 000E                387      MOVE.B  #14,D0
00001374  4E4F                     388      TRAP    #15
00001376                           389      
00001376  43F9 00002045            390      LEA COMMA, A1
0000137C  103C 000E                391      MOVE.B  #14,D0
00001380  4E4F                     392      TRAP    #15
00001382                           393      
00001382  0C39 0000 00002114       394      CMP.B   #$0,bit2
0000138A  6700 024E                395      BEQ     MOVBDN2
0000138E  0C39 0002 00002114       396      CMP.B   #$2, bit2 
00001396  6700 0182                397      BEQ     MOVIAN2
0000139A  0C39 0003 00002114       398      CMP.B   #$3, bit2 
000013A2  6700 01AE                399      BEQ     MOVIANI2
000013A6  0C39 0004 00002114       400      CMP.B   #$4, bit2 
000013AE  6700 01E6                401      BEQ     MOVIAND2
000013B2                           402  
000013B2                           403  MOVEIANI1
000013B2  43F9 00002041            404      LEA TAB, A1
000013B8  103C 000E                405      MOVE.B  #14,D0
000013BC  4E4F                     406      TRAP    #15
000013BE                           407      
000013BE  43F9 00002047            408      LEA OPENBRA, A1
000013C4  103C 000E                409      MOVE.B  #14,D0
000013C8  4E4F                     410      TRAP    #15
000013CA                           411  
000013CA  43F9 00002051            412      LEA DISPA,A1
000013D0  103C 000E                413      MOVE.B  #14,D0
000013D4  4E4F                     414      TRAP    #15
000013D6                           415      
000013D6  1239 00002116            416      MOVE.B  bit4, D1
000013DC  103C 0003                417      MOVE.B  #3, D0
000013E0  4E4F                     418      TRAP    #15
000013E2                           419      
000013E2  43F9 00002049            420      LEA CLOSEBRA, A1
000013E8  103C 000E                421      MOVE.B  #14,D0
000013EC  4E4F                     422      TRAP    #15
000013EE                           423      
000013EE  43F9 0000204B            424      LEA POS, A1
000013F4  103C 000E                425      MOVE.B  #14,D0
000013F8  4E4F                     426      TRAP    #15
000013FA                           427      
000013FA  43F9 00002045            428      LEA COMMA, A1
00001400  103C 000E                429      MOVE.B  #14,D0
00001404  4E4F                     430      TRAP    #15
00001406                           431      
00001406  0C39 0000 00002114       432      CMP.B   #$0,bit2
0000140E  6700 01CA                433      BEQ     MOVBDN2
00001412  0C39 0002 00002114       434      CMP.B   #$2, bit2 
0000141A  6700 00FE                435      BEQ     MOVIAN2
0000141E  0C39 0003 00002114       436      CMP.B   #$3, bit2 
00001426  6700 012A                437      BEQ     MOVIANI2
0000142A  0C39 0004 00002114       438      CMP.B   #$4, bit2 
00001432  6700 0162                439      BEQ     MOVIAND2
00001436                           440  
00001436                           441  MOVEIAND1
00001436  43F9 00002041            442      LEA TAB, A1
0000143C  103C 000E                443      MOVE.B  #14,D0
00001440  4E4F                     444      TRAP    #15
00001442                           445      
00001442  43F9 0000204D            446      LEA NEG, A1
00001448  103C 000E                447      MOVE.B  #14,D0
0000144C  4E4F                     448      TRAP    #15
0000144E                           449      
0000144E  43F9 00002047            450      LEA OPENBRA, A1
00001454  103C 000E                451      MOVE.B  #14,D0
00001458  4E4F                     452      TRAP    #15
0000145A                           453  
0000145A  43F9 00002051            454      LEA DISPA,A1
00001460  103C 000E                455      MOVE.B  #14,D0
00001464  4E4F                     456      TRAP    #15
00001466                           457      
00001466  1239 00002116            458      MOVE.B  bit4, D1
0000146C  103C 0003                459      MOVE.B  #3, D0
00001470  4E4F                     460      TRAP    #15
00001472                           461      
00001472  43F9 00002049            462      LEA CLOSEBRA, A1
00001478  103C 000E                463      MOVE.B  #14,D0
0000147C  4E4F                     464      TRAP    #15
0000147E                           465      
0000147E  43F9 00002045            466      LEA COMMA, A1
00001484  103C 000E                467      MOVE.B  #14,D0
00001488  4E4F                     468      TRAP    #15
0000148A                           469      
0000148A  0C39 0000 00002114       470      CMP.B   #$0,bit2
00001492  6700 0146                471      BEQ     MOVBDN2
00001496  0C39 0002 00002114       472      CMP.B   #$2, bit2 
0000149E  6700 007A                473      BEQ     MOVIAN2
000014A2  0C39 0003 00002114       474      CMP.B   #$3, bit2 
000014AA  6700 00A6                475      BEQ     MOVIANI2
000014AE  0C39 0004 00002114       476      CMP.B   #$4, bit2 
000014B6  6700 00DE                477      BEQ     MOVIAND2
000014BA                           478  
000014BA                           479  MOVBDN1
000014BA  43F9 00002041            480      LEA TAB, A1
000014C0  103C 000E                481      MOVE.B  #14,D0
000014C4  4E4F                     482      TRAP    #15
000014C6                           483      
000014C6  43F9 00002057            484      LEA DISPD, A1
000014CC  103C 000E                485      MOVE.B  #14,D0
000014D0  4E4F                     486      TRAP    #15
000014D2                           487      
000014D2  1239 00002116            488      MOVE.B  bit4, D1
000014D8  103C 0003                489      MOVE.B  #3,D0
000014DC  4E4F                     490      TRAP    #15
000014DE                           491      
000014DE  43F9 00002045            492      LEA COMMA, A1
000014E4  103C 000E                493      MOVE.B  #14,D0
000014E8  4E4F                     494      TRAP    #15
000014EA                           495      
000014EA  0C39 0000 00002114       496      CMP.B   #$0,bit2
000014F2  6700 00E6                497      BEQ     MOVBDN2
000014F6  0C39 0002 00002114       498      CMP.B   #$2, bit2 
000014FE  6700 001A                499      BEQ     MOVIAN2
00001502  0C39 0003 00002114       500      CMP.B   #$3, bit2 
0000150A  6700 0046                501      BEQ     MOVIANI2
0000150E  0C39 0004 00002114       502      CMP.B   #$4, bit2 
00001516  6700 007E                503      BEQ     MOVIAND2
0000151A                           504      
0000151A                           505  MOVIAN2
0000151A  43F9 00002047            506      LEA OPENBRA, A1
00001520  103C 000E                507      MOVE.B  #14,D0
00001524  4E4F                     508      TRAP    #15
00001526                           509  
00001526  43F9 00002051            510      LEA DISPA,A1
0000152C  103C 000E                511      MOVE.B  #14,D0
00001530  4E4F                     512      TRAP    #15
00001532                           513      
00001532  1239 00002113            514      MOVE.B  bit1, D1
00001538  103C 0003                515      MOVE.B  #3, D0
0000153C  4E4F                     516      TRAP    #15
0000153E                           517      
0000153E  43F9 00002049            518      LEA CLOSEBRA, A1
00001544  103C 000E                519      MOVE.B  #14,D0
00001548  4E4F                     520      TRAP    #15
0000154A                           521      
0000154A  11DE 7500                522      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
0000154E  6000 0A0C                523      BRA     ENDNEWLINE
00001552                           524  
00001552                           525  MOVIANI2
00001552  43F9 00002047            526      LEA OPENBRA, A1
00001558  103C 000E                527      MOVE.B  #14,D0
0000155C  4E4F                     528      TRAP    #15
0000155E                           529  
0000155E  43F9 00002051            530      LEA DISPA,A1
00001564  103C 000E                531      MOVE.B  #14,D0
00001568  4E4F                     532      TRAP    #15
0000156A                           533      
0000156A  1239 00002113            534      MOVE.B  bit1, D1
00001570  103C 0003                535      MOVE.B  #3, D0
00001574  4E4F                     536      TRAP    #15
00001576                           537      
00001576  43F9 00002049            538      LEA CLOSEBRA, A1
0000157C  103C 000E                539      MOVE.B  #14,D0
00001580  4E4F                     540      TRAP    #15
00001582                           541      
00001582  43F9 0000204B            542      LEA POS, A1
00001588  103C 000E                543      MOVE.B  #14,D0
0000158C  4E4F                     544      TRAP    #15
0000158E                           545      
0000158E  11DE 7500                546      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001592  6000 09C8                547      BRA     ENDNEWLINE
00001596                           548  
00001596                           549  MOVIAND2
00001596  43F9 0000204D            550      LEA NEG, A1
0000159C  103C 000E                551      MOVE.B  #14,D0
000015A0  4E4F                     552      TRAP    #15
000015A2                           553      
000015A2  43F9 00002047            554      LEA OPENBRA, A1
000015A8  103C 000E                555      MOVE.B  #14,D0
000015AC  4E4F                     556      TRAP    #15
000015AE                           557  
000015AE  43F9 00002051            558      LEA DISPA,A1
000015B4  103C 000E                559      MOVE.B  #14,D0
000015B8  4E4F                     560      TRAP    #15
000015BA                           561      
000015BA  1239 00002113            562      MOVE.B  bit1, D1
000015C0  103C 0003                563      MOVE.B  #3, D0
000015C4  4E4F                     564      TRAP    #15
000015C6                           565      
000015C6  43F9 00002049            566      LEA CLOSEBRA, A1
000015CC  103C 000E                567      MOVE.B  #14,D0
000015D0  4E4F                     568      TRAP    #15
000015D2                           569  
000015D2  11DE 7500                570      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000015D6  6000 0984                571      BRA     ENDNEWLINE
000015DA                           572  
000015DA                           573  MOVBDN2
000015DA  43F9 00002057            574      LEA DISPD, A1
000015E0  103C 000E                575      MOVE.B  #14,D0
000015E4  4E4F                     576      TRAP    #15
000015E6                           577          
000015E6  1239 00002113            578      MOVE.B  bit1, D1
000015EC  103C 0003                579      MOVE.B  #3,D0
000015F0  4E4F                     580      TRAP    #15   
000015F2                           581      
000015F2  11DE 7500                582      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000015F6  6000 0964                583      BRA     ENDNEWLINE
000015FA                           584      
000015FA                           585  
000015FA                           586  ******************************************************************************************************
000015FA                           587  *   Branch, branch to subroutine, and branch conditionally
000015FA                           588  *   BRA, BSR, Bcc
000015FA                           589  
000015FA                           590  BCC
000015FA  13C5 00002113            591          MOVE.B  D5,bit1             Moves condition code to bit1
00001600  1A1E                     592          MOVE.B  (A6)+,D5            Moves the 8-bit displacement to D5
00001602  13C5 00002114            593          MOVE.B  D5,bit2             Moves the 8-bit displacement to bit2
00001608  280E                     594          MOVE.L  A6,D4               Moves current address to D4 register
0000160A                           595  
0000160A  BA3C 0000                596          CMP.B   #$0,D5              If bit1 is 0, displacement is word size
0000160E  6700 0010                597          BEQ     BCCWORD
00001612  BA3C 00FF                598          CMP.B   #$FF,D5             If bit1 is FF, displacement is longword size
00001616  6700 0010                599          BEQ     BCCLONG             Else, displacement is 8-bits
0000161A                           600  
0000161A                           601          * Calculates 8-bit displacement
0000161A                           602          * 8-bit displacement is already in D5
0000161A                           603          * Adds displacement to current address
0000161A  D805                     604          ADD.B   D5,D4               Adds the displacement to current address
0000161C  6000 0012                605          BRA     BCCNEXT
00001620                           606  
00001620                           607  * Calculates 16-bit displacement
00001620                           608  BCCWORD
00001620  3A1E                     609          MOVE.W  (A6)+,D5            Moves the the 16-bit displacement to D5
00001622  D845                     610          ADD.W   D5,D4               Adds the displacement to current address
00001624  6000 000A                611          BRA     BCCNEXT
00001628                           612  
00001628                           613  * Calculates 32-bit displacement
00001628                           614  BCCLONG
00001628  2A1E                     615          MOVE.L  (A6)+,D5            Moves the 32-bit displacement to D5
0000162A  D885                     616          ADD.L   D5,D4               Adds the displacement to current address
0000162C  6000 0002                617          BRA     BCCNEXT
00001630                           618  
00001630                           619  * Does the actual calculation
00001630                           620  * Adds the displacement to the current address
00001630                           621  BCCNEXT
00001630  6100 000E                622          BSR     BCCDISP             Displays branch op-code
00001634  45F9 00001F5C            623          LEA     ENDNEWLINE,A2
0000163A  2E04                     624          MOVE.L  D4,D7
0000163C  6000 F9EA                625          BRA     DISPADDRSTART
00001640                           626  
00001640                           627  BCCDISP
00001640  B43C 0000                628          CMP.B   #$0,D2
00001644  6700 0026                629          BEQ     BCCBRA
00001648  B43C 0007                630          CMP.B   #$7,D2
0000164C  6700 0028                631          BEQ     BCCBEQ
00001650  B43C 0006                632          CMP.B   #$6,D2
00001654  6700 002A                633          BEQ     BCCBNE
00001658  B43C 000D                634          CMP.B   #$D,D2
0000165C  6700 002C                635          BEQ     BCCBLT
00001660  B43C 0002                636          CMP.B   #$2,D2
00001664  6700 002E                637          BEQ     BCCBHI
00001668                           638  
00001668  6000 0880                639          BRA     INVOP
0000166C                           640  
0000166C                           641  BCCBRA
0000166C  43F9 000020BB            642          LEA     MBRA,A1
00001672  6000 002A                643          BRA     BCCPRINT
00001676                           644  BCCBEQ
00001676  43F9 000020AB            645          LEA     MBEQ,A1
0000167C  6000 0020                646          BRA     BCCPRINT
00001680                           647  BCCBNE
00001680  43F9 000020AF            648          LEA     MBNE,A1
00001686  6000 0016                649          BRA     BCCPRINT
0000168A                           650  BCCBLT
0000168A  43F9 000020B3            651          LEA     MBLT,A1
00001690  6000 000C                652          BRA     BCCPRINT
00001694                           653  BCCBHI
00001694  43F9 000020B7            654          LEA     MBHI,A1
0000169A  6000 0002                655          BRA     BCCPRINT
0000169E                           656  BCCPRINT
0000169E  103C 000E                657          MOVE.B  #14,D0
000016A2  4E4F                     658          TRAP    #15
000016A4  43F9 00002041            659          LEA     TAB,A1
000016AA  4E4F                     660          TRAP    #15
000016AC  4E75                     661          RTS
000016AE                           662  
000016AE                           663  ******************************************************************************************************
000016AE                           664  *   Immediate data arithmetic operations
000016AE                           665  *   SUBI
000016AE                           666  
000016AE  13C5 00002113            667  IMD     MOVE.B  D5,bit1
000016B4  141E                     668          MOVE.B  (A6)+,D2
000016B6                           669  
000016B6  DE02                     670          ADD.B   D2,D7
000016B8                           671  
000016B8  1602                     672          MOVE.B  D2,D3               Copies data at D2 to D3
000016BA                           673          *   this gets digit in 10's place
000016BA  E80B                     674          LSR.B   #4,D3               Shifts right to get rid of 1's place
000016BC                           675          *   this gets digit in 1's place
000016BC  E90A                     676          LSL.B   #4,D2               Shifts left to get rid of 10's place
000016BE  E80A                     677          LSR.B   #4,D2               Shifts back right into 1's place
000016C0                           678  
000016C0                           679          *   D3 holds digit in 10's place
000016C0                           680          *   D2 holds digit in 1's place
000016C0                           681  
000016C0  E20B                     682          LSR.B   #1,D3
000016C2  6400 0004                683          BCC     IMD2
000016C6  5404                     684          ADD.B   #$2,D4
000016C8  E20B                     685  IMD2    LSR.B   #1,D3
000016CA  6400 0004                686          BCC     IMD3
000016CE  5804                     687          ADD.B   #$4,D4
000016D0  B43C 0007                688  IMD3    CMP.B   #$7,D2
000016D4  6D00 0006                689          BLT     IMD4
000016D8  5204                     690          ADD.B   #$1,D4
000016DA  5102                     691          SUB.B   #$8,D2
000016DC                           692  
000016DC                           693          *   Stores them into addr
000016DC  13C3 00002114            694  IMD4    MOVE.B  D3,bit2
000016E2  13C4 00002115            695          MOVE.B  D4,bit3
000016E8  13C2 00002116            696          MOVE.B  D2,bit4
000016EE                           697  
000016EE                           698  **************************
000016EE                           699  * This finds the size of the operation
000016EE                           700  
000016EE  0C39 0000 00002114       701          CMP.B   #$0,bit2
000016F6  6700 0068                702          BEQ     IMDBYTE
000016FA  0C39 0001 00002114       703          CMP.B   #$1,bit2
00001702  6700 006C                704          BEQ     IMDWORD
00001706  0C39 0002 00002114       705          CMP.B   #$2,bit2
0000170E  6700 006E                706          BEQ     IMDLONG
00001712  6000 07D6                707          BRA     INVOP
00001716                           708  
00001716                           709  *************************************************************
00001716                           710  * Display IMD op-code
00001716                           711  IMDPRINT
00001716  0C39 0000 00002113       712          CMP.B   #$0,bit1
0000171E  6700 001A                713          BEQ     IMDPRINTORI
00001722  0C39 0004 00002113       714          CMP.B   #$4,bit1
0000172A  6700 0018                715          BEQ     IMDPRINTSUBI
0000172E  0C39 0006 00002113       716          CMP.B   #$6,bit1
00001736  6700 0016                717          BEQ     IMDPRINTNOT
0000173A                           718  
0000173A                           719  IMDPRINTORI
0000173A  43F9 000020A1            720          LEA     MORI,A1
00001740  6000 0016                721          BRA     IMDPRINTEND
00001744                           722  
00001744                           723  IMDPRINTSUBI
00001744  43F9 0000209B            724          LEA     MSUBI,A1
0000174A  6000 000C                725          BRA     IMDPRINTEND
0000174E                           726  
0000174E                           727  * NOT isn't part of immediate operation, but they share similar structure so I put it here too
0000174E                           728  IMDPRINTNOT
0000174E  43F9 000020A6            729          LEA     MNOT,A1
00001754  6000 0002                730          BRA     IMDPRINTEND
00001758                           731  
00001758                           732  IMDPRINTEND
00001758  103C 000E                733          MOVE.B  #14,D0
0000175C  4E4F                     734          TRAP    #15
0000175E  4E75                     735          RTS
00001760                           736  
00001760                           737  *************************************************************
00001760                           738  * Immediate data operation size BYTE
00001760                           739  IMDBYTE
00001760  61B4                     740          BSR     IMDPRINT
00001762  43F9 0000205F            741          LEA     MBYTE,A1
00001768                           742  
00001768                           743          * Moves size to D4, needed to use DISPEA
00001768  183C 0001                744          MOVE.B  #$1,D4
0000176C  6000 001A                745          BRA     IMDEA
00001770                           746  
00001770                           747  *************************************************************
00001770                           748  * Immediate data operation size WORD
00001770                           749  IMDWORD
00001770  61A4                     750          BSR     IMDPRINT
00001772  43F9 00002062            751          LEA     MWORD,A1
00001778                           752  
00001778  1803                     753          MOVE.B  D3,D4
0000177A  6000 000C                754          BRA     IMDEA
0000177E                           755  
0000177E                           756  
0000177E                           757  *************************************************************
0000177E                           758  * Immediate data operation size LONG
0000177E                           759  IMDLONG
0000177E  6196                     760          BSR     IMDPRINT
00001780  43F9 00002065            761          LEA     MLONG,A1
00001786                           762          
00001786                           763  
00001786                           764          * Moves size to D4, needed to use DISPEA
00001786  1803                     765          MOVE.B  D3,D4
00001788                           766  
00001788                           767  IMDEA
00001788                           768          * This prints out the size and creates tab
00001788  103C 000E                769          MOVE.B  #14,D0
0000178C  4E4F                     770          TRAP    #15
0000178E  43F9 00002041            771          LEA     TAB,A1
00001794  103C 000E                772          MOVE.B  #14,D0
00001798  4E4F                     773          TRAP    #15
0000179A                           774          * Loads return address into A2
0000179A  45F9 000017A4            775          LEA     IMDEA2,A2
000017A0  6000 06E0                776          BRA     DISPEA
000017A4                           777  IMDEA2
000017A4  43F9 00002045            778          LEA     COMMA,A1
000017AA  103C 000E                779          MOVE.B  #14,D0
000017AE  4E4F                     780          TRAP    #15
000017B0                           781  
000017B0  45F9 000017BA            782          LEA     IMDEA3,A2
000017B6  6000 057A                783          BRA     SUBEA
000017BA                           784  IMDEA3
000017BA  6000 07A0                785          BRA     ENDNEWLINE
000017BE                           786  
000017BE                           787  ******************************************************************************************************
000017BE                           788  * Miscellaneous section
000017BE                           789  *   Not goes here
000017BE                           790  
000017BE                           791  MISC
000017BE  13C5 00002113            792          MOVE.B  D5,bit1
000017C4  141E                     793          MOVE.B  (A6)+,D2
000017C6                           794  
000017C6  DE02                     795          ADD.B   D2,D7
000017C8                           796  
000017C8  1602                     797          MOVE.B  D2,D3               Copies data at D2 to D3
000017CA                           798          *   this gets digit in 10's place
000017CA  E80B                     799          LSR.B   #4,D3               Shifts right to get rid of 1's place
000017CC                           800          *   this gets digit in 1's place
000017CC  E90A                     801          LSL.B   #4,D2               Shifts left to get rid of 10's place
000017CE  E80A                     802          LSR.B   #4,D2               Shifts back right into 1's place
000017D0                           803  
000017D0                           804          *   D3 holds digit in 10's place
000017D0                           805          *   D2 holds digit in 1's place
000017D0                           806  
000017D0  E20B                     807          LSR.B   #1,D3
000017D2  6400 0004                808          BCC     MISC2
000017D6  5404                     809          ADD.B   #$2,D4
000017D8  E20B                     810  MISC2   LSR.B   #1,D3
000017DA  6400 0004                811          BCC     MISC3
000017DE  5804                     812          ADD.B   #$4,D4
000017E0  B43C 0007                813  MISC3   CMP.B   #$7,D2
000017E4  6D00 0006                814          BLT     MISC4
000017E8  5204                     815          ADD.B   #$1,D4
000017EA  5102                     816          SUB.B   #$8,D2
000017EC                           817  
000017EC                           818          *   Stores them into addr
000017EC  13C3 00002114            819  MISC4   MOVE.B  D3,bit2
000017F2  13C4 00002115            820          MOVE.B  D4,bit3
000017F8  13C2 00002116            821          MOVE.B  D2,bit4
000017FE                           822  
000017FE                           823  **************************
000017FE                           824  * This finds the size of the operation
000017FE                           825  
000017FE  BA3C 0006                826          CMP.B   #$6,D5              Branches to NOT section
00001802  6700 0020                827          BEQ     MISCNOT
00001806  BA3C 000E                828          CMP.B   #$E,D5              Branches to NOP section
0000180A  6700 0006                829          BEQ     MISCNOP
0000180E  6000 06DA                830          BRA     INVOP
00001812                           831  
00001812                           832  ******************************************************
00001812                           833  * NOP
00001812                           834  * No operation
00001812                           835  MISCNOP
00001812  43F9 000020BF            836          LEA     MNOP,A1
00001818  103C 000E                837          MOVE.B  #14,D0
0000181C  4E4F                     838          TRAP    #15
0000181E  321E                     839          MOVE.W  (A6)+,D1            Grabs the next word since they are part of NOP code
00001820  6000 073A                840          BRA     ENDNEWLINE          Goes to next opcode
00001824                           841  
00001824                           842  ******************************************************
00001824                           843  * NOT
00001824                           844  * Reuses some of IMD section to display because they have similar format
00001824                           845  *  (I was kinda lazy too)
00001824                           846  MISCNOT
00001824  0C39 0000 00002114       847          CMP.B   #$0,bit2
0000182C  6700 001A                848          BEQ     MISCBYTE
00001830  0C39 0001 00002114       849          CMP.B   #$1,bit2
00001838  6700 0020                850          BEQ     MISCWORD
0000183C  0C39 0002 00002114       851          CMP.B   #$2,bit2
00001844  6700 0024                852          BEQ     MISCLONG
00001848                           853  
00001848                           854  *************************************************************
00001848                           855  * Immediate data operation size BYTE
00001848                           856  MISCBYTE
00001848  6100 FECC                857          BSR     IMDPRINT
0000184C  43F9 0000205F            858          LEA     MBYTE,A1
00001852                           859  
00001852                           860          * Moves size to D4, needed to use DISPEA
00001852  183C 0001                861          MOVE.B  #$1,D4
00001856  6000 001E                862          BRA     MISCEA
0000185A                           863  
0000185A                           864  *************************************************************
0000185A                           865  * Immediate data operation size WORD
0000185A                           866  MISCWORD
0000185A  6100 FEBA                867          BSR     IMDPRINT
0000185E  43F9 00002062            868          LEA     MWORD,A1
00001864                           869  
00001864  1803                     870          MOVE.B  D3,D4
00001866  6000 000E                871          BRA     MISCEA
0000186A                           872  
0000186A                           873  
0000186A                           874  *************************************************************
0000186A                           875  * Immediate data operation size LONG
0000186A                           876  MISCLONG
0000186A  6100 FEAA                877          BSR     IMDPRINT
0000186E  43F9 00002065            878          LEA     MLONG,A1
00001874                           879  
00001874                           880          * Moves size to D4, needed to use DISPEA
00001874  1803                     881          MOVE.B  D3,D4
00001876                           882  
00001876                           883  MISCEA
00001876  103C 000E                884          MOVE.B  #14,D0
0000187A  4E4F                     885          TRAP    #15
0000187C  43F9 00002041            886          LEA     TAB,A1
00001882  103C 000E                887          MOVE.B  #14,D0
00001886  4E4F                     888          TRAP    #15
00001888                           889  
00001888  45F9 00001892            890          LEA     MISCEA2,A2
0000188E  6000 04A2                891          BRA     SUBEA
00001892                           892  MISCEA2
00001892  6000 06C8                893          BRA     ENDNEWLINE
00001896                           894  
00001896                           895  
00001896                           896  ******************************************************************************************************
00001896                           897  * SUB section
00001896                           898  
00001896                           899          *   Grabs next two nibbles
00001896  141E                     900  SUB     MOVE.B  (A6)+,D2
00001898                           901  
00001898  DE02                     902          ADD.B   D2,D7
0000189A                           903  
0000189A  1602                     904          MOVE.B  D2,D3               Copies data at D2 to D3
0000189C                           905          *   this gets digit in 10's place
0000189C  E80B                     906          LSR.B   #4,D3               Shifts right to get rid of 1's place
0000189E                           907          *   this gets digit in 1's place
0000189E  E90A                     908          LSL.B   #4,D2               Shifts left to get rid of 10's place
000018A0  E80A                     909          LSR.B   #4,D2               Shifts back right into 1's place
000018A2                           910  
000018A2                           911          *   D3 holds digit in 10's place
000018A2                           912          *   D2 holds digit in 1's place
000018A2                           913  
000018A2                           914          
000018A2                           915          *   Converts nibble into 3-bit parts
000018A2  E20B                     916          LSR.B   #1,D3
000018A4  6400 0004                917          BCC     SUB2
000018A8  5404                     918          ADD.B   #$2,D4
000018AA                           919          
000018AA  E20B                     920  SUB2    LSR.B   #1,D3
000018AC  6400 0004                921          BCC     SUB3
000018B0  5804                     922          ADD.B   #$4,D4
000018B2                           923          
000018B2  1205                     924  SUB3    MOVE.B  D5,D1
000018B4  E209                     925          LSR.B   #1,D1
000018B6  6400 0004                926          BCC     SUB4
000018BA  5803                     927          ADD.B   #$4,D3
000018BC                           928  
000018BC  B43C 0007                929  SUB4    CMP.B   #$7,D2
000018C0  6D00 0006                930          BLT     SUB1
000018C4  5204                     931          ADD.B   #$1,D4
000018C6  5102                     932          SUB.B   #$8,D2
000018C8                           933  
000018C8                           934          *   Stores them into addr
000018C8  13C1 00002113            935  SUB1    MOVE.B  D1,bit1
000018CE  13C3 00002114            936          MOVE.B  D3,bit2
000018D4  13C4 00002115            937          MOVE.B  D4,bit3
000018DA  13C2 00002116            938          MOVE.B  D2,bit4
000018E0                           939  
000018E0                           940          * do this later
000018E0  4241                     941          CLR     D1
000018E2  7400                     942          MOVE.L  #0,D2
000018E4  7600                     943          MOVE.L  #0,D3
000018E6  7800                     944          MOVE.L  #0,D4
000018E8  7A00                     945          MOVE.L  #0,D5
000018EA  7C00                     946          MOVE.L  #0,D6
000018EC                           947  
000018EC                           948          
000018EC                           949  ******************************************************************************************************
000018EC                           950  * After spliting the op-code into SUB's defined groupings
000018EC                           951  *   This figures out which operation it is and goes to that sub-routine
000018EC                           952  
000018EC                           953          * This will display SUBA instead  -- check this later
000018EC  0C39 0003 00002114       954          CMP.B   #$3,bit2
000018F4  6700 01E6                955          BEQ     SUBA
000018F8  0C39 0007 00002114       956          CMP.B   #$7,bit2
00001900  6700 01DA                957          BEQ     SUBA
00001904                           958  
00001904                           959  
00001904                           960          * This will find the size and stuff
00001904  0C39 0000 00002114       961          CMP.B   #$0,bit2
0000190C  6700 003E                962          BEQ     SUBSIZE1
00001910  0C39 0001 00002114       963          CMP.B   #$1,bit2
00001918  6700 0072                964          BEQ     SUBSIZE2
0000191C  0C39 0002 00002114       965          CMP.B   #$2,bit2
00001924  6700 00A6                966          BEQ     SUBSIZE3
00001928  0C39 0004 00002114       967          CMP.B   #$4,bit2
00001930  6700 00DA                968          BEQ     SUBSIZE4
00001934  0C39 0005 00002114       969          CMP.B   #$5,bit2
0000193C  6700 0112                970          BEQ     SUBSIZE5
00001940  0C39 0006 00002114       971          CMP.B   #$6,bit2
00001948  6700 014A                972          BEQ     SUBSIZE6
0000194C                           973     
0000194C                           974  ******************************************************************************************************
0000194C                           975  *   Displays size, then does operation order
0000194C                           976  
0000194C                           977  *   000 byte    EA,DN
0000194C                           978  SUBSIZE1
0000194C  6100 0228                979          BSR     SUBPRINT
00001950  43F9 0000205F            980          LEA     MBYTE,A1
00001956  103C 000E                981          MOVE.B  #14,D0
0000195A  4E4F                     982          TRAP    #15
0000195C  43F9 00002041            983          LEA     TAB,A1
00001962  103C 000E                984          MOVE.B  #14,D0
00001966  4E4F                     985          TRAP    #15
00001968                           986  
00001968  45F9 00001972            987          LEA     SUBSIZE11,A2
0000196E  6000 03C2                988          BRA     SUBEA
00001972                           989  SUBSIZE11
00001972  45F9 00001988            990          LEA     SUBSIZE12,A2
00001978  43F9 00002045            991          LEA     COMMA,A1
0000197E  103C 000E                992          MOVE.B  #14,D0
00001982  4E4F                     993          TRAP    #15
00001984  6000 0288                994          BRA     SUBDN
00001988                           995  SUBSIZE12
00001988  6000 05D2                996          BRA     ENDNEWLINE
0000198C                           997  
0000198C                           998  *************************************************
0000198C                           999  *   001 word    EA,DN
0000198C                          1000  SUBSIZE2
0000198C  6100 01E8               1001          BSR     SUBPRINT
00001990  43F9 00002062           1002          LEA     MWORD,A1
00001996  103C 000E               1003          MOVE.B  #14,D0
0000199A  4E4F                    1004          TRAP    #15
0000199C  43F9 00002041           1005          LEA     TAB,A1
000019A2  103C 000E               1006          MOVE.B  #14,D0
000019A6  4E4F                    1007          TRAP    #15
000019A8                          1008  
000019A8  45F9 000019B2           1009          LEA     SUBSIZE21,A2
000019AE  6000 0382               1010          BRA     SUBEA
000019B2                          1011  SUBSIZE21
000019B2  45F9 000019C8           1012          LEA     SUBSIZE22,A2
000019B8  43F9 00002045           1013          LEA     COMMA,A1
000019BE  103C 000E               1014          MOVE.B  #14,D0
000019C2  4E4F                    1015          TRAP    #15
000019C4  6000 0248               1016          BRA     SUBDN
000019C8                          1017  SUBSIZE22
000019C8  6000 0592               1018          BRA     ENDNEWLINE
000019CC                          1019  
000019CC                          1020  *************************************************
000019CC                          1021  *   010 long    EA,DN
000019CC                          1022  SUBSIZE3
000019CC  6100 01A8               1023          BSR     SUBPRINT
000019D0  43F9 00002065           1024          LEA     MLONG,A1
000019D6  103C 000E               1025          MOVE.B  #14,D0
000019DA  4E4F                    1026          TRAP    #15
000019DC  43F9 00002041           1027          LEA     TAB,A1
000019E2  103C 000E               1028          MOVE.B  #14,D0
000019E6  4E4F                    1029          TRAP    #15
000019E8                          1030  
000019E8  45F9 000019F2           1031          LEA     SUBSIZE31,A2
000019EE  6000 0342               1032          BRA     SUBEA
000019F2                          1033  SUBSIZE31
000019F2  45F9 00001A08           1034          LEA     SUBSIZE32,A2
000019F8  43F9 00002045           1035          LEA     COMMA,A1
000019FE  103C 000E               1036          MOVE.B  #14,D0
00001A02  4E4F                    1037          TRAP    #15
00001A04  6000 0208               1038          BRA     SUBDN
00001A08                          1039  SUBSIZE32
00001A08  6000 0552               1040          BRA     ENDNEWLINE
00001A0C                          1041  
00001A0C                          1042  *************************************************
00001A0C                          1043  *   100 byte    DN,EA
00001A0C                          1044  SUBSIZE4
00001A0C  6100 0168               1045          BSR     SUBPRINT
00001A10  43F9 0000205F           1046          LEA     MBYTE,A1
00001A16  103C 000E               1047          MOVE.B  #14,D0
00001A1A  4E4F                    1048          TRAP    #15
00001A1C  43F9 00002041           1049          LEA     TAB,A1
00001A22  103C 000E               1050          MOVE.B  #14,D0
00001A26  4E4F                    1051          TRAP    #15
00001A28                          1052  
00001A28  6100 01A2               1053          BSR     SUBERRORTEST1
00001A2C                          1054  
00001A2C  45F9 00001A36           1055          LEA     SUBSIZE41,A2
00001A32  6000 01DA               1056          BRA     SUBDN
00001A36                          1057  SUBSIZE41
00001A36  45F9 00001A4C           1058          LEA     SUBSIZE42,A2
00001A3C  43F9 00002045           1059          LEA     COMMA,A1
00001A42  103C 000E               1060          MOVE.B  #14,D0
00001A46  4E4F                    1061          TRAP    #15
00001A48  6000 02E8               1062          BRA     SUBEA
00001A4C                          1063  SUBSIZE42
00001A4C  6000 050E               1064          BRA     ENDNEWLINE
00001A50                          1065  
00001A50                          1066  *************************************************
00001A50                          1067  *   101 word    DN,EA
00001A50                          1068  SUBSIZE5
00001A50  6100 017A               1069          BSR     SUBERRORTEST1               * This does error testing
00001A54  6100 0120               1070          BSR     SUBPRINT                    * Prints out 'SUB.'
00001A58  43F9 00002062           1071          LEA     MWORD,A1
00001A5E  103C 000E               1072          MOVE.B  #14,D0
00001A62  4E4F                    1073          TRAP    #15
00001A64  43F9 00002041           1074          LEA     TAB,A1
00001A6A  103C 000E               1075          MOVE.B  #14,D0
00001A6E  4E4F                    1076          TRAP    #15
00001A70                          1077  
00001A70  45F9 00001A7A           1078          LEA     SUBSIZE51,A2
00001A76  6000 0196               1079          BRA     SUBDN
00001A7A                          1080  SUBSIZE51
00001A7A  45F9 00001A90           1081          LEA     SUBSIZE52,A2
00001A80  43F9 00002045           1082          LEA     COMMA,A1
00001A86  103C 000E               1083          MOVE.B  #14,D0
00001A8A  4E4F                    1084          TRAP    #15
00001A8C  6000 02A4               1085          BRA     SUBEA
00001A90                          1086  SUBSIZE52
00001A90  6000 04CA               1087          BRA     ENDNEWLINE
00001A94                          1088  
00001A94                          1089  *************************************************
00001A94                          1090  *   110 long    DN,EA
00001A94                          1091  SUBSIZE6
00001A94  6100 0136               1092          BSR     SUBERRORTEST1               * This does error testing
00001A98  6100 00DC               1093          BSR     SUBPRINT                    * Prints out 'SUB.'
00001A9C  43F9 00002065           1094          LEA     MLONG,A1
00001AA2  103C 000E               1095          MOVE.B  #14,D0
00001AA6  4E4F                    1096          TRAP    #15
00001AA8  43F9 00002041           1097          LEA     TAB,A1
00001AAE  103C 000E               1098          MOVE.B  #14,D0
00001AB2  4E4F                    1099          TRAP    #15
00001AB4                          1100  
00001AB4  6100 0116               1101          BSR     SUBERRORTEST1
00001AB8                          1102  
00001AB8  45F9 00001AC2           1103          LEA     SUBSIZE61,A2
00001ABE  6000 014E               1104          BRA     SUBDN
00001AC2                          1105  SUBSIZE61
00001AC2  45F9 00001AD8           1106          LEA     SUBSIZE62,A2
00001AC8  43F9 00002045           1107          LEA     COMMA,A1
00001ACE  103C 000E               1108          MOVE.B  #14,D0
00001AD2  4E4F                    1109          TRAP    #15
00001AD4  6000 025C               1110          BRA     SUBEA
00001AD8                          1111  SUBSIZE62
00001AD8  6000 0482               1112          BRA     ENDNEWLINE
00001ADC                          1113  
00001ADC                          1114  ****************************************************************************
00001ADC                          1115  *   This section is for SUBA
00001ADC                          1116  *   Displays 'SUBA.' then decodes the op-code as SUBA
00001ADC                          1117  SUBA
00001ADC  43F9 0000208B           1118          LEA     MSUBA,A1                    Displays 'SUBA.'
00001AE2  103C 000E               1119          MOVE.B  #14,D0
00001AE6  4E4F                    1120          TRAP    #15
00001AE8                          1121          
00001AE8                          1122          * Does the rest of SUBA
00001AE8  0C39 0003 00002114      1123          CMP.B   #$3,bit2
00001AF0  6700 000E               1124          BEQ     SUBSIZE7
00001AF4  0C39 0007 00002114      1125          CMP.B   #$7,bit2
00001AFC  6700 003E               1126          BEQ     SUBSIZE8
00001B00                          1127  
00001B00                          1128  *************************************************
00001B00                          1129  *   SUBA Word   ea,An
00001B00                          1130  SUBSIZE7
00001B00  43F9 00002062           1131          LEA     MWORD,A1
00001B06  103C 000E               1132          MOVE.B  #14,D0
00001B0A  4E4F                    1133          TRAP    #15
00001B0C  43F9 00002041           1134          LEA     TAB,A1
00001B12  103C 000E               1135          MOVE.B  #14,D0
00001B16  4E4F                    1136          TRAP    #15
00001B18                          1137  
00001B18  45F9 00001B22           1138          LEA     SUBSIZE71,A2
00001B1E  6000 0212               1139          BRA     SUBEA
00001B22                          1140  SUBSIZE71
00001B22  45F9 00001B38           1141          LEA     SUBSIZE72,A2
00001B28  43F9 00002045           1142          LEA     COMMA,A1
00001B2E  103C 000E               1143          MOVE.B  #14,D0
00001B32  4E4F                    1144          TRAP    #15
00001B34  6000 012C               1145          BRA     SUBAN2
00001B38                          1146  SUBSIZE72
00001B38  6000 0422               1147          BRA     ENDNEWLINE
00001B3C                          1148  
00001B3C                          1149  *************************************************
00001B3C                          1150  *   SUBA longword   ea,An
00001B3C                          1151  SUBSIZE8
00001B3C  43F9 00002065           1152          LEA     MLONG,A1
00001B42  103C 000E               1153          MOVE.B  #14,D0
00001B46  4E4F                    1154          TRAP    #15
00001B48  43F9 00002041           1155          LEA     TAB,A1
00001B4E  103C 000E               1156          MOVE.B  #14,D0
00001B52  4E4F                    1157          TRAP    #15
00001B54                          1158  
00001B54  45F8 1B22               1159          LEA     SUBSIZE71,A2
00001B58  6000 01D8               1160          BRA     SUBEA
00001B5C                          1161  SUBSIZE81
00001B5C  45F8 1B38               1162          LEA     SUBSIZE72,A2
00001B60  43F9 00002045           1163          LEA     COMMA,A1
00001B66  103C 000E               1164          MOVE.B  #14,D0
00001B6A  4E4F                    1165          TRAP    #15
00001B6C  6000 00F4               1166          BRA     SUBAN2
00001B70                          1167  SUBSIZE82
00001B70  6000 03EA               1168          BRA     ENDNEWLINE
00001B74                          1169  
00001B74                          1170  *************************************************
00001B74                          1171  * Jumps to memory location at A2
00001B74                          1172  SUBJMPA2
00001B74  4ED2                    1173          JMP     (A2)
00001B76                          1174  
00001B76                          1175  *************************************************
00001B76                          1176  * Prints out opcode name
00001B76                          1177  SUBPRINT
00001B76  0C39 0009 00002112      1178          CMP.B   #$9,bit0                Prints SUB
00001B7E  6700 001A               1179          BEQ     SUBPRINTSUB
00001B82  0C39 000C 00002112      1180          CMP.B   #$C,bit0                Prints AND
00001B8A  6700 001E               1181          BEQ     SUBPRINTAND
00001B8E  0C39 000D 00002112      1182          CMP.B   #$D,bit0                Prints ADD
00001B96  6700 0022               1183          BEQ     SUBPRINTADD
00001B9A                          1184  
00001B9A                          1185  
00001B9A                          1186  
00001B9A                          1187  SUBPRINTSUB   * Displays 'SUB.' 
00001B9A  43F9 00002086           1188          LEA     MSUB,A1
00001BA0  103C 000E               1189          MOVE.B  #14,D0
00001BA4  4E4F                    1190          TRAP    #15
00001BA6  6000 0022               1191          BRA     SUBPRINTEND
00001BAA                          1192  
00001BAA                          1193  SUBPRINTAND   * Displays 'AND.' 
00001BAA  43F9 00002091           1194          LEA     MAND,A1
00001BB0  103C 000E               1195          MOVE.B  #14,D0
00001BB4  4E4F                    1196          TRAP    #15
00001BB6  6000 0012               1197          BRA     SUBPRINTEND
00001BBA                          1198  
00001BBA                          1199  SUBPRINTADD   * Displays 'ADD.' 
00001BBA  43F9 00002096           1200          LEA     MADD,A1
00001BC0  103C 000E               1201          MOVE.B  #14,D0
00001BC4  4E4F                    1202          TRAP    #15
00001BC6  6000 0002               1203          BRA     SUBPRINTEND
00001BCA                          1204  
00001BCA                          1205  
00001BCA                          1206  SUBPRINTEND
00001BCA  4E75                    1207          RTS
00001BCC                          1208  
00001BCC                          1209  
00001BCC                          1210  *******************************************************************
00001BCC                          1211  * Error testing for DN->EA operations
00001BCC                          1212  *  Data register, address register, and immediate data cannot be destinations
00001BCC                          1213  SUBERRORTEST1
00001BCC                          1214          * test for DN or AN register, branches to invalid op code if true
00001BCC  0C39 0000 00002115      1215          CMP.B   #0,bit3
00001BD4  6700 0314               1216          BEQ     INVOP
00001BD8  0C39 0001 00002115      1217          CMP.B   #1,bit3
00001BE0  6700 0308               1218          BEQ     INVOP
00001BE4                          1219          
00001BE4                          1220          * check if destination is immediate data
00001BE4  0C39 0007 00002115      1221          CMP.B   #7,bit3
00001BEC  6600 001E               1222          BNE     SUBERRORTEST11
00001BF0  0C39 0000 00002116      1223          CMP.B   #0,bit4
00001BF8  6700 0012               1224          BEQ     SUBERRORTEST11
00001BFC  0C39 0001 00002116      1225          CMP.B   #1,bit4
00001C04  6700 0006               1226          BEQ     SUBERRORTEST11
00001C08  6000 02E0               1227          BRA     INVOP
00001C0C                          1228          
00001C0C                          1229  SUBERRORTEST11
00001C0C  4E75                    1230          RTS
00001C0E                          1231  
00001C0E                          1232  
00001C0E                          1233  ******************************************************************************************************
00001C0E                          1234  *   Displays data register
00001C0E                          1235  SUBDN
00001C0E  43F9 00002068           1236          LEA     MDN,A1
00001C14  103C 000E               1237          MOVE.B  #14,D0
00001C18  4E4F                    1238          TRAP    #15
00001C1A                          1239  
00001C1A  1239 00002113           1240          MOVE.B  bit1,D1
00001C20  103C 0003               1241          MOVE.B  #3,D0
00001C24  4E4F                    1242          TRAP    #15
00001C26                          1243          
00001C26  6000 FF4C               1244          BRA     SUBJMPA2
00001C2A                          1245  
00001C2A                          1246  *   Displays data register
00001C2A                          1247  *   This is for Dn -> Dn cases. Source Dn uses bit4 as register instead of bit1
00001C2A                          1248  SUBDN2
00001C2A  43F9 00002068           1249          LEA     MDN,A1
00001C30  103C 000E               1250          MOVE.B  #14,D0
00001C34  4E4F                    1251          TRAP    #15
00001C36                          1252  
00001C36  1239 00002116           1253          MOVE.B  bit4,D1
00001C3C  103C 0003               1254          MOVE.B  #3,D0
00001C40  4E4F                    1255          TRAP    #15
00001C42                          1256          
00001C42  6000 FF30               1257          BRA     SUBJMPA2
00001C46                          1258  
00001C46                          1259  *   Displays address register
00001C46                          1260  SUBAN
00001C46  43F9 0000206A           1261          LEA     MAN,A1
00001C4C  103C 000E               1262          MOVE.B  #14,D0
00001C50  4E4F                    1263          TRAP    #15
00001C52                          1264  
00001C52  1239 00002116           1265          MOVE.B  bit4,D1
00001C58  103C 0003               1266          MOVE.B  #3,D0
00001C5C  4E4F                    1267          TRAP    #15
00001C5E                          1268          
00001C5E  6000 FF14               1269          BRA     SUBJMPA2
00001C62                          1270  
00001C62                          1271  *   Displays address register
00001C62                          1272  *   This is for SUBA, SUBA puts An into bit1
00001C62                          1273  SUBAN2
00001C62  43F9 0000206A           1274          LEA     MAN,A1
00001C68  103C 000E               1275          MOVE.B  #14,D0
00001C6C  4E4F                    1276          TRAP    #15
00001C6E                          1277  
00001C6E  1239 00002113           1278          MOVE.B  bit1,D1
00001C74  103C 0003               1279          MOVE.B  #3,D0
00001C78  4E4F                    1280          TRAP    #15
00001C7A                          1281          
00001C7A  6000 FEF8               1282          BRA     SUBJMPA2
00001C7E                          1283  
00001C7E                          1284  
00001C7E                          1285  *   Displays indirect address register
00001C7E                          1286  SUBANID
00001C7E  43F9 00002047           1287          LEA     OPENBRA,A1
00001C84  103C 000E               1288          MOVE.B  #14,D0
00001C88  4E4F                    1289          TRAP    #15
00001C8A                          1290  
00001C8A  43F9 0000206A           1291          LEA     MAN,A1
00001C90  103C 000E               1292          MOVE.B  #14,D0
00001C94  4E4F                    1293          TRAP    #15
00001C96                          1294  
00001C96  1239 00002116           1295          MOVE.B  bit4,D1
00001C9C  103C 0003               1296          MOVE.B  #3,D0
00001CA0  4E4F                    1297          TRAP    #15
00001CA2                          1298  
00001CA2  43F9 00002049           1299          LEA     CLOSEBRA,A1
00001CA8  103C 000E               1300          MOVE.B  #14,D0
00001CAC  4E4F                    1301          TRAP    #15
00001CAE                          1302  
00001CAE  6000 FEC4               1303          BRA     SUBJMPA2
00001CB2                          1304  
00001CB2                          1305  *   Displays indirect address register with post increment
00001CB2                          1306  SUBANIDPOS
00001CB2  43F9 00002047           1307          LEA     OPENBRA,A1
00001CB8  103C 000E               1308          MOVE.B  #14,D0
00001CBC  4E4F                    1309          TRAP    #15
00001CBE                          1310  
00001CBE  43F9 0000206A           1311          LEA     MAN,A1
00001CC4  103C 000E               1312          MOVE.B  #14,D0
00001CC8  4E4F                    1313          TRAP    #15
00001CCA                          1314  
00001CCA  1239 00002116           1315          MOVE.B  bit4,D1
00001CD0  103C 0003               1316          MOVE.B  #3,D0
00001CD4  4E4F                    1317          TRAP    #15
00001CD6                          1318  
00001CD6  43F9 00002049           1319          LEA     CLOSEBRA,A1
00001CDC  103C 000E               1320          MOVE.B  #14,D0
00001CE0  4E4F                    1321          TRAP    #15
00001CE2                          1322  
00001CE2  43F9 0000204B           1323          LEA     POS,A1
00001CE8  103C 000E               1324          MOVE.B  #14,D0
00001CEC  4E4F                    1325          TRAP    #15
00001CEE                          1326  
00001CEE  6000 FE84               1327          BRA     SUBJMPA2
00001CF2                          1328  
00001CF2                          1329  *   Displays indirect address register with pre decrement
00001CF2                          1330  SUBANIDNEG
00001CF2  43F9 0000204D           1331          LEA     NEG,A1
00001CF8  103C 000E               1332          MOVE.B  #14,D0
00001CFC  4E4F                    1333          TRAP    #15
00001CFE                          1334  
00001CFE  43F9 00002047           1335          LEA     OPENBRA,A1
00001D04  103C 000E               1336          MOVE.B  #14,D0
00001D08  4E4F                    1337          TRAP    #15
00001D0A                          1338  
00001D0A  43F9 0000206A           1339          LEA     MAN,A1
00001D10  103C 000E               1340          MOVE.B  #14,D0
00001D14  4E4F                    1341          TRAP    #15
00001D16                          1342  
00001D16  1239 00002116           1343          MOVE.B  bit4,D1
00001D1C  103C 0003               1344          MOVE.B  #3,D0
00001D20  4E4F                    1345          TRAP    #15
00001D22                          1346  
00001D22  43F9 00002049           1347          LEA     CLOSEBRA,A1
00001D28  103C 000E               1348          MOVE.B  #14,D0
00001D2C  4E4F                    1349          TRAP    #15
00001D2E                          1350  
00001D2E  6000 FE44               1351          BRA     SUBJMPA2
00001D32                          1352  
00001D32                          1353  
00001D32                          1354  
00001D32                          1355  
00001D32                          1356  ******************************************************************************************************
00001D32                          1357  * Displays the EA as hex numbers
00001D32                          1358  * 
00001D32                          1359  SUBEA
00001D32                          1360          *   This finds which mode to use
00001D32  0C39 0000 00002115      1361          CMP.B   #$0,bit3
00001D3A  6700 FEEE               1362          BEQ     SUBDN2
00001D3E  0C39 0001 00002115      1363          CMP.B   #$1,bit3                BYTE SIZED OPERATIONS ARE NOT ALLOWED FOR An
00001D46  6700 FEFE               1364          BEQ     SUBAN
00001D4A  0C39 0002 00002115      1365          CMP.B   #$2,bit3
00001D52  6700 FF2A               1366          BEQ     SUBANID
00001D56  0C39 0003 00002115      1367          CMP.B   #$3,bit3
00001D5E  6700 FF52               1368          BEQ     SUBANIDPOS
00001D62  0C39 0004 00002115      1369          CMP.B   #$4,bit3
00001D6A  6786                    1370          BEQ     SUBANIDNEG
00001D6C  0C39 0005 00002115      1371          CMP.B   #$5,bit3
00001D74  6700 02A4               1372          BEQ     ERROR
00001D78  0C39 0006 00002115      1373          CMP.B   #$6,bit3
00001D80  6700 0298               1374          BEQ     ERROR
00001D84  0C39 0007 00002115      1375          CMP.B   #$7,bit3
00001D8C  6700 0002               1376          BEQ     SUBEAHEX
00001D90                          1377  
00001D90                          1378  SUBEAHEX
00001D90  0C39 0004 00002116      1379          CMP.B   #$4,bit4            Branches to immediate data section of bit4 is 4
00001D98  6700 0086               1380          BEQ     SUBEAID
00001D9C                          1381  SUBEAID2
00001D9C                          1382          *   Else it will assume it is absolute addressing mode
00001D9C  43F9 0000205D           1383          LEA     MHEX,A1
00001DA2  103C 000E               1384          MOVE.B  #14,D0
00001DA6  4E4F                    1385          TRAP    #15
00001DA8                          1386  
00001DA8  0C39 0000 00002116      1387          CMP.B   #$0,bit4
00001DB0  6700 007E               1388          BEQ     SUBEAHEX1
00001DB4  0C39 0001 00002116      1389          CMP.B   #$1,bit4
00001DBC  6700 007A               1390          BEQ     SUBEAHEX2
00001DC0                          1391  
00001DC0  0C39 0000 00002114      1392          CMP.B   #$0,bit2            * SUB byte displays as word
00001DC8  6700 0066               1393          BEQ     SUBEAHEX1
00001DCC  0C39 0004 00002114      1394          CMP.B   #$4,bit2            * SUB byte displays as word
00001DD4  6700 005A               1395          BEQ     SUBEAHEX1
00001DD8  0C39 0001 00002114      1396          CMP.B   #$1,bit2            * SUB word
00001DE0  6700 004E               1397          BEQ     SUBEAHEX1
00001DE4  0C39 0005 00002114      1398          CMP.B   #$5,bit2            * SUB word
00001DEC  6700 0042               1399          BEQ     SUBEAHEX1
00001DF0  0C39 0003 00002114      1400          CMP.B   #$3,bit2            * SUBA word
00001DF8  6700 0036               1401          BEQ     SUBEAHEX1
00001DFC  0C39 0002 00002114      1402          CMP.B   #$2,bit2            * SUB longword
00001E04  6700 0032               1403          BEQ     SUBEAHEX2
00001E08  0C39 0006 00002114      1404          CMP.B   #$6,bit2            * SUB longword
00001E10  6700 0026               1405          BEQ     SUBEAHEX2
00001E14  0C39 0007 00002114      1406          CMP.B   #$7,bit2            * SUBA longword
00001E1C  6700 001A               1407          BEQ     SUBEAHEX2
00001E20                          1408  
00001E20                          1409  SUBEAID
00001E20  43F9 0000204F           1410          LEA     HASH,A1
00001E26  103C 000E               1411          MOVE.B  #14,D0
00001E2A  4E4F                    1412          TRAP    #15
00001E2C  6000 FF6E               1413          BRA     SUBEAID2
00001E30                          1414  
00001E30                          1415  SUBEAHEX1  
00001E30                          1416          *absolute address word
00001E30  1E3C 0002               1417          MOVE.B  #2,D7
00001E34  6000 000A               1418          BRA     SUBEAHEX3
00001E38                          1419  
00001E38                          1420  SUBEAHEX2  *absolute address long
00001E38  1E3C 0004               1421          MOVE.B  #4,D7
00001E3C  6000 0002               1422          BRA     SUBEAHEX3
00001E40                          1423  
00001E40                          1424  SUBEAHEX3
00001E40  BE3C 0000               1425          CMP.B   #0,D7               Compares current addr to ending addr
00001E44  6700 FD2E               1426          BEQ     SUBJMPA2            Branches to done if they are equal
00001E48                          1427  
00001E48                          1428      
00001E48  141E                    1429          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
00001E4A                          1430          
00001E4A  1602                    1431          MOVE.B  D2,D3               Copies data at D2 to D3
00001E4C                          1432          *   this gets digit in 10's place
00001E4C  E80B                    1433          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001E4E                          1434          *   this gets digit in 1's place
00001E4E  E90A                    1435          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001E50  E80A                    1436          LSR.B   #4,D2               Shifts back right into 1's place
00001E52                          1437  
00001E52                          1438          
00001E52                          1439          *   D3 holds digit in 10's place
00001E52                          1440          *   D2 holds digit in 1's place
00001E52                          1441          
00001E52  1203                    1442          MOVE.B  D3,D1               Displays digit in 10's place first
00001E54                          1443  
00001E54                          1444          *   converts digits 10+ into letters
00001E54                          1445  
00001E54  47F9 00001E68           1446          LEA     SUBEAHEX4,A3        Place address of TENS into A3 to continue from there after conversion
00001E5A  B23C 0009               1447          CMP.B   #9,D1               Compares digit to 9
00001E5E  6E00 0146               1448          BGT     CONV                Print out letter representation if greater than 9
00001E62                          1449  
00001E62  103C 0003               1450          MOVE.B  #3,D0               Displays digit if it is less than A
00001E66  4E4F                    1451          TRAP    #15
00001E68                          1452          
00001E68                          1453  SUBEAHEX4    
00001E68  1202                    1454          MOVE.B  D2,D1               Displays digit in 1's place second
00001E6A                          1455  
00001E6A                          1456          *   converts digits 10+ into letters
00001E6A  47F9 00001E7E           1457          LEA     SUBEAHEX5,A3           Places address of NEXT into A3 to continue from there after conversion
00001E70  B23C 0009               1458          CMP.B   #9,D1               Compares digit to 9
00001E74  6E00 0130               1459          BGT     CONV                Print out letter representation if greater than 9
00001E78                          1460          
00001E78  103C 0003               1461          MOVE.B  #3,D0               Displays digit if it is less than A
00001E7C  4E4F                    1462          TRAP    #15
00001E7E                          1463          
00001E7E                          1464  SUBEAHEX5         
00001E7E                          1465  * Display counter -- creates new line every 8 bytes
00001E7E                          1466          * D7 is used as counter
00001E7E                          1467          
00001E7E  5307                    1468          SUB.B   #1,D7                       
00001E80  60BE                    1469          BRA     SUBEAHEX3              Loops back to display next address
00001E82                          1470  
00001E82                          1471  ***   display EA ends here
00001E82                          1472  
00001E82                          1473  ******************************************************************************************************
00001E82                          1474  * Displays the EA as hex numbers
00001E82                          1475  * INPUT: Size of EA in D4; 1 = word, 2 = longword
00001E82                          1476  * OUTPUT: Displays size of EA reading from A6
00001E82                          1477  * Jumps to location stored in A2 when finished
00001E82                          1478  DISPEA
00001E82  43F9 0000205D           1479          LEA     MHEX,A1
00001E88  103C 000E               1480          MOVE.B  #14,D0
00001E8C  4E4F                    1481          TRAP    #15
00001E8E                          1482  
00001E8E  B83C 0002               1483          CMP.B   #$2,D4              Branches to longword display if size is 2
00001E92  6700 000A               1484          BEQ     DISPEALONG          Else it will assume word length
00001E96                          1485  
00001E96                          1486  DISPEAWORD
00001E96                          1487          *absolute address word
00001E96  1E3C 0002               1488          MOVE.B  #2,D7
00001E9A  6000 000A               1489          BRA     DISPEA3
00001E9E                          1490   
00001E9E                          1491  DISPEALONG
00001E9E                          1492          *absolute address long
00001E9E  1E3C 0004               1493          MOVE.B  #4,D7
00001EA2  6000 0002               1494          BRA     DISPEA3
00001EA6                          1495  
00001EA6                          1496  DISPEA3
00001EA6  BE3C 0000               1497          CMP.B   #0,D7               Compares current addr to ending addr
00001EAA  6700 FCC8               1498          BEQ     SUBJMPA2            Branches to done if they are equal
00001EAE                          1499  
00001EAE                          1500      
00001EAE  141E                    1501          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
00001EB0                          1502          
00001EB0  1602                    1503          MOVE.B  D2,D3               Copies data at D2 to D3
00001EB2                          1504          *   this gets digit in 10's place
00001EB2  E80B                    1505          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001EB4                          1506          *   this gets digit in 1's place
00001EB4  E90A                    1507          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001EB6  E80A                    1508          LSR.B   #4,D2               Shifts back right into 1's place
00001EB8                          1509  
00001EB8                          1510          
00001EB8                          1511          *   D3 holds digit in 10's place
00001EB8                          1512          *   D2 holds digit in 1's place
00001EB8                          1513          
00001EB8  1203                    1514          MOVE.B  D3,D1               Displays digit in 10's place first
00001EBA                          1515  
00001EBA                          1516          *   converts digits 10+ into letters
00001EBA                          1517  
00001EBA  47F9 00001ECE           1518          LEA     DISPEA4,A3        Place address of TENS into A3 to continue from there after conversion
00001EC0  B23C 0009               1519          CMP.B   #9,D1               Compares digit to 9
00001EC4  6E00 00E0               1520          BGT     CONV                Print out letter representation if greater than 9
00001EC8                          1521  
00001EC8  103C 0003               1522          MOVE.B  #3,D0               Displays digit if it is less than A
00001ECC  4E4F                    1523          TRAP    #15
00001ECE                          1524    
00001ECE                          1525  DISPEA4
00001ECE  1202                    1526          MOVE.B  D2,D1               Displays digit in 1's place second
00001ED0                          1527  
00001ED0                          1528          *   converts digits 10+ into letters
00001ED0  47F9 00001EE4           1529          LEA     DISPEA5,A3           Places address of NEXT into A3 to continue from there after conversion
00001ED6  B23C 0009               1530          CMP.B   #9,D1               Compares digit to 9
00001EDA  6E00 00CA               1531          BGT     CONV                Print out letter representation if greater than 9
00001EDE                          1532          
00001EDE  103C 0003               1533          MOVE.B  #3,D0               Displays digit if it is less than A
00001EE2  4E4F                    1534          TRAP    #15
00001EE4                          1535        
00001EE4                          1536  DISPEA5
00001EE4                          1537  * Display counter -- creates new line every 8 bytes
00001EE4                          1538          * D7 is used as counter
00001EE4                          1539          
00001EE4  5307                    1540          SUB.B   #1,D7                       
00001EE6  60BE                    1541          BRA     DISPEA3              Loops back to display next address
00001EE8                          1542  
00001EE8                          1543  ***   display EA ends here
00001EE8                          1544  
00001EE8                          1545  
00001EE8                          1546  ********************************************************************
00001EE8                          1547  * Invalid op-code handling
00001EE8                          1548  * Displays DATA YYYY
00001EE8                          1549  *  YYYY represents the op-code that failed
00001EE8                          1550  INVOPCODE
00001EE8  DE1E                    1551          ADD.B   (A6)+,D7
00001EEA                          1552  
00001EEA                          1553  INVOP
00001EEA  43F9 00002081           1554          LEA     MDATA,A1
00001EF0  103C 000E               1555          MOVE.B  #14,D0
00001EF4  4E4F                    1556          TRAP    #15
00001EF6  43F9 00002041           1557          LEA     TAB,A1
00001EFC  103C 000E               1558          MOVE.B  #14,D0
00001F00  4E4F                    1559          TRAP    #15
00001F02  43F9 0000205D           1560          LEA     MHEX,A1
00001F08  103C 000E               1561          MOVE.B  #14,D0
00001F0C  4E4F                    1562          TRAP    #15
00001F0E                          1563          
00001F0E  1C3C 0002               1564          MOVE.B  #2,D6               D6 is a counter, used to know loop back once
00001F12                          1565          
00001F12  3407                    1566          MOVE.W  D7,D2               Copies opcode saved in D2 to D7
00001F14  E04A                    1567          LSR.W   #8,D2               Shifts D2 right 8 spaces to get the first byte of the word
00001F16  6000 0004               1568          BRA     INVOP2              Skips the second part to do later
00001F1A                          1569  
00001F1A                          1570  INVOP1
00001F1A  1407                    1571          MOVE.B  D7,D2
00001F1C                          1572  INVOP2
00001F1C  1602                    1573          MOVE.B  D2,D3               Copies data at D2 to D3
00001F1E                          1574          *   this gets digit in 10's place
00001F1E  E80B                    1575          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001F20                          1576          *   this gets digit in 1's place
00001F20  E90A                    1577          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001F22  E80A                    1578          LSR.B   #4,D2               Shifts back right into 1's place
00001F24                          1579  
00001F24                          1580          
00001F24                          1581          *   D3 holds digit in 10's place
00001F24                          1582          *   D2 holds digit in 1's place
00001F24                          1583          
00001F24  1203                    1584          MOVE.B  D3,D1               Displays digit in 10's place first
00001F26                          1585  
00001F26                          1586          *   converts digits 10+ into letters
00001F26                          1587  
00001F26  47F9 00001F3A           1588          LEA     INVOP3,A3        Place address of TENS into A3 to continue from there after conversion
00001F2C  B23C 0009               1589          CMP.B   #9,D1               Compares digit to 9
00001F30  6E00 0074               1590          BGT     CONV                Print out letter representation if greater than 9
00001F34                          1591  
00001F34  103C 0003               1592          MOVE.B  #3,D0               Displays digit if it is less than A
00001F38  4E4F                    1593          TRAP    #15
00001F3A                          1594          
00001F3A                          1595  INVOP3   
00001F3A  1202                    1596          MOVE.B  D2,D1               Displays digit in 1's place second
00001F3C                          1597  
00001F3C                          1598          *   converts digits 10+ into letters
00001F3C  47F9 00001F50           1599          LEA     INVOP4,A3           Places address of NEXT into A3 to continue from there after conversion
00001F42  B23C 0009               1600          CMP.B   #9,D1               Compares digit to 9
00001F46  6E00 005E               1601          BGT     CONV                Print out letter representation if greater than 9
00001F4A                          1602          
00001F4A  103C 0003               1603          MOVE.B  #3,D0               Displays digit if it is less than A
00001F4E  4E4F                    1604          TRAP    #15
00001F50                          1605          
00001F50                          1606  INVOP4
00001F50                          1607  * Display counter -- creates new line every 8 bytes
00001F50                          1608          * D6 is used as counter
00001F50                          1609          
00001F50  5306                    1610          SUB.B   #1,D6
00001F52  BC3C 0000               1611          CMP.B   #0,D6
00001F56  6700 0004               1612          BEQ     ENDNEWLINE
00001F5A  60BE                    1613          BRA     INVOP1              Loops back to display next address
00001F5C                          1614  
00001F5C                          1615  
00001F5C                          1616  ******************************************************************************************************
00001F5C                          1617  * Creates a new line after an op-code is displayed, loops back to start to display next code
00001F5C                          1618  ENDNEWLINE
00001F5C  43F9 0000203E           1619          LEA     NEWLINE,A1          Creates a new line in output window
00001F62  103C 000E               1620          MOVE.B  #14,D0
00001F66  4E4F                    1621          TRAP    #15
00001F68                          1622  
00001F68  5339 00002111           1623          SUB.B   #1,dispcount
00001F6E  0C39 0000 00002111      1624          CMP.B   #0,dispcount               Checks if display counter is zero
00001F76  6600 F09E               1625          BNE     NEWADDR
00001F7A                          1626  
00001F7A                          1627  * Asks user to press enter to continue
00001F7A                          1628  * Resets counter
00001F7A  43F9 0000203E           1629          LEA     NEWLINE,A1          Creates a new line in output window
00001F80  103C 000E               1630          MOVE.B  #14,D0
00001F84  4E4F                    1631          TRAP    #15
00001F86                          1632          
00001F86  43F9 000020F5           1633          LEA     MCONT,A1            Asks user to press enter to continue
00001F8C  103C 000E               1634          MOVE.B  #14,D0
00001F90  4E4F                    1635          TRAP    #15
00001F92                          1636  
00001F92  103C 0004               1637          MOVE.B  #4,D0               Takes in user input
00001F96  4E4F                    1638          TRAP    #15
00001F98  4281                    1639          CLR.L   D1                  Clears D1 incase user decides to input something
00001F9A                          1640  
00001F9A  13FC 001E 00002111      1641          MOVE.B  #dispnum,dispcount  Resets display counter
00001FA2  6000 F072               1642          BRA     NEWADDR             Loops back to beginning
00001FA6                          1643  
00001FA6                          1644  ******************************************************************************************************
00001FA6                          1645  * Converts decimal number into hex and displays it
00001FA6                          1646  *   converts number 10-15 to A-F
00001FA6                          1647  *   INPUT: decimal number in D1
00001FA6                          1648  *   OUTPUT: HEX number to output
00001FA6  B23C 000A               1649  CONV    CMP.B   #10,D1              Displays 10 as A
00001FAA  6700 002A               1650          BEQ     HEXA
00001FAE  B23C 000B               1651          CMP.B   #11,D1              Displays 11 as B
00001FB2  6700 002C               1652          BEQ     HEXB
00001FB6  B23C 000C               1653          CMP.B   #12,D1              Displays 12 as C
00001FBA  6700 002E               1654          BEQ     HEXC
00001FBE  B23C 000D               1655          CMP.B   #13,D1              Displays 13 as D
00001FC2  6700 0030               1656          BEQ     HEXD
00001FC6  B23C 000E               1657          CMP.B   #14,D1              Displays 14 as E
00001FCA  6700 0032               1658          BEQ     HEXE
00001FCE  B23C 000F               1659          CMP.B   #15,D1              Displays 15 as F
00001FD2  6700 0034               1660          BEQ     HEXF
00001FD6                          1661  
00001FD6  43F9 00002051           1662  HEXA    LEA     DISPA,A1            Loads A character
00001FDC  6000 0034               1663          BRA     PRINT
00001FE0                          1664    
00001FE0  43F9 00002053           1665  HEXB    LEA     DISPB,A1            Loads B character
00001FE6  6000 002A               1666          BRA     PRINT
00001FEA                          1667  
00001FEA  43F9 00002055           1668  HEXC    LEA     DISPC,A1            Loads C character
00001FF0  6000 0020               1669          BRA     PRINT
00001FF4                          1670  
00001FF4  43F9 00002057           1671  HEXD    LEA     DISPD,A1            Loads D character
00001FFA  6000 0016               1672          BRA     PRINT
00001FFE                          1673  
00001FFE  43F9 00002059           1674  HEXE    LEA     DISPE,A1            Loads E character
00002004  6000 000C               1675          BRA     PRINT
00002008                          1676  
00002008  43F9 0000205B           1677  HEXF    LEA     DISPF,A1            Loads F character
0000200E  6000 0002               1678          BRA     PRINT
00002012                          1679  
00002012  103C 000E               1680  PRINT   MOVE.B  #14,D0              Sets trap task to #14
00002016  4E4F                    1681          TRAP    #15                 Prints out message in A1
00002018  4ED3                    1682          JMP     (A3)
0000201A                          1683  
0000201A  43F9 000020C3           1684  ERROR   LEA     MERROR,A1
00002020  103C 000E               1685          MOVE.B  #14,D0
00002024  4E4F                    1686          TRAP    #15
00002026  6000 000E               1687          BRA     EXIT
0000202A                          1688  
0000202A  43F9 000020DA           1689  DONE    LEA     MDONE,A1
00002030  103C 000E               1690          MOVE.B  #14,D0
00002034  4E4F                    1691          TRAP    #15
00002036                          1692  
00002036  103C 0009               1693  EXIT    MOVE.B  #9,D0
0000203A  4E4F                    1694          TRAP    #15
0000203C                          1695  
0000203C                          1696  ************************************ Output stuff **************************************
0000203C                          1697  * Stuff for output
0000203C                          1698  
0000203C  =0000000D               1699  CR      EQU     $0D
0000203C  =0000000A               1700  LF      EQU     $0A
0000203C                          1701  
0000203C= 20 00                   1702  SPACE       DC.B    ' ',0
0000203E= 0D 0A 00                1703  NEWLINE     DC.B    '',CR,LF,0
00002041= 20 20 20 00             1704  TAB         DC.B    '   ',0
00002045= 2C 00                   1705  COMMA       DC.B    ',',0
00002047= 28 00                   1706  OPENBRA     DC.B    '(',0
00002049= 29 00                   1707  CLOSEBRA    DC.B    ')',0
0000204B= 2B 00                   1708  POS         DC.B    '+',0
0000204D= 2D 00                   1709  NEG         DC.B    '-',0
0000204F= 23 00                   1710  HASH        DC.B    '#',0
00002051                          1711  
00002051                          1712  
00002051= 41 00                   1713  DISPA       DC.B    'A',0
00002053= 42 00                   1714  DISPB       DC.B    'B',0
00002055= 43 00                   1715  DISPC       DC.B    'C',0
00002057= 44 00                   1716  DISPD       DC.B    'D',0
00002059= 45 00                   1717  DISPE       DC.B    'E',0
0000205B= 46 00                   1718  DISPF       DC.B    'F',0
0000205D                          1719  
0000205D= 24 00                   1720  MHEX        DC.B    '$',0
0000205F= 42 20 00                1721  MBYTE       DC.B    'B ',0
00002062= 57 20 00                1722  MWORD       DC.B    'W ',0
00002065= 4C 20 00                1723  MLONG       DC.B    'L ',0
00002068= 44 00                   1724  MDN         DC.B    'D',0
0000206A= 41 00                   1725  MAN         DC.B    'A',0
0000206C                          1726  
0000206C= 4D 4F 56 45 2E 42 00    1727  MMOVEB      DC.B    'MOVE.B',0
00002073= 4D 4F 56 45 2E 57 00    1728  MMOVEW      DC.B    'MOVE.W',0
0000207A= 4D 4F 56 45 2E 4C 00    1729  MMOVEL      DC.B    'MOVE.L',0
00002081= 44 41 54 41 00          1730  MDATA       DC.B    'DATA',0
00002086= 53 55 42 2E 00          1731  MSUB        DC.B    'SUB.',0
0000208B= 53 55 42 41 2E 00       1732  MSUBA       DC.B    'SUBA.',0
00002091= 41 4E 44 2E 00          1733  MAND        DC.B    'AND.',0
00002096= 41 44 44 2E 00          1734  MADD        DC.B    'ADD.',0
0000209B= 53 55 42 49 2E 00       1735  MSUBI       DC.B    'SUBI.',0
000020A1= 4F 52 49 2E 00          1736  MORI        DC.B    'ORI.',0
000020A6= 4E 4F 54 2E 00          1737  MNOT        DC.B    'NOT.',0
000020AB= 42 45 51 00             1738  MBEQ        DC.B    'BEQ',0
000020AF= 42 4E 45 00             1739  MBNE        DC.B    'BNE',0
000020B3= 42 4C 54 00             1740  MBLT        DC.B    'BLT',0
000020B7= 42 48 49 00             1741  MBHI        DC.B    'BHI',0
000020BB= 42 48 49 00             1742  MBRA        DC.B    'BHI',0
000020BF= 4E 4F 50 00             1743  MNOP        DC.B    'NOP',0
000020C3                          1744  
000020C3= 45 52 52 4F 52 3A ...   1745  MERROR      DC.B    'ERROR: Something broke',0
000020DA= 43 4F 4D 50 4C 45 ...   1746  MDONE       DC.B    'COMPLETE: IT DID NOT CRASH',0
000020F5= 2A 2A 50 52 45 53 ...   1747  MCONT       DC.B    '**PRESS ENTER TO CONTINUE**',0
00002111                          1748  
00002111                          1749  
00002111                          1750  ********************************** MEMORY STORAGE **********************************************
00002111                          1751  * Stores memory locations at the end of the program
00002111                          1752  * How DS works: Give it a variable name.
00002111                          1753  *   DS means Define Storage. Give it a size of how big you want the storage to be (Byte, Word, Longword)
00002111                          1754  *   Last is the number of storage you want. 
00002111                          1755  *   Example: DS.W   1   This creates a 1 longword location to be used. Memory would look like: FF FF
00002111                          1756  *            DS.B   3   This creates three byte-sized locations to be used. Memory would look like: FF FF FF
00002111                          1757  *            
00002111                          1758  dispcount   DS.B    1           Used to count display lines
00002112                          1759  bit0        DS.B    1           SEE NOTE UP TOP
00002113                          1760  bit1        DS.B    1           SEE NOTE UP TOP
00002114                          1761  bit2        DS.B    1           SEE NOTE UP TOP
00002115                          1762  bit3        DS.B    1           SEE NOTE UP TOP
00002116                          1763  bit4        DS.B    1           SEE NOTE UP TOP
00002117                          1764  
00002117                          1765  
00002117                          1766      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDIMD              12B6
ADDIMD0             12DA
ADDIMD1             12DA
ADDIMD3             12DA
ADDR1               7000
ADDR2               726C
BCC                 15FA
BCCBEQ              1676
BCCBHI              1694
BCCBLT              168A
BCCBNE              1680
BCCBRA              166C
BCCDISP             1640
BCCLONG             1628
BCCNEXT             1630
BCCPRINT            169E
BCCWORD             1620
BIT0                2112
BIT1                2113
BIT2                2114
BIT3                2115
BIT4                2116
CLOSEBRA            2049
CODE                10EA
COMMA               2045
CONV                1FA6
CR                  D
DISPA               2051
DISPADDR1           1034
DISPADDR2           1036
DISPADDR3           106A
DISPADDR4           1080
DISPADDR5           1096
DISPADDR6           10AC
DISPADDREND         10B6
DISPADDRSTART       1028
DISPB               2053
DISPC               2055
DISPCOUNT           2111
DISPD               2057
DISPE               2059
DISPEA              1E82
DISPEA3             1EA6
DISPEA4             1ECE
DISPEA5             1EE4
DISPEALONG          1E9E
DISPEAWORD          1E96
DISPF               205B
DISPNUM             1E
DONE                202A
ENDNEWLINE          1F5C
ERROR               201A
EXIT                2036
HASH                204F
HEXA                1FD6
HEXB                1FE0
HEXC                1FEA
HEXD                1FF4
HEXE                1FFE
HEXF                2008
IMD                 16AE
IMD2                16C8
IMD3                16D0
IMD4                16DC
IMDBYTE             1760
IMDEA               1788
IMDEA2              17A4
IMDEA3              17BA
IMDLONG             177E
IMDPRINT            1716
IMDPRINTEND         1758
IMDPRINTNOT         174E
IMDPRINTORI         173A
IMDPRINTSUBI        1744
IMDWORD             1770
INVOP               1EEA
INVOP1              1F1A
INVOP2              1F1C
INVOP3              1F3A
INVOP4              1F50
INVOPCODE           1EE8
LF                  A
MADD                2096
MAN                 206A
MAND                2091
MBEQ                20AB
MBHI                20B7
MBLT                20B3
MBNE                20AF
MBRA                20BB
MBYTE               205F
MCONT               20F5
MDATA               2081
MDN                 2068
MDONE               20DA
MERROR              20C3
MHEX                205D
MISC                17BE
MISC2               17D8
MISC3               17E0
MISC4               17EC
MISCBYTE            1848
MISCEA              1876
MISCEA2             1892
MISCLONG            186A
MISCNOP             1812
MISCNOT             1824
MISCWORD            185A
MLONG               2065
MMOVEB              206C
MMOVEL              207A
MMOVEW              2073
MNOP                20BF
MNOT                20A6
MORI                20A1
MOVB                1236
MOVBDN1             14BA
MOVBDN2             15DA
MOVEAN1             12DA
MOVEIAN1            133A
MOVEIAND1           1436
MOVEIANI1           13B2
MOVIAN2             151A
MOVIAND2            1596
MOVIANI2            1552
MOVL                11B6
MOVW                1136
MSUB                2086
MSUBA               208B
MSUBI               209B
MWORD               2062
NEG                 204D
NEWADDR             1016
NEWLINE             203E
OPENBRA             2047
POS                 204B
PRINT               2012
SPACE               203C
START               1000
SUB                 1896
SUB1                18C8
SUB2                18AA
SUB3                18B2
SUB4                18BC
SUBA                1ADC
SUBAN               1C46
SUBAN2              1C62
SUBANID             1C7E
SUBANIDNEG          1CF2
SUBANIDPOS          1CB2
SUBDN               1C0E
SUBDN2              1C2A
SUBEA               1D32
SUBEAHEX            1D90
SUBEAHEX1           1E30
SUBEAHEX2           1E38
SUBEAHEX3           1E40
SUBEAHEX4           1E68
SUBEAHEX5           1E7E
SUBEAID             1E20
SUBEAID2            1D9C
SUBERRORTEST1       1BCC
SUBERRORTEST11      1C0C
SUBJMPA2            1B74
SUBPRINT            1B76
SUBPRINTADD         1BBA
SUBPRINTAND         1BAA
SUBPRINTEND         1BCA
SUBPRINTSUB         1B9A
SUBSIZE1            194C
SUBSIZE11           1972
SUBSIZE12           1988
SUBSIZE2            198C
SUBSIZE21           19B2
SUBSIZE22           19C8
SUBSIZE3            19CC
SUBSIZE31           19F2
SUBSIZE32           1A08
SUBSIZE4            1A0C
SUBSIZE41           1A36
SUBSIZE42           1A4C
SUBSIZE5            1A50
SUBSIZE51           1A7A
SUBSIZE52           1A90
SUBSIZE6            1A94
SUBSIZE61           1AC2
SUBSIZE62           1AD8
SUBSIZE7            1B00
SUBSIZE71           1B22
SUBSIZE72           1B38
SUBSIZE8            1B3C
SUBSIZE81           1B5C
SUBSIZE82           1B70
TAB                 2041
