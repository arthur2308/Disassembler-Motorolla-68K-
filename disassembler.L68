00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/30/2015 4:56:37 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Team A (Phat, Felicia, Arthur)
00000000                             4  * Date       : Thanksgiving 2015 (We started earlier but I happen to be filling this in today)
00000000                             5  * Description: Converts assembly language written in hex to readable human code (CSS422 Project)
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00000000                             9  ********************************
00000000                            10  * INFO:
00000000                            11  * bit0-4 are used to store information about binary op-code split into it's split-up stage
00000000                            12  * They are stored at the end of the code. (You can find code for storage at the end, after all the messages.)
00000000                            13  *   bit0 - Store first hex of op code
00000000                            14  *   bit1 - Store first 'bit' of a split op code
00000000                            15  *   bit2 - Store second 'bit' of a split op code
00000000                            16  *   bit3 - Store third 'bit' of a split op code
00000000                            17  *   bit4 - Store fourth 'bit' of a split op code
00000000                            18  * 
00000000                            19  * 
00000000                            20  * 
00000000                            21  * COMPLETED WORK:
00000000                            22  * SUB
00000000                            23  * SUBA      ERROR on CFC6 produces SUBA.L D6,A7 should be MULS.W    D6,D7 fixed however further testing needed 
00000000                            24  * AND
00000000                            25  * ADD   - NOT TESTED
00000000                            26  * SUBI
00000000                            27  * ORI   - EORI and CMPI uses the same logic as these two
00000000                            28  * NOT
00000000                            29  * 
00000000                            30  * MOVE      MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE                       1806
00000000                            31  * MOVEA     MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE                       3846
00000000                            32  * MULS      MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE        MULS LONG?     CFC6
00000000                            33  * DIVS      MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE                       85C3
00000000                            34  * NEG       MISSES  LONGADRESS(L&W) and IMEDIATE DATA     INVALID OPCODE                       4443
00000000                            35  * LSL                                                                                          E76A
00000000                            36  * LSR       
00000000                            37  ****************************************************************************
00000000                            38  
00000000                            39  
00000000                            40  * sets start and end address
00000000                            41  * temp hard code
00000000                            42  * make UI later for input
00000000  =00007000                 43  addr1   EQU     $7000
00000000                            44  *addr2   EQU     $7050
00000000  =0000725A                 45  addr2   EQU     $725A
00000000                            46  
00000000                            47  
00001000                            48      ORG    $1000
00001000                            49  START:                  ; first instruction of program
00001000                            50  
00001000                            51          
00001000                            52  
00001000                            53  
00001000                            54          *   this stores some test EA into memory
00001000                            55          *LEA     addr1,A1
00001000                            56          *MOVE.W  #$0440,(A1)+        *917C
00001000                            57          *MOVE.W  #$917C,(A1)+       
00001000                            58          *MOVE.L  #$5555A7FF,(A1)+
00001000                            59          *MOVE.W  #$9078,(A1)+
00001000                            60          *MOVE.W  #$5555,(A1)+
00001000                            61          
00001000                            62          *MOVE.L  #$0,A1              This clears the memory at A1, not sure why i didn't it but its probably important
00001000                            63          
00001000  31FC E66A 7000            64          MOVE.W  #$E66A, $7000
00001006                            65          
00001006                            66  ******************************************** displays address location***********************************************
00001006                            67  * This displays the address location of the op-code being worked on
00001006                            68  * A6 is used as current address
00001006                            69  
00001006  2C7C 00007000             70          MOVEA.L #addr1,A6            Moves starting addr into A6 register
0000100C                            71          
0000100C                            72  NEWADDR
0000100C  2E0E                      73          MOVE.L  A6,D7               Loads the current address into D7
0000100E  BEBC 0000725A             74          CMP.L   #addr2,D7            Compares current address to end address
00001014  6E00 1494                 75          BGT     DONE                Branches to done if current address > end address
00001018                            76          
00001018                            77          
00001018  1C3C 0002                 78          MOVE.B  #2,D6               D6 is a counter, used for looping
0000101C  2407                      79          MOVE.L  D7,D2               Copies opcode saved in D7 to D2 to be manipulated
0000101E  4842                      80          SWAP    D2                  Swaps the location to be displayed (Display first word of a long word)
00001020  6000 0004                 81          BRA     DISPADDR2           Skips the second part to do later
00001024                            82  
00001024                            83  DISPADDR1
00001024  3407                      84          MOVE.W  D7,D2
00001026                            85  DISPADDR2
00001026  3202                      86          MOVE.W  D2,D1               D1 will be the first byte of the word
00001028  3602                      87          MOVE.W  D2,D3               D3 will be the second byte of the word
0000102A  3802                      88          MOVE.W  D2,D4               D4 will be the third byte of the word
0000102C  3A02                      89          MOVE.W  D2,D5               D5 will be the fourth byte of the word
0000102E                            90  
0000102E  E049                      91          LSR.W   #8,D1               Shifts D1 right 12 times to move the first byte of the word to the last byte
00001030  E849                      92          LSR.W   #4,D1
00001032  E94B                      93          LSL.W   #4,D3               Shifts D3 left 4 times to get rid of the first byte
00001034  E04B                      94          LSR.W   #8,D3                 Then shifts D3 right 12 times to move it to the last byte
00001036  E84B                      95          LSR.W   #4,D3
00001038  E14C                      96          LSL.W   #8,D4               Shifts D4 to the left 8 times to get rid of first 2 bytes
0000103A  E04C                      97          LSR.W   #8,D4                 Then shifts it right 12 times to move it to the last byte
0000103C  E84C                      98          LSR.W   #4,D4
0000103E  E14D                      99          LSL.W   #8,D5               Shifts D5 to the left 12 times to get rid of the first 3 bytes
00001040  E94D                     100          LSL.W   #4,D5                 Then shifts it back to the left 12 times to move it to the last byte position
00001042  E04D                     101          LSR.W   #8,D5
00001044  E84D                     102          LSR.W   #4,D5
00001046                           103          
00001046                           104          
00001046  47F9 0000105A            105          LEA     DISPADDR3,A3        Place address of TENS into A3 to continue from there after conversion
0000104C  B23C 0009                106          CMP.B   #9,D1               Compares digit to 9
00001050  6E00 13D4                107          BGT     CONV                Print out letter representation if greater than 9
00001054                           108  
00001054  103C 0003                109          MOVE.B  #3,D0               Displays digit if it is less than A
00001058  4E4F                     110          TRAP    #15
0000105A                           111          
0000105A                           112  DISPADDR3   
0000105A  1203                     113          MOVE.B  D3,D1               Displays digit in 1's place second
0000105C                           114  
0000105C                           115          *   converts digits 10+ into letters
0000105C  47F9 00001070            116          LEA     DISPADDR4,A3           Places address of NEXT into A3 to continue from there after conversion
00001062  B23C 0009                117          CMP.B   #9,D1               Compares digit to 9
00001066  6E00 13BE                118          BGT     CONV                Print out letter representation if greater than 9
0000106A                           119          
0000106A  103C 0003                120          MOVE.B  #3,D0               Displays digit if it is less than A
0000106E  4E4F                     121          TRAP    #15
00001070                           122  
00001070                           123  DISPADDR4
00001070  1204                     124          MOVE.B  D4,D1               Displays digit in 1's place second
00001072                           125  
00001072                           126          *   converts digits 10+ into letters
00001072  47F9 00001086            127          LEA     DISPADDR5,A3           Places address of NEXT into A3 to continue from there after conversion
00001078  B23C 0009                128          CMP.B   #9,D1               Compares digit to 9
0000107C  6E00 13A8                129          BGT     CONV                Print out letter representation if greater than 9
00001080                           130          
00001080  103C 0003                131          MOVE.B  #3,D0               Displays digit if it is less than A
00001084  4E4F                     132          TRAP    #15
00001086                           133  
00001086                           134  DISPADDR5
00001086  1205                     135          MOVE.B  D5,D1               Displays digit in 1's place second
00001088                           136  
00001088                           137          *   converts digits 10+ into letters
00001088  47F9 0000109C            138          LEA     DISPADDR6,A3           Places address of NEXT into A3 to continue from there after conversion
0000108E  B23C 0009                139          CMP.B   #9,D1               Compares digit to 9
00001092  6E00 1392                140          BGT     CONV                Print out letter representation if greater than 9
00001096                           141          
00001096  103C 0003                142          MOVE.B  #3,D0               Displays digit if it is less than A
0000109A  4E4F                     143          TRAP    #15
0000109C                           144          
0000109C                           145  DISPADDR6
0000109C                           146  * Display counter -- creates new line every 8 bytes
0000109C                           147          * D6 is used as counter
0000109C                           148          
0000109C  5306                     149          SUB.B   #1,D6
0000109E  BC3C 0000                150          CMP.B   #0,D6
000010A2  6680                     151          BNE     DISPADDR1
000010A4                           152  
000010A4  43F9 000024C1            153          LEA     TAB,A1
000010AA  103C 000E                154          MOVE.B  #14,D0
000010AE  4E4F                     155          TRAP    #15
000010B0                           156          
000010B0                           157  *********************************************************************************************************************
000010B0                           158  * Splits the first byte of the op code into nibbles
000010B0                           159  * then sends it to the branch-table to jump to the appropiate section to be decoded
000010B0                           160  
000010B0  4281                     161          CLR.L   D1                  Clears the data registers
000010B2  4282                     162          CLR.L   D2
000010B4  4283                     163          CLR.L   D3
000010B6  4284                     164          CLR.L   D4
000010B8  4285                     165          CLR.L   D5
000010BA  4286                     166          CLR.L   D6
000010BC  3C16                     167          MOVE.W  (A6),D6
000010BE  141E                     168          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
000010C0                           169    
000010C0  1E02                     170          MOVE.B  D2,D7
000010C2  E14F                     171          LSL.W   #8,D7
000010C4                           172          
000010C4  1602                     173          MOVE.B  D2,D3               Copies data at D2 to D3
000010C6                           174          *   this gets digit in 10's place
000010C6  E80B                     175          LSR.B   #4,D3               Shifts right to get rid of 1's place
000010C8                           176          *   this gets digit in 1's place
000010C8  E90A                     177          LSL.B   #4,D2               Shifts left to get rid of 10's place
000010CA  E80A                     178          LSR.B   #4,D2               Shifts back right into 1's place
000010CC                           179          
000010CC                           180          *   D3 holds digit in 10's place
000010CC                           181          *   D2 holds digit in 1's place
000010CC                           182  
000010CC                           183          *   Moves second nibble to D5 to be used later
000010CC  1A02                     184          MOVE.B  D2,D5
000010CE  13C3 0000258A            185          MOVE.B  D3,bit0
000010D4                           186          *   Goes to a branch-table to figure out which op code it is
000010D4  6000 0002                187          BRA     CODE
000010D8                           188  
000010D8                           189  ******************************************************************************************************
000010D8                           190  *   This is where the table goes to detirmine which op-code to use
000010D8                           191  CODE    
000010D8  B63C 0000                192          CMP.B   #$0,D3              Goes to immediate operation section
000010DC  6700 0A98                193          BEQ     IMD
000010E0  B63C 0004                194          CMP.B   #$4,D3              Goes to miscellaneous section
000010E4  6700 0BA0                195          BEQ     MISC
000010E8  B63C 0009                196          CMP.B   #$9,D3              Goes to sub section
000010EC  6700 0C62                197          BEQ     SUB
000010F0  B63C 000C                198          CMP.B   #$C,D3              Goes to sub but displays as AND
000010F4  6700 0C5A                199          BEQ     SUB
000010F8  B63C 000D                200          CMP.B   #$D,D3              Goes to sub but displays as ADD
000010FC  6700 0C52                201          BEQ     SUB
00001100  B63C 0001                202          CMP.B   #$1,D3
00001104  6700 01E6                203          BEQ     MOVB                Goes to movb
00001108  B63C 0003                204          CMP.B   #$3,D3
0000110C  6700 001E                205          BEQ     MOVW                Goes to movw
00001110  B63C 0002                206          CMP.B   #$2,D3
00001114  6700 00F6                207          BEQ     MOVL                Goes to movl
00001118  B63C 0008                208          CMP.B   #$8,D3
0000111C  6700 0710                209          BEQ     DIVSW               Goes to divsw
00001120  B63C 000E                210          CMP.B   #$E,D3
00001124  6700 08EC                211          BEQ     LSLR                Goes to divsw
00001128                           212          
00001128  6000 1278                213          BRA     INVOPCODE
0000112C                           214  
0000112C                           215  MOVW
0000112C                           216          
0000112C                           217          
0000112C  E20A                     218          LSR.B   #1, D2
0000112E  13C2 0000258B            219          MOVE.B  D2, bit1
00001134                           220          
00001134  1416                     221          MOVE.B  (A6), D2
00001136  EB0A                     222          LSL.B   #5, D2
00001138  EA0A                     223          LSR.B   #5, D2
0000113A  13C2 0000258E            224          MOVE.B  D2, bit4
00001140                           225          
00001140  1416                     226          MOVE.B  (A6), D2
00001142  E50A                     227          LSL.B   #2, D2
00001144  EA0A                     228          LSR.B   #5, D2
00001146  13C2 0000258D            229          MOVE.B  D2, bit3
0000114C                           230          
0000114C  EF4E                     231          LSL.W   #7, D6
0000114E  E04E                     232          LSR.W   #8, D6 
00001150  EA4E                     233          LSR.W   #5, D6 
00001152  13C6 0000258C            234          MOVE.B  D6, bit2
00001158                           235  
00001158  0C39 0001 0000258C       236          CMP.B   #$1, bit2
00001160  6700 0056                237          BEQ     MOVEAW
00001164                           238  
00001164  43F9 00002510            239          LEA MMOVEW, A1
0000116A  103C 000E                240          MOVE.B  #14, D0
0000116E  4E4F                     241          TRAP    #15 
00001170                           242  
00001170  0C39 0000 0000258D       243          CMP.B   #$0, bit3           
00001178  6700 0446                244          BEQ     MOVBDN1
0000117C  0C39 0001 0000258D       245          CMP.B   #$1, bit3
00001184  6700 020A                246          BEQ     MOVEAN1
00001188  0C39 0002 0000258D       247          CMP.B   #$2, bit3
00001190  6700 0272                248          BEQ     MOVEIAN1
00001194  0C39 0003 0000258D       249          CMP.B   #$3, bit3
0000119C  6700 02F2                250          BEQ     MOVEIANI1
000011A0  0C39 0004 0000258D       251          CMP.B   #$4, bit3
000011A8  6700 037E                252          BEQ     MOVEIAND1
000011AC  0C39 0007 0000258D       253          CMP.B   #$7, bit3
000011B4  6700 01B6                254          BEQ     ADDIMD
000011B8                           255          
000011B8                           256          * Add INVOP 
000011B8                           257  MOVEAW
000011B8  43F9 0000251E            258          LEA MMOVEAW, A1
000011BE  103C 000E                259          MOVE.B  #14, D0
000011C2  4E4F                     260          TRAP    #15 
000011C4                           261          
000011C4  0C39 0000 0000258D       262          CMP.B   #$0, bit3           
000011CC  6700 03F2                263          BEQ     MOVBDN1
000011D0  0C39 0001 0000258D       264          CMP.B   #$1, bit3
000011D8  6700 01B6                265          BEQ     MOVEAN1
000011DC  0C39 0002 0000258D       266          CMP.B   #$2, bit3
000011E4  6700 021E                267          BEQ     MOVEIAN1
000011E8  0C39 0003 0000258D       268          CMP.B   #$3, bit3
000011F0  6700 029E                269          BEQ     MOVEIANI1
000011F4  0C39 0004 0000258D       270          CMP.B   #$4, bit3
000011FC  6700 032A                271          BEQ     MOVEIAND1
00001200  0C39 0007 0000258D       272          CMP.B   #$7, bit3
00001208  6700 0162                273          BEQ     ADDIMD
0000120C                           274  
0000120C                           275  MOVL
0000120C  E20A                     276          LSR.B   #1, D2
0000120E  13C2 0000258B            277          MOVE.B  D2, bit1
00001214                           278          
00001214  1416                     279          MOVE.B  (A6), D2
00001216  EB0A                     280          LSL.B   #5, D2
00001218  EA0A                     281          LSR.B   #5, D2
0000121A  13C2 0000258E            282          MOVE.B  D2, bit4
00001220                           283          
00001220  1416                     284          MOVE.B  (A6), D2
00001222  E50A                     285          LSL.B   #2, D2
00001224  EA0A                     286          LSR.B   #5, D2
00001226  13C2 0000258D            287          MOVE.B  D2, bit3
0000122C                           288          
0000122C  EF4E                     289          LSL.W   #7, D6
0000122E  E04E                     290          LSR.W   #8, D6 
00001230  EA4E                     291          LSR.W   #5, D6 
00001232  13C6 0000258C            292          MOVE.B  D6, bit2
00001238                           293          
00001238  0C39 0001 0000258C       294          CMP.B   #$1, bit2
00001240  6700 0056                295          BEQ     MOVEAL
00001244                           296  
00001244  43F9 00002517            297          LEA MMOVEL, A1
0000124A  103C 000E                298          MOVE.B  #14, D0
0000124E  4E4F                     299          TRAP    #15 
00001250                           300          
00001250  0C39 0000 0000258D       301          CMP.B   #$0, bit3           
00001258  6700 0366                302          BEQ     MOVBDN1
0000125C  0C39 0001 0000258D       303          CMP.B   #$1, bit3
00001264  6700 012A                304          BEQ     MOVEAN1
00001268  0C39 0002 0000258D       305          CMP.B   #$2, bit3
00001270  6700 0192                306          BEQ     MOVEIAN1
00001274  0C39 0003 0000258D       307          CMP.B   #$3, bit3
0000127C  6700 0212                308          BEQ     MOVEIANI1
00001280  0C39 0004 0000258D       309          CMP.B   #$4, bit3
00001288  6700 029E                310          BEQ     MOVEIAND1
0000128C  0C39 0007 0000258D       311          CMP.B   #$7, bit3
00001294  6700 00D6                312          BEQ     ADDIMD
00001298                           313          
00001298                           314  MOVEAL
00001298  43F9 00002526            315          LEA MMOVEAL, A1
0000129E  103C 000E                316          MOVE.B  #14, D0
000012A2  4E4F                     317          TRAP    #15 
000012A4                           318          
000012A4  0C39 0000 0000258D       319          CMP.B   #$0, bit3           
000012AC  6700 0312                320          BEQ     MOVBDN1
000012B0  0C39 0001 0000258D       321          CMP.B   #$1, bit3
000012B8  6700 00D6                322          BEQ     MOVEAN1
000012BC  0C39 0002 0000258D       323          CMP.B   #$2, bit3
000012C4  6700 013E                324          BEQ     MOVEIAN1
000012C8  0C39 0003 0000258D       325          CMP.B   #$3, bit3
000012D0  6700 01BE                326          BEQ     MOVEIANI1
000012D4  0C39 0004 0000258D       327          CMP.B   #$4, bit3
000012DC  6700 024A                328          BEQ     MOVEIAND1
000012E0  0C39 0007 0000258D       329          CMP.B   #$7, bit3
000012E8  6700 0082                330          BEQ     ADDIMD        
000012EC                           331  
000012EC                           332  MOVB
000012EC  43F9 00002509            333          LEA MMOVEB, A1
000012F2  103C 000E                334          MOVE.B  #14, D0
000012F6  4E4F                     335          TRAP    #15 
000012F8                           336          
000012F8  E20A                     337          LSR.B   #1, D2
000012FA  13C2 0000258B            338          MOVE.B  D2, bit1
00001300                           339          
00001300  1416                     340          MOVE.B  (A6), D2
00001302  EB0A                     341          LSL.B   #5, D2
00001304  EA0A                     342          LSR.B   #5, D2
00001306  13C2 0000258E            343          MOVE.B  D2, bit4
0000130C                           344          
0000130C  1416                     345          MOVE.B  (A6), D2
0000130E  E50A                     346          LSL.B   #2, D2
00001310  EA0A                     347          LSR.B   #5, D2
00001312  13C2 0000258D            348          MOVE.B  D2, bit3
00001318                           349          
00001318  EF4E                     350          LSL.W   #7, D6
0000131A  E04E                     351          LSR.W   #8, D6 
0000131C  EA4E                     352          LSR.W   #5, D6 
0000131E  13C6 0000258C            353          MOVE.B  D6, bit2
00001324                           354          
00001324  0C39 0000 0000258D       355          CMP.B   #$0, bit3           
0000132C  6700 0292                356          BEQ     MOVBDN1
00001330  0C39 0001 0000258D       357          CMP.B   #$1, bit3
00001338  6700 0056                358          BEQ     MOVEAN1
0000133C  0C39 0002 0000258D       359          CMP.B   #$2, bit3
00001344  6700 00BE                360          BEQ     MOVEIAN1
00001348  0C39 0003 0000258D       361          CMP.B   #$3, bit3
00001350  6700 013E                362          BEQ     MOVEIANI1
00001354  0C39 0004 0000258D       363          CMP.B   #$4, bit3
0000135C  6700 01CA                364          BEQ     MOVEIAND1
00001360  0C39 0007 0000258D       365          CMP.B   #$7, bit3
00001368  6700 0002                366          BEQ     ADDIMD
0000136C                           367  
0000136C                           368  ADDIMD
0000136C  0C39 0000 0000258E       369      CMP.B   #$0, bit4
00001374  6700 001A                370      BEQ     ADDIMD0
00001378  0C39 0001 0000258E       371      CMP.B   #$1, bit4
00001380  6700 000E                372      BEQ     ADDIMD1
00001384  0C39 0003 0000258E       373      CMP.B   #$3, bit4
0000138C  6700 0002                374      BEQ     ADDIMD3
00001390                           375  
00001390                           376  ADDIMD0
00001390                           377      * TODO 
00001390                           378  ADDIMD1 
00001390                           379      * TODO
00001390                           380  ADDIMD3
00001390                           381      * TODO    
00001390                           382  MOVEAN1
00001390  43F9 000024C1            383      LEA TAB, A1
00001396  103C 000E                384      MOVE.B  #14,D0
0000139A  4E4F                     385      TRAP    #15
0000139C                           386  
0000139C  43F9 000024D1            387      LEA DISPA,A1
000013A2  103C 000E                388      MOVE.B  #14,D0
000013A6  4E4F                     389      TRAP    #15
000013A8                           390      
000013A8  1239 0000258E            391      MOVE.B  bit4, D1
000013AE  103C 0003                392      MOVE.B  #3, D0
000013B2  4E4F                     393      TRAP    #15
000013B4                           394      
000013B4  43F9 000024C5            395      LEA COMMA, A1
000013BA  103C 000E                396      MOVE.B  #14,D0
000013BE  4E4F                     397      TRAP    #15
000013C0                           398      
000013C0  0C39 0000 0000258C       399      CMP.B   #$0,bit2
000013C8  6700 03AA                400      BEQ     MOVBDN2
000013CC  0C39 0001 0000258C       401      CMP.B   #$1,bit2
000013D4  6700 02BE                402      BEQ     MOVEAN2
000013D8  0C39 0002 0000258C       403      CMP.B   #$2, bit2 
000013E0  6700 02D2                404      BEQ     MOVIAN2
000013E4  0C39 0003 0000258C       405      CMP.B   #$3, bit2 
000013EC  6700 02FE                406      BEQ     MOVIANI2
000013F0  0C39 0004 0000258C       407      CMP.B   #$4, bit2 
000013F8  6700 0336                408      BEQ     MOVIAND2
000013FC  BA3C 0005                409      CMP.B   #$5, D5
00001400  6700 0372                410      BEQ     MOVBDN2
00001404                           411      
00001404                           412  MOVEIAN1
00001404  43F9 000024C1            413      LEA TAB, A1
0000140A  103C 000E                414      MOVE.B  #14,D0
0000140E  4E4F                     415      TRAP    #15
00001410                           416      
00001410  43F9 000024C7            417      LEA OPENBRA, A1
00001416  103C 000E                418      MOVE.B  #14,D0
0000141A  4E4F                     419      TRAP    #15
0000141C                           420  
0000141C  43F9 000024D1            421      LEA DISPA,A1
00001422  103C 000E                422      MOVE.B  #14,D0
00001426  4E4F                     423      TRAP    #15
00001428                           424      
00001428  1239 0000258E            425      MOVE.B  bit4, D1
0000142E  103C 0003                426      MOVE.B  #3, D0
00001432  4E4F                     427      TRAP    #15
00001434                           428      
00001434  43F9 000024C9            429      LEA CLOSEBRA, A1
0000143A  103C 000E                430      MOVE.B  #14,D0
0000143E  4E4F                     431      TRAP    #15
00001440                           432      
00001440  43F9 000024C5            433      LEA COMMA, A1
00001446  103C 000E                434      MOVE.B  #14,D0
0000144A  4E4F                     435      TRAP    #15
0000144C                           436      
0000144C  0C39 0000 0000258C       437      CMP.B   #$0,bit2
00001454  6700 031E                438      BEQ     MOVBDN2
00001458  0C39 0001 0000258C       439      CMP.B   #$1,bit2
00001460  6700 0232                440      BEQ     MOVEAN2
00001464  0C39 0002 0000258C       441      CMP.B   #$2, bit2 
0000146C  6700 0246                442      BEQ     MOVIAN2
00001470  0C39 0003 0000258C       443      CMP.B   #$3, bit2 
00001478  6700 0272                444      BEQ     MOVIANI2
0000147C  0C39 0004 0000258C       445      CMP.B   #$4, bit2 
00001484  6700 02AA                446      BEQ     MOVIAND2
00001488  BA3C 0005                447      CMP.B   #$5, D5
0000148C  6700 02E6                448      BEQ     MOVBDN2
00001490                           449  
00001490                           450  MOVEIANI1
00001490  43F9 000024C1            451      LEA TAB, A1
00001496  103C 000E                452      MOVE.B  #14,D0
0000149A  4E4F                     453      TRAP    #15
0000149C                           454      
0000149C  43F9 000024C7            455      LEA OPENBRA, A1
000014A2  103C 000E                456      MOVE.B  #14,D0
000014A6  4E4F                     457      TRAP    #15
000014A8                           458  
000014A8  43F9 000024D1            459      LEA DISPA,A1
000014AE  103C 000E                460      MOVE.B  #14,D0
000014B2  4E4F                     461      TRAP    #15
000014B4                           462      
000014B4  1239 0000258E            463      MOVE.B  bit4, D1
000014BA  103C 0003                464      MOVE.B  #3, D0
000014BE  4E4F                     465      TRAP    #15
000014C0                           466      
000014C0  43F9 000024C9            467      LEA CLOSEBRA, A1
000014C6  103C 000E                468      MOVE.B  #14,D0
000014CA  4E4F                     469      TRAP    #15
000014CC                           470      
000014CC  43F9 000024CB            471      LEA POS, A1
000014D2  103C 000E                472      MOVE.B  #14,D0
000014D6  4E4F                     473      TRAP    #15
000014D8                           474      
000014D8  43F9 000024C5            475      LEA COMMA, A1
000014DE  103C 000E                476      MOVE.B  #14,D0
000014E2  4E4F                     477      TRAP    #15
000014E4                           478      
000014E4  0C39 0000 0000258C       479      CMP.B   #$0,bit2
000014EC  6700 0286                480      BEQ     MOVBDN2
000014F0  0C39 0001 0000258C       481      CMP.B   #$1,bit2
000014F8  6700 019A                482      BEQ     MOVEAN2
000014FC  0C39 0002 0000258C       483      CMP.B   #$2, bit2 
00001504  6700 01AE                484      BEQ     MOVIAN2
00001508  0C39 0003 0000258C       485      CMP.B   #$3, bit2 
00001510  6700 01DA                486      BEQ     MOVIANI2
00001514  0C39 0004 0000258C       487      CMP.B   #$4, bit2 
0000151C  6700 0212                488      BEQ     MOVIAND2
00001520  BA3C 0005                489      CMP.B   #$5, D5
00001524  6700 024E                490      BEQ     MOVBDN2
00001528                           491  
00001528                           492  MOVEIAND1
00001528  43F9 000024C1            493      LEA TAB, A1
0000152E  103C 000E                494      MOVE.B  #14,D0
00001532  4E4F                     495      TRAP    #15
00001534                           496      
00001534  43F9 000024CD            497      LEA NEG, A1
0000153A  103C 000E                498      MOVE.B  #14,D0
0000153E  4E4F                     499      TRAP    #15
00001540                           500      
00001540  43F9 000024C7            501      LEA OPENBRA, A1
00001546  103C 000E                502      MOVE.B  #14,D0
0000154A  4E4F                     503      TRAP    #15
0000154C                           504  
0000154C  43F9 000024D1            505      LEA DISPA,A1
00001552  103C 000E                506      MOVE.B  #14,D0
00001556  4E4F                     507      TRAP    #15
00001558                           508      
00001558  1239 0000258E            509      MOVE.B  bit4, D1
0000155E  103C 0003                510      MOVE.B  #3, D0
00001562  4E4F                     511      TRAP    #15
00001564                           512      
00001564  43F9 000024C9            513      LEA CLOSEBRA, A1
0000156A  103C 000E                514      MOVE.B  #14,D0
0000156E  4E4F                     515      TRAP    #15
00001570                           516      
00001570  43F9 000024C5            517      LEA COMMA, A1
00001576  103C 000E                518      MOVE.B  #14,D0
0000157A  4E4F                     519      TRAP    #15
0000157C                           520      
0000157C  0C39 0000 0000258C       521      CMP.B   #$0,bit2
00001584  6700 01EE                522      BEQ     MOVBDN2
00001588  0C39 0001 0000258C       523      CMP.B   #$1,bit2
00001590  6700 0102                524      BEQ     MOVEAN2
00001594  0C39 0002 0000258C       525      CMP.B   #$2, bit2 
0000159C  6700 0116                526      BEQ     MOVIAN2
000015A0  0C39 0003 0000258C       527      CMP.B   #$3, bit2 
000015A8  6700 0142                528      BEQ     MOVIANI2
000015AC  0C39 0004 0000258C       529      CMP.B   #$4, bit2 
000015B4  6700 017A                530      BEQ     MOVIAND2
000015B8  BA3C 0005                531      CMP.B   #$5, D5
000015BC  6700 01B6                532      BEQ     MOVBDN2
000015C0                           533  
000015C0                           534  MOVBDN1
000015C0  43F9 000024C1            535      LEA TAB, A1
000015C6  103C 000E                536      MOVE.B  #14,D0
000015CA  4E4F                     537      TRAP    #15
000015CC                           538      
000015CC  BA3C 0006                539      CMP.B   #$6, D5             * Data Reg for LSLR
000015D0  6700 007A                540      BEQ     LSLRSRCD
000015D4                           541  
000015D4  43F9 000024D7            542      LEA DISPD, A1
000015DA  103C 000E                543      MOVE.B  #14,D0
000015DE  4E4F                     544      TRAP    #15
000015E0                           545      
000015E0  1239 0000258E            546      MOVE.B  bit4, D1
000015E6  103C 0003                547      MOVE.B  #3,D0
000015EA  4E4F                     548      TRAP    #15
000015EC                           549      
000015EC  BA3C 0004                550      CMP.B   #$4, D5
000015F0  6700 01AA                551      BEQ     ENDNLINC
000015F4                           552      
000015F4  43F9 000024C5            553      LEA COMMA, A1
000015FA  103C 000E                554      MOVE.B  #14,D0
000015FE  4E4F                     555      TRAP    #15
00001600                           556      
00001600  BA3C 0006                557      CMP.B   #$6, D5             * Data Reg for LSLR
00001604  6700 006E                558      BEQ     LSLRDESD
00001608  0C39 0000 0000258C       559      CMP.B   #$0,bit2
00001610  6700 0162                560      BEQ     MOVBDN2
00001614  0C39 0001 0000258C       561      CMP.B   #$1,bit2
0000161C  6700 0076                562      BEQ     MOVEAN2
00001620  0C39 0002 0000258C       563      CMP.B   #$2, bit2 
00001628  6700 008A                564      BEQ     MOVIAN2
0000162C  0C39 0003 0000258C       565      CMP.B   #$3, bit2 
00001634  6700 00B6                566      BEQ     MOVIANI2
00001638  0C39 0004 0000258C       567      CMP.B   #$4, bit2 
00001640  6700 00EE                568      BEQ     MOVIAND2
00001644  BA3C 0005                569      CMP.B   #$5, D5
00001648  6700 012A                570      BEQ     MOVBDN2
0000164C                           571      
0000164C                           572  LSLRSRCD
0000164C  43F9 000024D7            573      LEA DISPD, A1
00001652  103C 000E                574      MOVE.B  #14,D0
00001656  4E4F                     575      TRAP    #15
00001658                           576          
00001658  1239 0000258A            577      MOVE.B  bit0, D1
0000165E  103C 0003                578      MOVE.B  #3,D0
00001662  4E4F                     579      TRAP    #15    
00001664                           580  
00001664  43F9 000024C5            581      LEA COMMA, A1
0000166A  103C 000E                582      MOVE.B  #14,D0
0000166E  4E4F                     583      TRAP    #15  
00001670                           584      
00001670  6000 0002                585      BRA     LSLRDESD
00001674                           586      
00001674                           587  LSLRDESD
00001674  43F9 000024D7            588      LEA DISPD, A1
0000167A  103C 000E                589      MOVE.B  #14,D0
0000167E  4E4F                     590      TRAP    #15
00001680                           591          
00001680  1239 0000258E            592      MOVE.B  bit4, D1
00001686  103C 0003                593      MOVE.B  #3,D0
0000168A  4E4F                     594      TRAP    #15      
0000168C                           595      
0000168C  11DE 7500                596      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001690  6000 0D84                597      BRA     ENDNEWLINE       
00001694                           598  MOVEAN2
00001694  43F9 000024D1            599      LEA DISPA,A1
0000169A  103C 000E                600      MOVE.B  #14,D0
0000169E  4E4F                     601      TRAP    #15
000016A0                           602      
000016A0  1239 0000258B            603      MOVE.B  bit1, D1
000016A6  103C 0003                604      MOVE.B  #3, D0
000016AA  4E4F                     605      TRAP    #15
000016AC                           606  
000016AC  11DE 7500                607      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000016B0  6000 0D64                608      BRA     ENDNEWLINE    
000016B4                           609      
000016B4                           610  MOVIAN2
000016B4  43F9 000024C7            611      LEA OPENBRA, A1
000016BA  103C 000E                612      MOVE.B  #14,D0
000016BE  4E4F                     613      TRAP    #15
000016C0                           614  
000016C0  43F9 000024D1            615      LEA DISPA,A1
000016C6  103C 000E                616      MOVE.B  #14,D0
000016CA  4E4F                     617      TRAP    #15
000016CC                           618      
000016CC  1239 0000258B            619      MOVE.B  bit1, D1
000016D2  103C 0003                620      MOVE.B  #3, D0
000016D6  4E4F                     621      TRAP    #15
000016D8                           622      
000016D8  43F9 000024C9            623      LEA CLOSEBRA, A1
000016DE  103C 000E                624      MOVE.B  #14,D0
000016E2  4E4F                     625      TRAP    #15
000016E4                           626      
000016E4  11DE 7500                627      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000016E8  6000 0D2C                628      BRA     ENDNEWLINE
000016EC                           629  
000016EC                           630  MOVIANI2
000016EC  43F9 000024C7            631      LEA OPENBRA, A1
000016F2  103C 000E                632      MOVE.B  #14,D0
000016F6  4E4F                     633      TRAP    #15
000016F8                           634  
000016F8  43F9 000024D1            635      LEA DISPA,A1
000016FE  103C 000E                636      MOVE.B  #14,D0
00001702  4E4F                     637      TRAP    #15
00001704                           638      
00001704  1239 0000258B            639      MOVE.B  bit1, D1
0000170A  103C 0003                640      MOVE.B  #3, D0
0000170E  4E4F                     641      TRAP    #15
00001710                           642      
00001710  43F9 000024C9            643      LEA CLOSEBRA, A1
00001716  103C 000E                644      MOVE.B  #14,D0
0000171A  4E4F                     645      TRAP    #15
0000171C                           646      
0000171C  43F9 000024CB            647      LEA POS, A1
00001722  103C 000E                648      MOVE.B  #14,D0
00001726  4E4F                     649      TRAP    #15
00001728                           650      
00001728  11DE 7500                651      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
0000172C  6000 0CE8                652      BRA     ENDNEWLINE
00001730                           653  
00001730                           654  MOVIAND2
00001730  43F9 000024CD            655      LEA NEG, A1
00001736  103C 000E                656      MOVE.B  #14,D0
0000173A  4E4F                     657      TRAP    #15
0000173C                           658      
0000173C  43F9 000024C7            659      LEA OPENBRA, A1
00001742  103C 000E                660      MOVE.B  #14,D0
00001746  4E4F                     661      TRAP    #15
00001748                           662  
00001748  43F9 000024D1            663      LEA DISPA,A1
0000174E  103C 000E                664      MOVE.B  #14,D0
00001752  4E4F                     665      TRAP    #15
00001754                           666      
00001754  1239 0000258B            667      MOVE.B  bit1, D1
0000175A  103C 0003                668      MOVE.B  #3, D0
0000175E  4E4F                     669      TRAP    #15
00001760                           670      
00001760  43F9 000024C9            671      LEA CLOSEBRA, A1
00001766  103C 000E                672      MOVE.B  #14,D0
0000176A  4E4F                     673      TRAP    #15
0000176C                           674  
0000176C  11DE 7500                675      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001770  6000 0CA4                676      BRA     ENDNEWLINE
00001774                           677  
00001774                           678  MOVBDN2
00001774  43F9 000024D7            679      LEA DISPD, A1
0000177A  103C 000E                680      MOVE.B  #14,D0
0000177E  4E4F                     681      TRAP    #15
00001780                           682          
00001780  1239 0000258B            683      MOVE.B  bit1, D1
00001786  103C 0003                684      MOVE.B  #3,D0
0000178A  4E4F                     685      TRAP    #15   
0000178C                           686      
0000178C  B83C 0000                687      CMP.B   #$0, D4                 * MULS meaning that A6 has already been incremented 
00001790  6700 0C84                688      BEQ     ENDNEWLINE
00001794                           689      
00001794  11DE 7500                690      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001798  6000 0C7C                691      BRA     ENDNEWLINE
0000179C                           692      
0000179C                           693  ENDNLINC
0000179C  11DE 7500                694      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000017A0  6000 0C74                695      BRA     ENDNEWLINE    
000017A4                           696      
000017A4                           697  MULSW
000017A4  1407                     698          MOVE.B  D7, D2
000017A6  EB0A                     699          LSL.B   #5, D2
000017A8  EA0A                     700          LSR.B   #5, D2
000017AA  13C2 0000258E            701          MOVE.B  D2, bit4
000017B0                           702          
000017B0  1407                     703          MOVE.B  D7, D2
000017B2  E50A                     704          LSL.B   #2, D2
000017B4  EA0A                     705          LSR.B   #5, D2
000017B6  13C2 0000258D            706          MOVE.B  D2, bit3
000017BC                           707          
000017BC  3C07                     708          MOVE.W  D7, D6
000017BE  EF4E                     709          LSL.W   #7, D6
000017C0  E04E                     710          LSR.W   #8, D6 
000017C2  EA4E                     711          LSR.W   #5, D6 
000017C4  13C6 0000258C            712          MOVE.B  D6, bit2
000017CA                           713          
000017CA  E94F                     714          LSL.W   #4, D7
000017CC  E04F                     715          LSR.W   #8, D7 
000017CE  EA4F                     716          LSR.W   #5, D7 
000017D0  13C7 0000258B            717          MOVE.B  D7, bit1
000017D6                           718          
000017D6  43F9 00002502            719          LEA MMULSW, A1
000017DC  323C 000E                720          MOVE    #14, D1
000017E0  4E4F                     721          TRAP    #15
000017E2                           722          
000017E2  1A3C 0005                723          MOVE.B  #$5, D5 
000017E6                           724          
000017E6  0C39 0000 0000258D       725          CMP.B   #$0, bit3           
000017EE  6700 FDD0                726          BEQ     MOVBDN1
000017F2  0C39 0001 0000258D       727          CMP.B   #$1, bit3
000017FA  6700 FB94                728          BEQ     MOVEAN1
000017FE  0C39 0002 0000258D       729          CMP.B   #$2, bit3
00001806  6700 FBFC                730          BEQ     MOVEIAN1
0000180A  0C39 0003 0000258D       731          CMP.B   #$3, bit3
00001812  6700 FC7C                732          BEQ     MOVEIANI1
00001816  0C39 0004 0000258D       733          CMP.B   #$4, bit3
0000181E  6700 FD08                734          BEQ     MOVEIAND1
00001822  0C39 0007 0000258D       735          CMP.B   #$7, bit3
0000182A  6700 FB40                736          BEQ     ADDIMD
0000182E                           737  
0000182E                           738           
0000182E                           739  DIVSW               
0000182E  1406                     740          MOVE.B  D6, D2
00001830  EB0A                     741          LSL.B   #5, D2
00001832  EA0A                     742          LSR.B   #5, D2
00001834  13C2 0000258E            743          MOVE.B  D2, bit4
0000183A                           744          
0000183A  1406                     745          MOVE.B  D6, D2
0000183C  E50A                     746          LSL.B   #2, D2
0000183E  EA0A                     747          LSR.B   #5, D2
00001840  13C2 0000258D            748          MOVE.B  D2, bit3
00001846                           749          
00001846  3E06                     750          MOVE.W  D6, D7
00001848  EF4F                     751          LSL.W   #7, D7
0000184A  E04F                     752          LSR.W   #8, D7 
0000184C  EA4F                     753          LSR.W   #5, D7 
0000184E  13C7 0000258C            754          MOVE.B  D7, bit2
00001854                           755          
00001854  E94E                     756          LSL.W   #4, D6
00001856  E04E                     757          LSR.W   #8, D6 
00001858  EA4E                     758          LSR.W   #5, D6 
0000185A  13C6 0000258B            759          MOVE.B  D6, bit1
00001860                           760          
00001860  43F9 000024FB            761          LEA MMDIVSW, A1
00001866  323C 000E                762          MOVE    #14, D1
0000186A  4E4F                     763          TRAP    #15
0000186C                           764          
0000186C  1A3C 0005                765          MOVE.B  #$5, D5 
00001870  183C 0004                766          MOVE.B  #$4, D4
00001874                           767          
00001874  0C39 0000 0000258D       768          CMP.B   #$0, bit3           
0000187C  6700 FD42                769          BEQ     MOVBDN1
00001880  0C39 0001 0000258D       770          CMP.B   #$1, bit3
00001888  6700 FB06                771          BEQ     MOVEAN1
0000188C  0C39 0002 0000258D       772          CMP.B   #$2, bit3
00001894  6700 FB6E                773          BEQ     MOVEIAN1
00001898  0C39 0003 0000258D       774          CMP.B   #$3, bit3
000018A0  6700 FBEE                775          BEQ     MOVEIANI1
000018A4  0C39 0004 0000258D       776          CMP.B   #$4, bit3
000018AC  6700 FC7A                777          BEQ     MOVEIAND1
000018B0  0C39 0007 0000258D       778          CMP.B   #$7, bit3
000018B8  6700 FAB2                779          BEQ     ADDIMD
000018BC                           780  
000018BC                           781  NEGW
000018BC  1406                     782          MOVE.B  D6, D2
000018BE  EB0A                     783          LSL.B   #5, D2
000018C0  EA0A                     784          LSR.B   #5, D2
000018C2  13C2 0000258E            785          MOVE.B  D2, bit4
000018C8                           786          
000018C8  1406                     787          MOVE.B  D6, D2
000018CA  E50A                     788          LSL.B   #2, D2
000018CC  EA0A                     789          LSR.B   #5, D2
000018CE  13C2 0000258D            790          MOVE.B  D2, bit3
000018D4                           791          
000018D4  3E06                     792          MOVE.W  D6, D7
000018D6  E14F                     793          LSL.W   #8, D7
000018D8  E04F                     794          LSR.W   #8, D7 
000018DA  EC4F                     795          LSR.W   #6, D7 
000018DC  13C7 0000258C            796          MOVE.B  D7, bit2
000018E2                           797          
000018E2  43F9 000024F6            798          LEA MMNEGW, A1
000018E8  323C 000E                799          MOVE    #14, D1
000018EC  4E4F                     800          TRAP    #15
000018EE                           801          
000018EE  1A3C 0004                802          MOVE.B  #$4, D5
000018F2                           803          
000018F2  0C39 0000 0000258C       804          CMP.B   #$0, bit2
000018FA  6700 001A                805          BEQ     PRINTBYTE
000018FE  0C39 0001 0000258C       806          CMP.B   #$1, bit2
00001906  6700 0062                807          BEQ     PRINTWORD
0000190A  0C39 0002 0000258C       808          CMP.B   #$2, bit2
00001912  6700 00AA                809          BEQ     PRINTLONG
00001916                           810          
00001916                           811  PRINTBYTE
00001916  43F9 000024DF            812      LEA MBYTE, A1
0000191C  323C 000E                813      MOVE    #14, D1
00001920  4E4F                     814      TRAP    #15
00001922                           815  
00001922  0C39 0000 0000258D       816      CMP.B   #$0, bit3           
0000192A  6700 FC94                817          BEQ     MOVBDN1
0000192E  0C39 0001 0000258D       818          CMP.B   #$1, bit3
00001936  6700 FA58                819          BEQ     MOVEAN1
0000193A  0C39 0002 0000258D       820          CMP.B   #$2, bit3
00001942  6700 FAC0                821          BEQ     MOVEIAN1
00001946  0C39 0003 0000258D       822          CMP.B   #$3, bit3
0000194E  6700 FB40                823          BEQ     MOVEIANI1
00001952  0C39 0004 0000258D       824          CMP.B   #$4, bit3
0000195A  6700 FBCC                825          BEQ     MOVEIAND1
0000195E  0C39 0007 0000258D       826          CMP.B   #$7, bit3
00001966  6700 FA04                827          BEQ     ADDIMD
0000196A                           828      
0000196A                           829  PRINTWORD
0000196A  43F9 000024E2            830      LEA MWORD, A1
00001970  323C 000E                831      MOVE    #14, D1
00001974  4E4F                     832      TRAP    #15
00001976                           833  
00001976  0C39 0000 0000258D       834      CMP.B   #$0, bit3           
0000197E  6700 FC40                835          BEQ     MOVBDN1
00001982  0C39 0001 0000258D       836          CMP.B   #$1, bit3
0000198A  6700 FA04                837          BEQ     MOVEAN1
0000198E  0C39 0002 0000258D       838          CMP.B   #$2, bit3
00001996  6700 FA6C                839          BEQ     MOVEIAN1
0000199A  0C39 0003 0000258D       840          CMP.B   #$3, bit3
000019A2  6700 FAEC                841          BEQ     MOVEIANI1
000019A6  0C39 0004 0000258D       842          CMP.B   #$4, bit3
000019AE  6700 FB78                843          BEQ     MOVEIAND1
000019B2  0C39 0007 0000258D       844          CMP.B   #$7, bit3
000019BA  6700 F9B0                845          BEQ     ADDIMD
000019BE                           846      
000019BE                           847  PRINTLONG
000019BE  43F9 000024E5            848      LEA MLONG, A1
000019C4  323C 000E                849      MOVE    #14, D1
000019C8  4E4F                     850      TRAP    #15
000019CA                           851   
000019CA  0C39 0000 0000258D       852      CMP.B   #$0, bit3           
000019D2  6700 FBEC                853          BEQ     MOVBDN1
000019D6  0C39 0001 0000258D       854          CMP.B   #$1, bit3
000019DE  6700 F9B0                855          BEQ     MOVEAN1
000019E2  0C39 0002 0000258D       856          CMP.B   #$2, bit3
000019EA  6700 FA18                857          BEQ     MOVEIAN1
000019EE  0C39 0003 0000258D       858          CMP.B   #$3, bit3
000019F6  6700 FA98                859          BEQ     MOVEIANI1
000019FA  0C39 0004 0000258D       860          CMP.B   #$4, bit3
00001A02  6700 FB24                861          BEQ     MOVEIAND1
00001A06  0C39 0007 0000258D       862          CMP.B   #$7, bit3
00001A0E  6700 F95C                863          BEQ     ADDIMD
00001A12                           864          
00001A12                           865  LSLR                
00001A12  1406                     866          MOVE.B  D6, D2
00001A14  EB0A                     867          LSL.B   #5, D2
00001A16  EA0A                     868          LSR.B   #5, D2
00001A18  13C2 0000258E            869          MOVE.B  D2, bit4
00001A1E                           870          
00001A1E  1406                     871          MOVE.B  D6, D2
00001A20  E50A                     872          LSL.B   #2, D2
00001A22  EE0A                     873          LSR.B   #7, D2
00001A24  13C2 0000258D            874          MOVE.B  D2, bit3
00001A2A                           875          
00001A2A  3E06                     876          MOVE.W  D6, D7
00001A2C  E14F                     877          LSL.W   #8, D7
00001A2E  E04F                     878          LSR.W   #8, D7 
00001A30  EC4F                     879          LSR.W   #6, D7 
00001A32  13C7 0000258C            880          MOVE.B  D7, bit2
00001A38                           881          
00001A38  3E06                     882          MOVE.W  D6, D7
00001A3A  EF4F                     883          LSL.W   #7, D7
00001A3C  E04F                     884          LSR.W   #8, D7 
00001A3E  EE4F                     885          LSR.W   #7, D7
00001A40  13C7 0000258B            886          MOVE.B  D7, bit1   
00001A46                           887      
00001A46  E94E                     888          LSL.W   #4, D6
00001A48  E04E                     889          LSR.W   #8, D6 
00001A4A  EA4E                     890          LSR.W   #5, D6
00001A4C  13C6 0000258A            891          MOVE.B  D6, bit0 
00001A52                           892          
00001A52  0C39 0001 0000258B       893          CMP.B   #$1, bit1
00001A5A  6700 000E                894          BEQ     PRINTLSL
00001A5E  0C39 0000 0000258B       895          CMP.B   #$0, bit1
00001A66  6700 00DE                896          BEQ     PRINTLSR
00001A6A                           897          
00001A6A                           898  PRINTLSL
00001A6A  43F9 000024EC            899          LEA MLSL, A1
00001A70  303C 000E                900          MOVE    #14,D0
00001A74  4E4F                     901          TRAP    #15
00001A76                           902          
00001A76  0C39 0000 0000258C       903          CMP.B   #$0, bit2
00001A7E  6700 001A                904          BEQ     PRINTB
00001A82  0C39 0001 0000258C       905          CMP.B   #$1, bit2
00001A8A  6700 0036                906          BEQ     PRINTW
00001A8E  0C39 0002 0000258C       907          CMP.B   #$2, bit2
00001A96  6700 0052                908          BEQ     PRINTL
00001A9A                           909          
00001A9A                           910  PRINTB
00001A9A  43F9 000024DF            911          LEA MBYTE,  A1
00001AA0  303C 000E                912          MOVE    #14, D0
00001AA4  4E4F                     913          TRAP    #15
00001AA6                           914          
00001AA6  3A3C 0006                915          MOVE #$6, D5
00001AAA                           916          
00001AAA  0C39 0000 0000258D       917          CMP.B   #0, bit3
00001AB2  6700 005E                918          BEQ     PRINTLSLRCOUNT
00001AB6  0C39 0001 0000258D       919          CMP.B   #1, bit3
00001ABE  6700 FB00                920          BEQ     MOVBDN1
00001AC2                           921  
00001AC2                           922  PRINTW 
00001AC2  43F9 000024E2            923          LEA MWORD, A1
00001AC8  303C 000E                924          MOVE    #14, D0
00001ACC  4E4F                     925          TRAP    #15
00001ACE                           926          
00001ACE  3A3C 0006                927          MOVE #$6, D5
00001AD2                           928          
00001AD2  0C39 0000 0000258D       929          CMP.B   #0, bit3
00001ADA  6700 0036                930          BEQ     PRINTLSLRCOUNT
00001ADE  0C39 0001 0000258D       931          CMP.B   #1, bit3
00001AE6  6700 FAD8                932          BEQ     MOVBDN1
00001AEA                           933  
00001AEA                           934  PRINTL
00001AEA  43F9 000024E5            935          LEA MLONG, A1
00001AF0  303C 000E                936          MOVE    #14, D0
00001AF4  4E4F                     937          TRAP    #15
00001AF6                           938  
00001AF6  3A3C 0006                939          MOVE #$6, D5
00001AFA                           940          
00001AFA  0C39 0000 0000258D       941          CMP.B   #0, bit3
00001B02  6700 000E                942          BEQ     PRINTLSLRCOUNT
00001B06  0C39 0001 0000258D       943          CMP.B   #1, bit3
00001B0E  6700 FAB0                944          BEQ     MOVBDN1    
00001B12                           945  
00001B12                           946  PRINTLSLRCOUNT
00001B12  43F9 000024C1            947          LEA TAB, A1
00001B18  303C 000E                948          MOVE    #14,D0
00001B1C  4E4F                     949          TRAP    #15
00001B1E                           950          
00001B1E  45F9 000024CF            951          LEA HASH, A2
00001B24  303C 000E                952          MOVE    #14,D0
00001B28  4E4F                     953          TRAP    #15
00001B2A                           954          
00001B2A  1239 0000258A            955          MOVE.B  bit0, D1
00001B30  303C 0003                956          MOVE    #3,D0
00001B34  4E4F                     957          TRAP    #15
00001B36                           958          
00001B36  43F9 000024C5            959          LEA COMMA, A1
00001B3C  303C 000E                960          MOVE    #14,D0
00001B40  4E4F                     961          TRAP    #15
00001B42                           962          
00001B42  6000 FB30                963          BRA LSLRDESD
00001B46                           964    
00001B46                           965  PRINTLSR
00001B46  43F9 000024F1            966          LEA MLSR, A1
00001B4C  323C 000E                967          MOVE    #14,D1
00001B50  4E4F                     968          TRAP    #15
00001B52                           969          
00001B52  0C39 0000 0000258C       970          CMP.B   #$0, bit2
00001B5A  6700 FF3E                971          BEQ     PRINTB
00001B5E  0C39 0001 0000258C       972          CMP.B   #$1, bit2
00001B66  6700 FF5A                973          BEQ     PRINTW
00001B6A  0C39 0002 0000258C       974          CMP.B   #$2, bit2
00001B72  6700 FF76                975          BEQ     PRINTL
00001B76                           976  ******************************************************************************************************
00001B76                           977  *   Immediate data arithmetic operations
00001B76                           978  *   SUBI
00001B76                           979  
00001B76  13C5 0000258B            980  IMD     MOVE.B  D5,bit1
00001B7C  141E                     981          MOVE.B  (A6)+,D2
00001B7E                           982  
00001B7E  DE02                     983          ADD.B   D2,D7
00001B80                           984  
00001B80  1602                     985          MOVE.B  D2,D3               Copies data at D2 to D3
00001B82                           986          *   this gets digit in 10's place
00001B82  E80B                     987          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001B84                           988          *   this gets digit in 1's place
00001B84  E90A                     989          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001B86  E80A                     990          LSR.B   #4,D2               Shifts back right into 1's place
00001B88                           991  
00001B88                           992          *   D3 holds digit in 10's place
00001B88                           993          *   D2 holds digit in 1's place
00001B88                           994  
00001B88  E20B                     995          LSR.B   #1,D3
00001B8A  6400 0004                996          BCC     IMD2
00001B8E  5404                     997          ADD.B   #$2,D4
00001B90  E20B                     998  IMD2    LSR.B   #1,D3
00001B92  6400 0004                999          BCC     IMD3
00001B96  5804                    1000          ADD.B   #$4,D4
00001B98  B43C 0007               1001  IMD3    CMP.B   #$7,D2
00001B9C  6D00 0006               1002          BLT     IMD4
00001BA0  5204                    1003          ADD.B   #$1,D4
00001BA2  5102                    1004          SUB.B   #$8,D2
00001BA4                          1005  
00001BA4                          1006          *   Stores them into addr
00001BA4  13C3 0000258C           1007  IMD4    MOVE.B  D3,bit2
00001BAA  13C4 0000258D           1008          MOVE.B  D4,bit3
00001BB0  13C2 0000258E           1009          MOVE.B  D2,bit4
00001BB6                          1010  
00001BB6                          1011  **************************
00001BB6                          1012  * This finds the size of the operation
00001BB6                          1013  
00001BB6  0C39 0000 0000258C      1014          CMP.B   #$0,bit2
00001BBE  6700 0068               1015          BEQ     IMDBYTE
00001BC2  0C39 0001 0000258C      1016          CMP.B   #$1,bit2
00001BCA  6700 006C               1017          BEQ     IMDWORD
00001BCE  0C39 0002 0000258C      1018          CMP.B   #$2,bit2
00001BD6  6700 006E               1019          BEQ     IMDLONG
00001BDA  6000 07C8               1020          BRA     INVOP
00001BDE                          1021  
00001BDE                          1022  *************************************************************
00001BDE                          1023  * Display IMD op-code
00001BDE                          1024  IMDPRINT
00001BDE  0C39 0000 0000258B      1025          CMP.B   #$0,bit1
00001BE6  6700 001A               1026          BEQ     IMDPRINTORI
00001BEA  0C39 0004 0000258B      1027          CMP.B   #$4,bit1
00001BF2  6700 0018               1028          BEQ     IMDPRINTSUBI
00001BF6  0C39 0006 0000258B      1029          CMP.B   #$6,bit1
00001BFE  6700 0016               1030          BEQ     IMDPRINTNOT
00001C02                          1031  
00001C02                          1032  IMDPRINTORI
00001C02  43F9 0000254E           1033          LEA     MORI,A1
00001C08  6000 0016               1034          BRA     IMDPRINTEND
00001C0C                          1035  
00001C0C                          1036  IMDPRINTSUBI
00001C0C  43F9 00002548           1037          LEA     MSUBI,A1
00001C12  6000 000C               1038          BRA     IMDPRINTEND
00001C16                          1039  
00001C16                          1040  * NOT isn't part of immediate operation, but they share similar structure so I put it here too
00001C16                          1041  IMDPRINTNOT
00001C16  43F9 00002553           1042          LEA     MNOT,A1
00001C1C  6000 0002               1043          BRA     IMDPRINTEND
00001C20                          1044  
00001C20                          1045  IMDPRINTEND
00001C20  103C 000E               1046          MOVE.B  #14,D0
00001C24  4E4F                    1047          TRAP    #15
00001C26  4E75                    1048          RTS
00001C28                          1049  
00001C28                          1050  *************************************************************
00001C28                          1051  * Immediate data operation size BYTE
00001C28                          1052  IMDBYTE
00001C28  61B4                    1053          BSR     IMDPRINT
00001C2A  43F9 000024DF           1054          LEA     MBYTE,A1
00001C30                          1055  
00001C30                          1056          * Moves size to D4, needed to use DISPEA
00001C30  183C 0001               1057          MOVE.B  #$1,D4
00001C34  6000 001A               1058          BRA     IMDEA
00001C38                          1059  
00001C38                          1060  *************************************************************
00001C38                          1061  * Immediate data operation size WORD
00001C38                          1062  IMDWORD
00001C38  61A4                    1063          BSR     IMDPRINT
00001C3A  43F9 000024E2           1064          LEA     MWORD,A1
00001C40                          1065  
00001C40  1803                    1066          MOVE.B  D3,D4
00001C42  6000 000C               1067          BRA     IMDEA
00001C46                          1068  
00001C46                          1069  
00001C46                          1070  *************************************************************
00001C46                          1071  * Immediate data operation size LONG
00001C46                          1072  IMDLONG
00001C46  6196                    1073          BSR     IMDPRINT
00001C48  43F9 000024E5           1074          LEA     MLONG,A1
00001C4E                          1075          
00001C4E                          1076  
00001C4E                          1077          * Moves size to D4, needed to use DISPEA
00001C4E  1803                    1078          MOVE.B  D3,D4
00001C50                          1079  
00001C50                          1080  IMDEA
00001C50                          1081          * This prints out the size and creates tab
00001C50  103C 000E               1082          MOVE.B  #14,D0
00001C54  4E4F                    1083          TRAP    #15
00001C56  43F9 000024C1           1084          LEA     TAB,A1
00001C5C  103C 000E               1085          MOVE.B  #14,D0
00001C60  4E4F                    1086          TRAP    #15
00001C62                          1087          * Loads return address into A2
00001C62  45F9 00001C6C           1088          LEA     IMDEA2,A2
00001C68  6000 06D2               1089          BRA     DISPEA
00001C6C                          1090  IMDEA2
00001C6C  43F9 000024C5           1091          LEA     COMMA,A1
00001C72  103C 000E               1092          MOVE.B  #14,D0
00001C76  4E4F                    1093          TRAP    #15
00001C78                          1094  
00001C78  45F9 00001C82           1095          LEA     IMDEA3,A2
00001C7E  6000 056C               1096          BRA     SUBEA
00001C82                          1097  IMDEA3
00001C82  6000 0792               1098          BRA     ENDNEWLINE
00001C86                          1099  
00001C86                          1100  ******************************************************************************************************
00001C86                          1101  * Miscellaneous section
00001C86                          1102  *   Not goes here
00001C86                          1103  
00001C86                          1104  MISC
00001C86  B43C 0004               1105          CMP.B   #$4, D2
00001C8A  6700 FC30               1106          BEQ     NEGW
00001C8E  13C5 0000258B           1107          MOVE.B  D5,bit1
00001C94  141E                    1108          MOVE.B  (A6)+,D2
00001C96                          1109  
00001C96  DE02                    1110          ADD.B   D2,D7
00001C98                          1111  
00001C98  1602                    1112          MOVE.B  D2,D3               Copies data at D2 to D3
00001C9A                          1113          *   this gets digit in 10's place
00001C9A  E80B                    1114          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001C9C                          1115          *   this gets digit in 1's place
00001C9C  E90A                    1116          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001C9E  E80A                    1117          LSR.B   #4,D2               Shifts back right into 1's place
00001CA0                          1118  
00001CA0                          1119          *   D3 holds digit in 10's place
00001CA0                          1120          *   D2 holds digit in 1's place
00001CA0                          1121  
00001CA0  E20B                    1122          LSR.B   #1,D3
00001CA2  6400 0004               1123          BCC     MISC2
00001CA6  5404                    1124          ADD.B   #$2,D4
00001CA8  E20B                    1125  MISC2   LSR.B   #1,D3
00001CAA  6400 0004               1126          BCC     MISC3
00001CAE  5804                    1127          ADD.B   #$4,D4
00001CB0  B43C 0007               1128  MISC3   CMP.B   #$7,D2
00001CB4  6D00 0006               1129          BLT     MISC4
00001CB8  5204                    1130          ADD.B   #$1,D4
00001CBA  5102                    1131          SUB.B   #$8,D2
00001CBC                          1132  
00001CBC                          1133          *   Stores them into addr
00001CBC  13C3 0000258C           1134  MISC4   MOVE.B  D3,bit2
00001CC2  13C4 0000258D           1135          MOVE.B  D4,bit3
00001CC8  13C2 0000258E           1136          MOVE.B  D2,bit4
00001CCE                          1137  
00001CCE                          1138  **************************
00001CCE                          1139  * This finds the size of the operation
00001CCE                          1140  
00001CCE  0C39 0006 0000258B      1141          CMP.B   #$6,bit1
00001CD6  6700 0006               1142          BEQ     MISCNOT
00001CDA  6000 06C8               1143          BRA     INVOP
00001CDE                          1144  
00001CDE                          1145  ******************************************************
00001CDE                          1146  * NOT
00001CDE                          1147  * Reuses some of IMD section to display because they have similar format
00001CDE                          1148  *  (I was kinda lazy too)
00001CDE                          1149  MISCNOT
00001CDE  0C39 0000 0000258C      1150          CMP.B   #$0,bit2
00001CE6  6700 001A               1151          BEQ     MISCBYTE
00001CEA  0C39 0001 0000258C      1152          CMP.B   #$1,bit2
00001CF2  6700 0020               1153          BEQ     MISCWORD
00001CF6  0C39 0002 0000258C      1154          CMP.B   #$2,bit2
00001CFE  6700 0024               1155          BEQ     MISCLONG
00001D02                          1156  
00001D02                          1157  *************************************************************
00001D02                          1158  * Immediate data operation size BYTE
00001D02                          1159  MISCBYTE
00001D02  6100 FEDA               1160          BSR     IMDPRINT
00001D06  43F9 000024DF           1161          LEA     MBYTE,A1
00001D0C                          1162  
00001D0C                          1163          * Moves size to D4, needed to use DISPEA
00001D0C  183C 0001               1164          MOVE.B  #$1,D4
00001D10  6000 001E               1165          BRA     MISCEA
00001D14                          1166  
00001D14                          1167  *************************************************************
00001D14                          1168  * Immediate data operation size WORD
00001D14                          1169  MISCWORD
00001D14  6100 FEC8               1170          BSR     IMDPRINT
00001D18  43F9 000024E2           1171          LEA     MWORD,A1
00001D1E                          1172  
00001D1E  1803                    1173          MOVE.B  D3,D4
00001D20  6000 000E               1174          BRA     MISCEA
00001D24                          1175  
00001D24                          1176  
00001D24                          1177  *************************************************************
00001D24                          1178  * Immediate data operation size LONG
00001D24                          1179  MISCLONG
00001D24  6100 FEB8               1180          BSR     IMDPRINT
00001D28  43F9 000024E5           1181          LEA     MLONG,A1
00001D2E                          1182  
00001D2E                          1183          * Moves size to D4, needed to use DISPEA
00001D2E  1803                    1184          MOVE.B  D3,D4
00001D30                          1185  
00001D30                          1186  MISCEA
00001D30  103C 000E               1187          MOVE.B  #14,D0
00001D34  4E4F                    1188          TRAP    #15
00001D36  43F9 000024C1           1189          LEA     TAB,A1
00001D3C  103C 000E               1190          MOVE.B  #14,D0
00001D40  4E4F                    1191          TRAP    #15
00001D42                          1192  
00001D42  45F9 00001D4C           1193          LEA     MISCEA2,A2
00001D48  6000 04A2               1194          BRA     SUBEA
00001D4C                          1195  MISCEA2
00001D4C  6000 06C8               1196          BRA     ENDNEWLINE
00001D50                          1197  
00001D50                          1198  
00001D50                          1199  ******************************************************************************************************
00001D50                          1200  * SUB section
00001D50                          1201  
00001D50                          1202          *   Grabs next two nibbles
00001D50  141E                    1203  SUB     MOVE.B  (A6)+,D2
00001D52                          1204  
00001D52  DE02                    1205          ADD.B   D2,D7
00001D54                          1206  
00001D54  1602                    1207          MOVE.B  D2,D3               Copies data at D2 to D3
00001D56                          1208          *   this gets digit in 10's place
00001D56  E80B                    1209          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001D58                          1210          *   this gets digit in 1's place
00001D58  E90A                    1211          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001D5A  E80A                    1212          LSR.B   #4,D2               Shifts back right into 1's place
00001D5C                          1213  
00001D5C                          1214          *   D3 holds digit in 10's place
00001D5C                          1215          *   D2 holds digit in 1's place
00001D5C                          1216  
00001D5C                          1217          
00001D5C                          1218          *   Converts nibble into 3-bit parts
00001D5C  E20B                    1219          LSR.B   #1,D3
00001D5E  6400 0004               1220          BCC     SUB2
00001D62  5404                    1221          ADD.B   #$2,D4
00001D64                          1222          
00001D64  E20B                    1223  SUB2    LSR.B   #1,D3
00001D66  6400 0004               1224          BCC     SUB3
00001D6A  5804                    1225          ADD.B   #$4,D4
00001D6C                          1226          
00001D6C  1205                    1227  SUB3    MOVE.B  D5,D1
00001D6E  E209                    1228          LSR.B   #1,D1
00001D70  6400 0004               1229          BCC     SUB4
00001D74  5803                    1230          ADD.B   #$4,D3
00001D76                          1231  
00001D76  B43C 0007               1232  SUB4    CMP.B   #$7,D2
00001D7A  6D00 0006               1233          BLT     SUB1
00001D7E  5204                    1234          ADD.B   #$1,D4
00001D80  5102                    1235          SUB.B   #$8,D2
00001D82                          1236  
00001D82                          1237          *   Stores them into addr
00001D82  13C1 0000258B           1238  SUB1    MOVE.B  D1,bit1
00001D88  13C3 0000258C           1239          MOVE.B  D3,bit2
00001D8E  13C4 0000258D           1240          MOVE.B  D4,bit3
00001D94  13C2 0000258E           1241          MOVE.B  D2,bit4
00001D9A                          1242  
00001D9A                          1243          * do this later
00001D9A  4241                    1244          CLR     D1
00001D9C  7400                    1245          MOVE.L  #0,D2
00001D9E  7600                    1246          MOVE.L  #0,D3
00001DA0  7800                    1247          MOVE.L  #0,D4
00001DA2  7A00                    1248          MOVE.L  #0,D5
00001DA4  7C00                    1249          MOVE.L  #0,D6
00001DA6                          1250  
00001DA6                          1251          
00001DA6                          1252  ******************************************************************************************************
00001DA6                          1253  * After spliting the op-code into SUB's defined groupings
00001DA6                          1254  *   This figures out which operation it is and goes to that sub-routine
00001DA6                          1255  
00001DA6                          1256          * This will display SUBA instead  -- check this later
00001DA6  0C39 0003 0000258C      1257          CMP.B   #$3,bit2
00001DAE  6700 01E6               1258          BEQ     SUBA
00001DB2  0C39 0007 0000258C      1259          CMP.B   #$7,bit2
00001DBA  6700 F9E8               1260          BEQ     MULSW
00001DBE                          1261  
00001DBE                          1262  
00001DBE                          1263          * This will find the size and stuff
00001DBE  0C39 0000 0000258C      1264          CMP.B   #$0,bit2
00001DC6  6700 003E               1265          BEQ     SUBSIZE1
00001DCA  0C39 0001 0000258C      1266          CMP.B   #$1,bit2
00001DD2  6700 0072               1267          BEQ     SUBSIZE2
00001DD6  0C39 0002 0000258C      1268          CMP.B   #$2,bit2
00001DDE  6700 00A6               1269          BEQ     SUBSIZE3
00001DE2  0C39 0004 0000258C      1270          CMP.B   #$4,bit2
00001DEA  6700 00DA               1271          BEQ     SUBSIZE4
00001DEE  0C39 0005 0000258C      1272          CMP.B   #$5,bit2
00001DF6  6700 0112               1273          BEQ     SUBSIZE5
00001DFA  0C39 0006 0000258C      1274          CMP.B   #$6,bit2
00001E02  6700 014A               1275          BEQ     SUBSIZE6
00001E06                          1276     
00001E06                          1277  ******************************************************************************************************
00001E06                          1278  *   Displays size, then does operation order
00001E06                          1279  
00001E06                          1280  *   000 byte    EA,DN
00001E06                          1281  SUBSIZE1
00001E06  6100 0228               1282          BSR     SUBPRINT
00001E0A  43F9 000024DF           1283          LEA     MBYTE,A1
00001E10  103C 000E               1284          MOVE.B  #14,D0
00001E14  4E4F                    1285          TRAP    #15
00001E16  43F9 000024C1           1286          LEA     TAB,A1
00001E1C  103C 000E               1287          MOVE.B  #14,D0
00001E20  4E4F                    1288          TRAP    #15
00001E22                          1289  
00001E22  45F9 00001E2C           1290          LEA     SUBSIZE11,A2
00001E28  6000 03C2               1291          BRA     SUBEA
00001E2C                          1292  SUBSIZE11
00001E2C  45F9 00001E42           1293          LEA     SUBSIZE12,A2
00001E32  43F9 000024C5           1294          LEA     COMMA,A1
00001E38  103C 000E               1295          MOVE.B  #14,D0
00001E3C  4E4F                    1296          TRAP    #15
00001E3E  6000 0288               1297          BRA     SUBDN
00001E42                          1298  SUBSIZE12
00001E42  6000 05D2               1299          BRA     ENDNEWLINE
00001E46                          1300  
00001E46                          1301  *************************************************
00001E46                          1302  *   001 word    EA,DN
00001E46                          1303  SUBSIZE2
00001E46  6100 01E8               1304          BSR     SUBPRINT
00001E4A  43F9 000024E2           1305          LEA     MWORD,A1
00001E50  103C 000E               1306          MOVE.B  #14,D0
00001E54  4E4F                    1307          TRAP    #15
00001E56  43F9 000024C1           1308          LEA     TAB,A1
00001E5C  103C 000E               1309          MOVE.B  #14,D0
00001E60  4E4F                    1310          TRAP    #15
00001E62                          1311  
00001E62  45F9 00001E6C           1312          LEA     SUBSIZE21,A2
00001E68  6000 0382               1313          BRA     SUBEA
00001E6C                          1314  SUBSIZE21
00001E6C  45F9 00001E82           1315          LEA     SUBSIZE22,A2
00001E72  43F9 000024C5           1316          LEA     COMMA,A1
00001E78  103C 000E               1317          MOVE.B  #14,D0
00001E7C  4E4F                    1318          TRAP    #15
00001E7E  6000 0248               1319          BRA     SUBDN
00001E82                          1320  SUBSIZE22
00001E82  6000 0592               1321          BRA     ENDNEWLINE
00001E86                          1322  
00001E86                          1323  *************************************************
00001E86                          1324  *   010 long    EA,DN
00001E86                          1325  SUBSIZE3
00001E86  6100 01A8               1326          BSR     SUBPRINT
00001E8A  43F9 000024E5           1327          LEA     MLONG,A1
00001E90  103C 000E               1328          MOVE.B  #14,D0
00001E94  4E4F                    1329          TRAP    #15
00001E96  43F9 000024C1           1330          LEA     TAB,A1
00001E9C  103C 000E               1331          MOVE.B  #14,D0
00001EA0  4E4F                    1332          TRAP    #15
00001EA2                          1333  
00001EA2  45F9 00001EAC           1334          LEA     SUBSIZE31,A2
00001EA8  6000 0342               1335          BRA     SUBEA
00001EAC                          1336  SUBSIZE31
00001EAC  45F9 00001EC2           1337          LEA     SUBSIZE32,A2
00001EB2  43F9 000024C5           1338          LEA     COMMA,A1
00001EB8  103C 000E               1339          MOVE.B  #14,D0
00001EBC  4E4F                    1340          TRAP    #15
00001EBE  6000 0208               1341          BRA     SUBDN
00001EC2                          1342  SUBSIZE32
00001EC2  6000 0552               1343          BRA     ENDNEWLINE
00001EC6                          1344  
00001EC6                          1345  *************************************************
00001EC6                          1346  *   100 byte    DN,EA
00001EC6                          1347  SUBSIZE4
00001EC6  6100 0168               1348          BSR     SUBPRINT
00001ECA  43F9 000024DF           1349          LEA     MBYTE,A1
00001ED0  103C 000E               1350          MOVE.B  #14,D0
00001ED4  4E4F                    1351          TRAP    #15
00001ED6  43F9 000024C1           1352          LEA     TAB,A1
00001EDC  103C 000E               1353          MOVE.B  #14,D0
00001EE0  4E4F                    1354          TRAP    #15
00001EE2                          1355  
00001EE2  6100 01A2               1356          BSR     SUBERRORTEST1
00001EE6                          1357  
00001EE6  45F9 00001EF0           1358          LEA     SUBSIZE41,A2
00001EEC  6000 01DA               1359          BRA     SUBDN
00001EF0                          1360  SUBSIZE41
00001EF0  45F9 00001F06           1361          LEA     SUBSIZE42,A2
00001EF6  43F9 000024C5           1362          LEA     COMMA,A1
00001EFC  103C 000E               1363          MOVE.B  #14,D0
00001F00  4E4F                    1364          TRAP    #15
00001F02  6000 02E8               1365          BRA     SUBEA
00001F06                          1366  SUBSIZE42
00001F06  6000 050E               1367          BRA     ENDNEWLINE
00001F0A                          1368  
00001F0A                          1369  *************************************************
00001F0A                          1370  *   101 word    DN,EA
00001F0A                          1371  SUBSIZE5
00001F0A  6100 017A               1372          BSR     SUBERRORTEST1               * This does error testing
00001F0E  6100 0120               1373          BSR     SUBPRINT                    * Prints out 'SUB.'
00001F12  43F9 000024E2           1374          LEA     MWORD,A1
00001F18  103C 000E               1375          MOVE.B  #14,D0
00001F1C  4E4F                    1376          TRAP    #15
00001F1E  43F9 000024C1           1377          LEA     TAB,A1
00001F24  103C 000E               1378          MOVE.B  #14,D0
00001F28  4E4F                    1379          TRAP    #15
00001F2A                          1380  
00001F2A  45F9 00001F34           1381          LEA     SUBSIZE51,A2
00001F30  6000 0196               1382          BRA     SUBDN
00001F34                          1383  SUBSIZE51
00001F34  45F9 00001F4A           1384          LEA     SUBSIZE52,A2
00001F3A  43F9 000024C5           1385          LEA     COMMA,A1
00001F40  103C 000E               1386          MOVE.B  #14,D0
00001F44  4E4F                    1387          TRAP    #15
00001F46  6000 02A4               1388          BRA     SUBEA
00001F4A                          1389  SUBSIZE52
00001F4A  6000 04CA               1390          BRA     ENDNEWLINE
00001F4E                          1391  
00001F4E                          1392  *************************************************
00001F4E                          1393  *   110 long    DN,EA
00001F4E                          1394  SUBSIZE6
00001F4E  6100 0136               1395          BSR     SUBERRORTEST1               * This does error testing
00001F52  6100 00DC               1396          BSR     SUBPRINT                    * Prints out 'SUB.'
00001F56  43F9 000024E5           1397          LEA     MLONG,A1
00001F5C  103C 000E               1398          MOVE.B  #14,D0
00001F60  4E4F                    1399          TRAP    #15
00001F62  43F9 000024C1           1400          LEA     TAB,A1
00001F68  103C 000E               1401          MOVE.B  #14,D0
00001F6C  4E4F                    1402          TRAP    #15
00001F6E                          1403  
00001F6E  6100 0116               1404          BSR     SUBERRORTEST1
00001F72                          1405  
00001F72  45F9 00001F7C           1406          LEA     SUBSIZE61,A2
00001F78  6000 014E               1407          BRA     SUBDN
00001F7C                          1408  SUBSIZE61
00001F7C  45F9 00001F92           1409          LEA     SUBSIZE62,A2
00001F82  43F9 000024C5           1410          LEA     COMMA,A1
00001F88  103C 000E               1411          MOVE.B  #14,D0
00001F8C  4E4F                    1412          TRAP    #15
00001F8E  6000 025C               1413          BRA     SUBEA
00001F92                          1414  SUBSIZE62
00001F92  6000 0482               1415          BRA     ENDNEWLINE
00001F96                          1416  
00001F96                          1417  ****************************************************************************
00001F96                          1418  *   This section is for SUBA
00001F96                          1419  *   Displays 'SUBA.' then decodes the op-code as SUBA
00001F96                          1420  SUBA
00001F96  43F9 00002538           1421          LEA     MSUBA,A1                    Displays 'SUBA.'
00001F9C  103C 000E               1422          MOVE.B  #14,D0
00001FA0  4E4F                    1423          TRAP    #15
00001FA2                          1424          
00001FA2                          1425          * Does the rest of SUBA
00001FA2  0C39 0003 0000258C      1426          CMP.B   #$3,bit2
00001FAA  6700 000E               1427          BEQ     SUBSIZE7
00001FAE  0C39 0007 0000258C      1428          CMP.B   #$7,bit2
00001FB6  6700 003E               1429          BEQ     SUBSIZE8
00001FBA                          1430  
00001FBA                          1431  *************************************************
00001FBA                          1432  *   SUBA Word   ea,An
00001FBA                          1433  SUBSIZE7
00001FBA  43F9 000024E2           1434          LEA     MWORD,A1
00001FC0  103C 000E               1435          MOVE.B  #14,D0
00001FC4  4E4F                    1436          TRAP    #15
00001FC6  43F9 000024C1           1437          LEA     TAB,A1
00001FCC  103C 000E               1438          MOVE.B  #14,D0
00001FD0  4E4F                    1439          TRAP    #15
00001FD2                          1440  
00001FD2  45F9 00001FDC           1441          LEA     SUBSIZE71,A2
00001FD8  6000 0212               1442          BRA     SUBEA
00001FDC                          1443  SUBSIZE71
00001FDC  45F9 00001FF2           1444          LEA     SUBSIZE72,A2
00001FE2  43F9 000024C5           1445          LEA     COMMA,A1
00001FE8  103C 000E               1446          MOVE.B  #14,D0
00001FEC  4E4F                    1447          TRAP    #15
00001FEE  6000 012C               1448          BRA     SUBAN2
00001FF2                          1449  SUBSIZE72
00001FF2  6000 0422               1450          BRA     ENDNEWLINE
00001FF6                          1451  
00001FF6                          1452  *************************************************
00001FF6                          1453  *   SUBA longword   ea,An
00001FF6                          1454  SUBSIZE8
00001FF6  43F9 000024E5           1455          LEA     MLONG,A1
00001FFC  103C 000E               1456          MOVE.B  #14,D0
00002000  4E4F                    1457          TRAP    #15
00002002  43F9 000024C1           1458          LEA     TAB,A1
00002008  103C 000E               1459          MOVE.B  #14,D0
0000200C  4E4F                    1460          TRAP    #15
0000200E                          1461  
0000200E  45F8 1FDC               1462          LEA     SUBSIZE71,A2
00002012  6000 01D8               1463          BRA     SUBEA
00002016                          1464  SUBSIZE81
00002016  45F8 1FF2               1465          LEA     SUBSIZE72,A2
0000201A  43F9 000024C5           1466          LEA     COMMA,A1
00002020  103C 000E               1467          MOVE.B  #14,D0
00002024  4E4F                    1468          TRAP    #15
00002026  6000 00F4               1469          BRA     SUBAN2
0000202A                          1470  SUBSIZE82
0000202A  6000 03EA               1471          BRA     ENDNEWLINE
0000202E                          1472  
0000202E                          1473  *************************************************
0000202E                          1474  * Jumps to memory location at A2
0000202E                          1475  SUBJMPA2
0000202E  4ED2                    1476          JMP     (A2)
00002030                          1477  
00002030                          1478  *************************************************
00002030                          1479  * Prints out opcode name
00002030                          1480  SUBPRINT
00002030  0C39 0009 0000258A      1481          CMP.B   #$9,bit0                Prints SUB
00002038  6700 001A               1482          BEQ     SUBPRINTSUB
0000203C  0C39 000C 0000258A      1483          CMP.B   #$C,bit0                Prints AND
00002044  6700 001E               1484          BEQ     SUBPRINTAND
00002048  0C39 000D 0000258A      1485          CMP.B   #$D,bit0                Prints ADD
00002050  6700 0022               1486          BEQ     SUBPRINTADD
00002054                          1487  
00002054                          1488  
00002054                          1489  
00002054                          1490  SUBPRINTSUB   * Displays 'SUB.' 
00002054  43F9 00002533           1491          LEA     MSUB,A1
0000205A  103C 000E               1492          MOVE.B  #14,D0
0000205E  4E4F                    1493          TRAP    #15
00002060  6000 0022               1494          BRA     SUBPRINTEND
00002064                          1495  
00002064                          1496  SUBPRINTAND   * Displays 'AND.' 
00002064  43F9 0000253E           1497          LEA     MAND,A1
0000206A  103C 000E               1498          MOVE.B  #14,D0
0000206E  4E4F                    1499          TRAP    #15
00002070  6000 0012               1500          BRA     SUBPRINTEND
00002074                          1501  
00002074                          1502  SUBPRINTADD   * Displays 'ADD.' 
00002074  43F9 00002543           1503          LEA     MADD,A1
0000207A  103C 000E               1504          MOVE.B  #14,D0
0000207E  4E4F                    1505          TRAP    #15
00002080  6000 0002               1506          BRA     SUBPRINTEND
00002084                          1507  
00002084                          1508  
00002084                          1509  SUBPRINTEND
00002084  4E75                    1510          RTS
00002086                          1511  
00002086                          1512  
00002086                          1513  *******************************************************************
00002086                          1514  * Error testing for DN->EA operations
00002086                          1515  *  Data register, address register, and immediate data cannot be destinations
00002086                          1516  SUBERRORTEST1
00002086                          1517          * test for DN or AN register, branches to invalid op code if true
00002086  0C39 0000 0000258D      1518          CMP.B   #0,bit3
0000208E  6700 0314               1519          BEQ     INVOP
00002092  0C39 0001 0000258D      1520          CMP.B   #1,bit3
0000209A  6700 0308               1521          BEQ     INVOP
0000209E                          1522          
0000209E                          1523          * check if destination is immediate data
0000209E  0C39 0007 0000258D      1524          CMP.B   #7,bit3
000020A6  6600 001E               1525          BNE     SUBERRORTEST11
000020AA  0C39 0000 0000258E      1526          CMP.B   #0,bit4
000020B2  6700 0012               1527          BEQ     SUBERRORTEST11
000020B6  0C39 0001 0000258E      1528          CMP.B   #1,bit4
000020BE  6700 0006               1529          BEQ     SUBERRORTEST11
000020C2  6000 02E0               1530          BRA     INVOP
000020C6                          1531          
000020C6                          1532  SUBERRORTEST11
000020C6  4E75                    1533          RTS
000020C8                          1534  
000020C8                          1535  
000020C8                          1536  ******************************************************************************************************
000020C8                          1537  *   Displays data register
000020C8                          1538  SUBDN
000020C8  43F9 000024E8           1539          LEA     MDN,A1
000020CE  103C 000E               1540          MOVE.B  #14,D0
000020D2  4E4F                    1541          TRAP    #15
000020D4                          1542  
000020D4  1239 0000258B           1543          MOVE.B  bit1,D1
000020DA  103C 0003               1544          MOVE.B  #3,D0
000020DE  4E4F                    1545          TRAP    #15
000020E0                          1546          
000020E0  6000 FF4C               1547          BRA     SUBJMPA2
000020E4                          1548  
000020E4                          1549  *   Displays data register
000020E4                          1550  *   This is for Dn -> Dn cases. Source Dn uses bit4 as register instead of bit1
000020E4                          1551  SUBDN2
000020E4  43F9 000024E8           1552          LEA     MDN,A1
000020EA  103C 000E               1553          MOVE.B  #14,D0
000020EE  4E4F                    1554          TRAP    #15
000020F0                          1555  
000020F0  1239 0000258E           1556          MOVE.B  bit4,D1
000020F6  103C 0003               1557          MOVE.B  #3,D0
000020FA  4E4F                    1558          TRAP    #15
000020FC                          1559          
000020FC  6000 FF30               1560          BRA     SUBJMPA2
00002100                          1561  
00002100                          1562  *   Displays address register
00002100                          1563  SUBAN
00002100  43F9 000024EA           1564          LEA     MAN,A1
00002106  103C 000E               1565          MOVE.B  #14,D0
0000210A  4E4F                    1566          TRAP    #15
0000210C                          1567  
0000210C  1239 0000258E           1568          MOVE.B  bit4,D1
00002112  103C 0003               1569          MOVE.B  #3,D0
00002116  4E4F                    1570          TRAP    #15
00002118                          1571          
00002118  6000 FF14               1572          BRA     SUBJMPA2
0000211C                          1573  
0000211C                          1574  *   Displays address register
0000211C                          1575  *   This is for SUBA, SUBA puts An into bit1
0000211C                          1576  SUBAN2
0000211C  43F9 000024EA           1577          LEA     MAN,A1
00002122  103C 000E               1578          MOVE.B  #14,D0
00002126  4E4F                    1579          TRAP    #15
00002128                          1580  
00002128  1239 0000258B           1581          MOVE.B  bit1,D1
0000212E  103C 0003               1582          MOVE.B  #3,D0
00002132  4E4F                    1583          TRAP    #15
00002134                          1584          
00002134  6000 FEF8               1585          BRA     SUBJMPA2
00002138                          1586  
00002138                          1587  
00002138                          1588  *   Displays indirect address register
00002138                          1589  SUBANID
00002138  43F9 000024C7           1590          LEA     OPENBRA,A1
0000213E  103C 000E               1591          MOVE.B  #14,D0
00002142  4E4F                    1592          TRAP    #15
00002144                          1593  
00002144  43F9 000024EA           1594          LEA     MAN,A1
0000214A  103C 000E               1595          MOVE.B  #14,D0
0000214E  4E4F                    1596          TRAP    #15
00002150                          1597  
00002150  1239 0000258E           1598          MOVE.B  bit4,D1
00002156  103C 0003               1599          MOVE.B  #3,D0
0000215A  4E4F                    1600          TRAP    #15
0000215C                          1601  
0000215C  43F9 000024C9           1602          LEA     CLOSEBRA,A1
00002162  103C 000E               1603          MOVE.B  #14,D0
00002166  4E4F                    1604          TRAP    #15
00002168                          1605  
00002168  6000 FEC4               1606          BRA     SUBJMPA2
0000216C                          1607  
0000216C                          1608  *   Displays indirect address register with post increment
0000216C                          1609  SUBANIDPOS
0000216C  43F9 000024C7           1610          LEA     OPENBRA,A1
00002172  103C 000E               1611          MOVE.B  #14,D0
00002176  4E4F                    1612          TRAP    #15
00002178                          1613  
00002178  43F9 000024EA           1614          LEA     MAN,A1
0000217E  103C 000E               1615          MOVE.B  #14,D0
00002182  4E4F                    1616          TRAP    #15
00002184                          1617  
00002184  1239 0000258E           1618          MOVE.B  bit4,D1
0000218A  103C 0003               1619          MOVE.B  #3,D0
0000218E  4E4F                    1620          TRAP    #15
00002190                          1621  
00002190  43F9 000024C9           1622          LEA     CLOSEBRA,A1
00002196  103C 000E               1623          MOVE.B  #14,D0
0000219A  4E4F                    1624          TRAP    #15
0000219C                          1625  
0000219C  43F9 000024CB           1626          LEA     POS,A1
000021A2  103C 000E               1627          MOVE.B  #14,D0
000021A6  4E4F                    1628          TRAP    #15
000021A8                          1629  
000021A8  6000 FE84               1630          BRA     SUBJMPA2
000021AC                          1631  
000021AC                          1632  *   Displays indirect address register with pre decrement
000021AC                          1633  SUBANIDNEG
000021AC  43F9 000024CD           1634          LEA     NEG,A1
000021B2  103C 000E               1635          MOVE.B  #14,D0
000021B6  4E4F                    1636          TRAP    #15
000021B8                          1637  
000021B8  43F9 000024C7           1638          LEA     OPENBRA,A1
000021BE  103C 000E               1639          MOVE.B  #14,D0
000021C2  4E4F                    1640          TRAP    #15
000021C4                          1641  
000021C4  43F9 000024EA           1642          LEA     MAN,A1
000021CA  103C 000E               1643          MOVE.B  #14,D0
000021CE  4E4F                    1644          TRAP    #15
000021D0                          1645  
000021D0  1239 0000258E           1646          MOVE.B  bit4,D1
000021D6  103C 0003               1647          MOVE.B  #3,D0
000021DA  4E4F                    1648          TRAP    #15
000021DC                          1649  
000021DC  43F9 000024C9           1650          LEA     CLOSEBRA,A1
000021E2  103C 000E               1651          MOVE.B  #14,D0
000021E6  4E4F                    1652          TRAP    #15
000021E8                          1653  
000021E8  6000 FE44               1654          BRA     SUBJMPA2
000021EC                          1655  
000021EC                          1656  
000021EC                          1657  
000021EC                          1658  
000021EC                          1659  ******************************************************************************************************
000021EC                          1660  * Displays the EA as hex numbers
000021EC                          1661  * 
000021EC                          1662  SUBEA
000021EC                          1663          *   This finds which mode to use
000021EC  0C39 0000 0000258D      1664          CMP.B   #$0,bit3
000021F4  6700 FEEE               1665          BEQ     SUBDN2
000021F8  0C39 0001 0000258D      1666          CMP.B   #$1,bit3                BYTE SIZED OPERATIONS ARE NOT ALLOWED FOR An
00002200  6700 FEFE               1667          BEQ     SUBAN
00002204  0C39 0002 0000258D      1668          CMP.B   #$2,bit3
0000220C  6700 FF2A               1669          BEQ     SUBANID
00002210  0C39 0003 0000258D      1670          CMP.B   #$3,bit3
00002218  6700 FF52               1671          BEQ     SUBANIDPOS
0000221C  0C39 0004 0000258D      1672          CMP.B   #$4,bit3
00002224  6786                    1673          BEQ     SUBANIDNEG
00002226  0C39 0005 0000258D      1674          CMP.B   #$5,bit3
0000222E  6700 026A               1675          BEQ     ERROR
00002232  0C39 0006 0000258D      1676          CMP.B   #$6,bit3
0000223A  6700 025E               1677          BEQ     ERROR
0000223E  0C39 0007 0000258D      1678          CMP.B   #$7,bit3
00002246  6700 0002               1679          BEQ     SUBEAHEX
0000224A                          1680  
0000224A                          1681  SUBEAHEX
0000224A  0C39 0004 0000258E      1682          CMP.B   #$4,bit4            Branches to immediate data section of bit4 is 4
00002252  6700 0086               1683          BEQ     SUBEAID
00002256                          1684  SUBEAID2
00002256                          1685          *   Else it will assume it is absolute addressing mode
00002256  43F9 000024DD           1686          LEA     MHEX,A1
0000225C  103C 000E               1687          MOVE.B  #14,D0
00002260  4E4F                    1688          TRAP    #15
00002262                          1689  
00002262  0C39 0000 0000258E      1690          CMP.B   #$0,bit4
0000226A  6700 007E               1691          BEQ     SUBEAHEX1
0000226E  0C39 0001 0000258E      1692          CMP.B   #$1,bit4
00002276  6700 007A               1693          BEQ     SUBEAHEX2
0000227A                          1694  
0000227A  0C39 0000 0000258C      1695          CMP.B   #$0,bit2            * SUB byte displays as word
00002282  6700 0066               1696          BEQ     SUBEAHEX1
00002286  0C39 0004 0000258C      1697          CMP.B   #$4,bit2            * SUB byte displays as word
0000228E  6700 005A               1698          BEQ     SUBEAHEX1
00002292  0C39 0001 0000258C      1699          CMP.B   #$1,bit2            * SUB word
0000229A  6700 004E               1700          BEQ     SUBEAHEX1
0000229E  0C39 0005 0000258C      1701          CMP.B   #$5,bit2            * SUB word
000022A6  6700 0042               1702          BEQ     SUBEAHEX1
000022AA  0C39 0003 0000258C      1703          CMP.B   #$3,bit2            * SUBA word
000022B2  6700 0036               1704          BEQ     SUBEAHEX1
000022B6  0C39 0002 0000258C      1705          CMP.B   #$2,bit2            * SUB longword
000022BE  6700 0032               1706          BEQ     SUBEAHEX2
000022C2  0C39 0006 0000258C      1707          CMP.B   #$6,bit2            * SUB longword
000022CA  6700 0026               1708          BEQ     SUBEAHEX2
000022CE  0C39 0007 0000258C      1709          CMP.B   #$7,bit2            * SUBA longword
000022D6  6700 001A               1710          BEQ     SUBEAHEX2
000022DA                          1711  
000022DA                          1712  SUBEAID
000022DA  43F9 000024CF           1713          LEA     HASH,A1
000022E0  103C 000E               1714          MOVE.B  #14,D0
000022E4  4E4F                    1715          TRAP    #15
000022E6  6000 FF6E               1716          BRA     SUBEAID2
000022EA                          1717  
000022EA                          1718  SUBEAHEX1  
000022EA                          1719          *absolute address word
000022EA  1E3C 0002               1720          MOVE.B  #2,D7
000022EE  6000 000A               1721          BRA     SUBEAHEX3
000022F2                          1722  
000022F2                          1723  SUBEAHEX2  *absolute address long
000022F2  1E3C 0004               1724          MOVE.B  #4,D7
000022F6  6000 0002               1725          BRA     SUBEAHEX3
000022FA                          1726  
000022FA                          1727  SUBEAHEX3
000022FA  BE3C 0000               1728          CMP.B   #0,D7               Compares current addr to ending addr
000022FE  6700 FD2E               1729          BEQ     SUBJMPA2            Branches to done if they are equal
00002302                          1730  
00002302                          1731      
00002302  141E                    1732          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
00002304                          1733          
00002304  1602                    1734          MOVE.B  D2,D3               Copies data at D2 to D3
00002306                          1735          *   this gets digit in 10's place
00002306  E80B                    1736          LSR.B   #4,D3               Shifts right to get rid of 1's place
00002308                          1737          *   this gets digit in 1's place
00002308  E90A                    1738          LSL.B   #4,D2               Shifts left to get rid of 10's place
0000230A  E80A                    1739          LSR.B   #4,D2               Shifts back right into 1's place
0000230C                          1740  
0000230C                          1741          
0000230C                          1742          *   D3 holds digit in 10's place
0000230C                          1743          *   D2 holds digit in 1's place
0000230C                          1744          
0000230C  1203                    1745          MOVE.B  D3,D1               Displays digit in 10's place first
0000230E                          1746  
0000230E                          1747          *   converts digits 10+ into letters
0000230E                          1748  
0000230E  47F9 00002322           1749          LEA     SUBEAHEX4,A3        Place address of TENS into A3 to continue from there after conversion
00002314  B23C 0009               1750          CMP.B   #9,D1               Compares digit to 9
00002318  6E00 010C               1751          BGT     CONV                Print out letter representation if greater than 9
0000231C                          1752  
0000231C  103C 0003               1753          MOVE.B  #3,D0               Displays digit if it is less than A
00002320  4E4F                    1754          TRAP    #15
00002322                          1755          
00002322                          1756  SUBEAHEX4    
00002322  1202                    1757          MOVE.B  D2,D1               Displays digit in 1's place second
00002324                          1758  
00002324                          1759          *   converts digits 10+ into letters
00002324  47F9 00002338           1760          LEA     SUBEAHEX5,A3           Places address of NEXT into A3 to continue from there after conversion
0000232A  B23C 0009               1761          CMP.B   #9,D1               Compares digit to 9
0000232E  6E00 00F6               1762          BGT     CONV                Print out letter representation if greater than 9
00002332                          1763          
00002332  103C 0003               1764          MOVE.B  #3,D0               Displays digit if it is less than A
00002336  4E4F                    1765          TRAP    #15
00002338                          1766          
00002338                          1767  SUBEAHEX5         
00002338                          1768  * Display counter -- creates new line every 8 bytes
00002338                          1769          * D7 is used as counter
00002338                          1770          
00002338  5307                    1771          SUB.B   #1,D7                       
0000233A  60BE                    1772          BRA     SUBEAHEX3              Loops back to display next address
0000233C                          1773  
0000233C                          1774  ***   display EA ends here
0000233C                          1775  
0000233C                          1776  ******************************************************************************************************
0000233C                          1777  * Displays the EA as hex numbers
0000233C                          1778  * INPUT: Size of EA in D4; 1 = word, 2 = longword
0000233C                          1779  * OUTPUT: Displays size of EA reading from A6
0000233C                          1780  * Jumps to location stored in A2 when finished
0000233C                          1781  DISPEA
0000233C  43F9 000024DD           1782          LEA     MHEX,A1
00002342  103C 000E               1783          MOVE.B  #14,D0
00002346  4E4F                    1784          TRAP    #15
00002348                          1785  
00002348  B83C 0002               1786          CMP.B   #$2,D4              Branches to longword display if size is 2
0000234C  6700 000A               1787          BEQ     DISPEALONG          Else it will assume word length
00002350                          1788  
00002350                          1789  DISPEAWORD
00002350                          1790          *absolute address word
00002350  1E3C 0002               1791          MOVE.B  #2,D7
00002354  6000 000A               1792          BRA     DISPEA3
00002358                          1793   
00002358                          1794  DISPEALONG
00002358                          1795          *absolute address long
00002358  1E3C 0004               1796          MOVE.B  #4,D7
0000235C  6000 0002               1797          BRA     DISPEA3
00002360                          1798  
00002360                          1799  DISPEA3
00002360  BE3C 0000               1800          CMP.B   #0,D7               Compares current addr to ending addr
00002364  6700 FCC8               1801          BEQ     SUBJMPA2            Branches to done if they are equal
00002368                          1802  
00002368                          1803      
00002368  141E                    1804          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
0000236A                          1805          
0000236A  1602                    1806          MOVE.B  D2,D3               Copies data at D2 to D3
0000236C                          1807          *   this gets digit in 10's place
0000236C  E80B                    1808          LSR.B   #4,D3               Shifts right to get rid of 1's place
0000236E                          1809          *   this gets digit in 1's place
0000236E  E90A                    1810          LSL.B   #4,D2               Shifts left to get rid of 10's place
00002370  E80A                    1811          LSR.B   #4,D2               Shifts back right into 1's place
00002372                          1812  
00002372                          1813          
00002372                          1814          *   D3 holds digit in 10's place
00002372                          1815          *   D2 holds digit in 1's place
00002372                          1816          
00002372  1203                    1817          MOVE.B  D3,D1               Displays digit in 10's place first
00002374                          1818  
00002374                          1819          *   converts digits 10+ into letters
00002374                          1820  
00002374  47F9 00002388           1821          LEA     DISPEA4,A3        Place address of TENS into A3 to continue from there after conversion
0000237A  B23C 0009               1822          CMP.B   #9,D1               Compares digit to 9
0000237E  6E00 00A6               1823          BGT     CONV                Print out letter representation if greater than 9
00002382                          1824  
00002382  103C 0003               1825          MOVE.B  #3,D0               Displays digit if it is less than A
00002386  4E4F                    1826          TRAP    #15
00002388                          1827    
00002388                          1828  DISPEA4
00002388  1202                    1829          MOVE.B  D2,D1               Displays digit in 1's place second
0000238A                          1830  
0000238A                          1831          *   converts digits 10+ into letters
0000238A  47F9 0000239E           1832          LEA     DISPEA5,A3           Places address of NEXT into A3 to continue from there after conversion
00002390  B23C 0009               1833          CMP.B   #9,D1               Compares digit to 9
00002394  6E00 0090               1834          BGT     CONV                Print out letter representation if greater than 9
00002398                          1835          
00002398  103C 0003               1836          MOVE.B  #3,D0               Displays digit if it is less than A
0000239C  4E4F                    1837          TRAP    #15
0000239E                          1838        
0000239E                          1839  DISPEA5
0000239E                          1840  * Display counter -- creates new line every 8 bytes
0000239E                          1841          * D7 is used as counter
0000239E                          1842          
0000239E  5307                    1843          SUB.B   #1,D7                       
000023A0  60BE                    1844          BRA     DISPEA3              Loops back to display next address
000023A2                          1845  
000023A2                          1846  ***   display EA ends here
000023A2                          1847  
000023A2                          1848  
000023A2                          1849  ********************************************************************
000023A2                          1850  * Invalid op-code handling
000023A2                          1851  * Displays DATA YYYY
000023A2                          1852  *  YYYY represents the op-code that failed
000023A2                          1853  INVOPCODE
000023A2  DE1E                    1854          ADD.B   (A6)+,D7
000023A4                          1855  
000023A4                          1856  INVOP
000023A4  43F9 0000252E           1857          LEA     MDATA,A1
000023AA  103C 000E               1858          MOVE.B  #14,D0
000023AE  4E4F                    1859          TRAP    #15
000023B0  43F9 000024C1           1860          LEA     TAB,A1
000023B6  103C 000E               1861          MOVE.B  #14,D0
000023BA  4E4F                    1862          TRAP    #15
000023BC  43F9 000024DD           1863          LEA     MHEX,A1
000023C2  103C 000E               1864          MOVE.B  #14,D0
000023C6  4E4F                    1865          TRAP    #15
000023C8                          1866          
000023C8  1C3C 0002               1867          MOVE.B  #2,D6               D6 is a counter, used to know loop back once
000023CC                          1868          
000023CC  3407                    1869          MOVE.W  D7,D2               Copies opcode saved in D2 to D7
000023CE  E04A                    1870          LSR.W   #8,D2               Shifts D2 right 8 spaces to get the first byte of the word
000023D0  6000 0004               1871          BRA     INVOP2              Skips the second part to do later
000023D4                          1872  
000023D4                          1873  INVOP1
000023D4  1407                    1874          MOVE.B  D7,D2
000023D6                          1875  INVOP2
000023D6  1602                    1876          MOVE.B  D2,D3               Copies data at D2 to D3
000023D8                          1877          *   this gets digit in 10's place
000023D8  E80B                    1878          LSR.B   #4,D3               Shifts right to get rid of 1's place
000023DA                          1879          *   this gets digit in 1's place
000023DA  E90A                    1880          LSL.B   #4,D2               Shifts left to get rid of 10's place
000023DC  E80A                    1881          LSR.B   #4,D2               Shifts back right into 1's place
000023DE                          1882  
000023DE                          1883          
000023DE                          1884          *   D3 holds digit in 10's place
000023DE                          1885          *   D2 holds digit in 1's place
000023DE                          1886          
000023DE  1203                    1887          MOVE.B  D3,D1               Displays digit in 10's place first
000023E0                          1888  
000023E0                          1889          *   converts digits 10+ into letters
000023E0                          1890  
000023E0  47F9 000023F4           1891          LEA     INVOP3,A3        Place address of TENS into A3 to continue from there after conversion
000023E6  B23C 0009               1892          CMP.B   #9,D1               Compares digit to 9
000023EA  6E00 003A               1893          BGT     CONV                Print out letter representation if greater than 9
000023EE                          1894  
000023EE  103C 0003               1895          MOVE.B  #3,D0               Displays digit if it is less than A
000023F2  4E4F                    1896          TRAP    #15
000023F4                          1897          
000023F4                          1898  INVOP3   
000023F4  1202                    1899          MOVE.B  D2,D1               Displays digit in 1's place second
000023F6                          1900  
000023F6                          1901          *   converts digits 10+ into letters
000023F6  47F9 0000240A           1902          LEA     INVOP4,A3           Places address of NEXT into A3 to continue from there after conversion
000023FC  B23C 0009               1903          CMP.B   #9,D1               Compares digit to 9
00002400  6E00 0024               1904          BGT     CONV                Print out letter representation if greater than 9
00002404                          1905          
00002404  103C 0003               1906          MOVE.B  #3,D0               Displays digit if it is less than A
00002408  4E4F                    1907          TRAP    #15
0000240A                          1908          
0000240A                          1909  INVOP4
0000240A                          1910  * Display counter -- creates new line every 8 bytes
0000240A                          1911          * D6 is used as counter
0000240A                          1912          
0000240A  5306                    1913          SUB.B   #1,D6
0000240C  BC3C 0000               1914          CMP.B   #0,D6
00002410  6700 0004               1915          BEQ     ENDNEWLINE
00002414  60BE                    1916          BRA     INVOP1              Loops back to display next address
00002416                          1917  
00002416                          1918  
00002416                          1919  ******************************************************************************************************
00002416                          1920  * Creates a new line after an op-code is displayed, loops back to start to display next code
00002416                          1921  ENDNEWLINE
00002416  43F9 000024BE           1922          LEA     NEWLINE,A1
0000241C  103C 000E               1923          MOVE.B  #14,D0
00002420  4E4F                    1924          TRAP    #15
00002422  6000 EBE8               1925          BRA     NEWADDR
00002426                          1926  
00002426                          1927  ******************************************************************************************************
00002426                          1928  * Converts decimal number into hex and displays it
00002426                          1929  *   converts number 10-15 to A-F
00002426                          1930  *   INPUT: decimal number in D1
00002426                          1931  *   OUTPUT: HEX number to output
00002426  B23C 000A               1932  CONV    CMP.B   #10,D1              Displays 10 as A
0000242A  6700 002A               1933          BEQ     HEXA
0000242E  B23C 000B               1934          CMP.B   #11,D1              Displays 11 as B
00002432  6700 002C               1935          BEQ     HEXB
00002436  B23C 000C               1936          CMP.B   #12,D1              Displays 12 as C
0000243A  6700 002E               1937          BEQ     HEXC
0000243E  B23C 000D               1938          CMP.B   #13,D1              Displays 13 as D
00002442  6700 0030               1939          BEQ     HEXD
00002446  B23C 000E               1940          CMP.B   #14,D1              Displays 14 as E
0000244A  6700 0032               1941          BEQ     HEXE
0000244E  B23C 000F               1942          CMP.B   #15,D1              Displays 15 as F
00002452  6700 0034               1943          BEQ     HEXF
00002456                          1944  
00002456  43F9 000024D1           1945  HEXA    LEA     DISPA,A1            Loads A character
0000245C  6000 0034               1946          BRA     PRINT
00002460                          1947    
00002460  43F9 000024D3           1948  HEXB    LEA     DISPB,A1            Loads B character
00002466  6000 002A               1949          BRA     PRINT
0000246A                          1950  
0000246A  43F9 000024D5           1951  HEXC    LEA     DISPC,A1            Loads C character
00002470  6000 0020               1952          BRA     PRINT
00002474                          1953  
00002474  43F9 000024D7           1954  HEXD    LEA     DISPD,A1            Loads D character
0000247A  6000 0016               1955          BRA     PRINT
0000247E                          1956  
0000247E  43F9 000024D9           1957  HEXE    LEA     DISPE,A1            Loads E character
00002484  6000 000C               1958          BRA     PRINT
00002488                          1959  
00002488  43F9 000024DB           1960  HEXF    LEA     DISPF,A1            Loads F character
0000248E  6000 0002               1961          BRA     PRINT
00002492                          1962  
00002492  103C 000E               1963  PRINT   MOVE.B  #14,D0              Sets trap task to #14
00002496  4E4F                    1964          TRAP    #15                 Prints out message in A1
00002498  4ED3                    1965          JMP     (A3)
0000249A                          1966  
0000249A  43F9 00002558           1967  ERROR   LEA     MERROR,A1
000024A0  103C 000E               1968          MOVE.B  #14,D0
000024A4  4E4F                    1969          TRAP    #15
000024A6  6000 000E               1970          BRA     EXIT
000024AA                          1971  
000024AA  43F9 0000256F           1972  DONE    LEA     MDONE,A1
000024B0  103C 000E               1973          MOVE.B  #14,D0
000024B4  4E4F                    1974          TRAP    #15
000024B6                          1975  
000024B6  103C 0009               1976  EXIT    MOVE.B  #9,D0
000024BA  4E4F                    1977          TRAP    #15
000024BC                          1978  
000024BC                          1979  ************************************ Output stuff **************************************
000024BC                          1980  * Stuff for output
000024BC                          1981  
000024BC  =0000000D               1982  CR      EQU     $0D
000024BC  =0000000A               1983  LF      EQU     $0A
000024BC                          1984  
000024BC= 20 00                   1985  SPACE       DC.B    ' ',0
000024BE= 0D 0A 00                1986  NEWLINE     DC.B    '',CR,LF,0
000024C1= 20 20 20 00             1987  TAB         DC.B    '   ',0
000024C5= 2C 00                   1988  COMMA       DC.B    ',',0
000024C7= 28 00                   1989  OPENBRA     DC.B    '(',0
000024C9= 29 00                   1990  CLOSEBRA    DC.B    ')',0
000024CB= 2B 00                   1991  POS         DC.B    '+',0
000024CD= 2D 00                   1992  NEG         DC.B    '-',0
000024CF= 23 00                   1993  HASH        DC.B    '#',0
000024D1                          1994  
000024D1                          1995  
000024D1= 41 00                   1996  DISPA       DC.B    'A',0
000024D3= 42 00                   1997  DISPB       DC.B    'B',0
000024D5= 43 00                   1998  DISPC       DC.B    'C',0
000024D7= 44 00                   1999  DISPD       DC.B    'D',0
000024D9= 45 00                   2000  DISPE       DC.B    'E',0
000024DB= 46 00                   2001  DISPF       DC.B    'F',0
000024DD                          2002  
000024DD= 24 00                   2003  MHEX        DC.B    '$',0
000024DF= 42 20 00                2004  MBYTE       DC.B    'B ',0
000024E2= 57 20 00                2005  MWORD       DC.B    'W ',0
000024E5= 4C 20 00                2006  MLONG       DC.B    'L ',0
000024E8= 44 00                   2007  MDN         DC.B    'D',0
000024EA= 41 00                   2008  MAN         DC.B    'A',0
000024EC                          2009  
000024EC= 4C 53 4C 2E 00          2010  MLSL        DC.B    'LSL.',0
000024F1= 4C 53 52 2E 00          2011  MLSR        DC.B    'LSR.',0
000024F6= 4E 45 47 2E 00          2012  MMNEGW      DC.B    'NEG.',0
000024FB= 44 49 56 53 2E 57 00    2013  MMDIVSW     DC.B    'DIVS.W',0
00002502= 4D 55 4C 53 2E 57 00    2014  MMULSW      DC.B    'MULS.W',0
00002509= 4D 4F 56 45 2E 42 00    2015  MMOVEB      DC.B    'MOVE.B',0
00002510= 4D 4F 56 45 2E 57 00    2016  MMOVEW      DC.B    'MOVE.W',0
00002517= 4D 4F 56 45 2E 4C 00    2017  MMOVEL      DC.B    'MOVE.L',0
0000251E= 4D 4F 56 45 41 2E ...   2018  MMOVEAW     DC.B    'MOVEA.W',0
00002526= 4D 4F 56 45 41 2E ...   2019  MMOVEAL     DC.B    'MOVEA.L',0
0000252E= 44 41 54 41 00          2020  MDATA       DC.B    'DATA',0
00002533= 53 55 42 2E 00          2021  MSUB        DC.B    'SUB.',0
00002538= 53 55 42 41 2E 00       2022  MSUBA       DC.B    'SUBA.',0
0000253E= 41 4E 44 2E 00          2023  MAND        DC.B    'AND.',0
00002543= 41 44 44 2E 00          2024  MADD        DC.B    'ADD.',0
00002548= 53 55 42 49 2E 00       2025  MSUBI       DC.B    'SUBI.',0
0000254E= 4F 52 49 2E 00          2026  MORI        DC.B    'ORI.',0
00002553= 4E 4F 54 2E 00          2027  MNOT        DC.B    'NOT.',0
00002558                          2028  
00002558= 45 52 52 4F 52 3A ...   2029  MERROR      DC.B    'ERROR: Something broke',0
0000256F= 43 4F 4D 50 4C 45 ...   2030  MDONE       DC.B    'COMPLETE: IT DID NOT CRASH',0
0000258A                          2031  
0000258A                          2032  
0000258A                          2033  ********************************** MEMORY STORAGE **********************************************
0000258A                          2034  * Stores memory locations at the end of the program
0000258A                          2035  * How DS works: Give it a variable name.
0000258A                          2036  *   DS means Define Storage. Give it a size of how big you want the storage to be (Byte, Word, Longword)
0000258A                          2037  *   Last is the number of storage you want. 
0000258A                          2038  *   Example: DS.W   1   This creates a 1 longword location to be used. Memory would look like: FF FF
0000258A                          2039  *            DS.B   3   This creates three byte-sized locations to be used. Memory would look like: FF FF FF
0000258A                          2040  *            
0000258A                          2041  
0000258A                          2042  bit0        DS.B    1           SEE NOTE UP TOP
0000258B                          2043  bit1        DS.B    1           SEE NOTE UP TOP
0000258C                          2044  bit2        DS.B    1           SEE NOTE UP TOP
0000258D                          2045  bit3        DS.B    1           SEE NOTE UP TOP
0000258E                          2046  bit4        DS.B    1           SEE NOTE UP TOP
0000258F                          2047  
0000258F                          2048  
0000258F                          2049      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDIMD              136C
ADDIMD0             1390
ADDIMD1             1390
ADDIMD3             1390
ADDR1               7000
ADDR2               725A
BIT0                258A
BIT1                258B
BIT2                258C
BIT3                258D
BIT4                258E
CLOSEBRA            24C9
CODE                10D8
COMMA               24C5
CONV                2426
CR                  D
DISPA               24D1
DISPADDR1           1024
DISPADDR2           1026
DISPADDR3           105A
DISPADDR4           1070
DISPADDR5           1086
DISPADDR6           109C
DISPB               24D3
DISPC               24D5
DISPD               24D7
DISPE               24D9
DISPEA              233C
DISPEA3             2360
DISPEA4             2388
DISPEA5             239E
DISPEALONG          2358
DISPEAWORD          2350
DISPF               24DB
DIVSW               182E
DONE                24AA
ENDNEWLINE          2416
ENDNLINC            179C
ERROR               249A
EXIT                24B6
HASH                24CF
HEXA                2456
HEXB                2460
HEXC                246A
HEXD                2474
HEXE                247E
HEXF                2488
IMD                 1B76
IMD2                1B90
IMD3                1B98
IMD4                1BA4
IMDBYTE             1C28
IMDEA               1C50
IMDEA2              1C6C
IMDEA3              1C82
IMDLONG             1C46
IMDPRINT            1BDE
IMDPRINTEND         1C20
IMDPRINTNOT         1C16
IMDPRINTORI         1C02
IMDPRINTSUBI        1C0C
IMDWORD             1C38
INVOP               23A4
INVOP1              23D4
INVOP2              23D6
INVOP3              23F4
INVOP4              240A
INVOPCODE           23A2
LF                  A
LSLR                1A12
LSLRDESD            1674
LSLRSRCD            164C
MADD                2543
MAN                 24EA
MAND                253E
MBYTE               24DF
MDATA               252E
MDN                 24E8
MDONE               256F
MERROR              2558
MHEX                24DD
MISC                1C86
MISC2               1CA8
MISC3               1CB0
MISC4               1CBC
MISCBYTE            1D02
MISCEA              1D30
MISCEA2             1D4C
MISCLONG            1D24
MISCNOT             1CDE
MISCWORD            1D14
MLONG               24E5
MLSL                24EC
MLSR                24F1
MMDIVSW             24FB
MMNEGW              24F6
MMOVEAL             2526
MMOVEAW             251E
MMOVEB              2509
MMOVEL              2517
MMOVEW              2510
MMULSW              2502
MNOT                2553
MORI                254E
MOVB                12EC
MOVBDN1             15C0
MOVBDN2             1774
MOVEAL              1298
MOVEAN1             1390
MOVEAN2             1694
MOVEAW              11B8
MOVEIAN1            1404
MOVEIAND1           1528
MOVEIANI1           1490
MOVIAN2             16B4
MOVIAND2            1730
MOVIANI2            16EC
MOVL                120C
MOVW                112C
MSUB                2533
MSUBA               2538
MSUBI               2548
MULSW               17A4
MWORD               24E2
NEG                 24CD
NEGW                18BC
NEWADDR             100C
NEWLINE             24BE
OPENBRA             24C7
POS                 24CB
PRINT               2492
PRINTB              1A9A
PRINTBYTE           1916
PRINTL              1AEA
PRINTLONG           19BE
PRINTLSL            1A6A
PRINTLSLRCOUNT      1B12
PRINTLSR            1B46
PRINTW              1AC2
PRINTWORD           196A
SPACE               24BC
START               1000
SUB                 1D50
SUB1                1D82
SUB2                1D64
SUB3                1D6C
SUB4                1D76
SUBA                1F96
SUBAN               2100
SUBAN2              211C
SUBANID             2138
SUBANIDNEG          21AC
SUBANIDPOS          216C
SUBDN               20C8
SUBDN2              20E4
SUBEA               21EC
SUBEAHEX            224A
SUBEAHEX1           22EA
SUBEAHEX2           22F2
SUBEAHEX3           22FA
SUBEAHEX4           2322
SUBEAHEX5           2338
SUBEAID             22DA
SUBEAID2            2256
SUBERRORTEST1       2086
SUBERRORTEST11      20C6
SUBJMPA2            202E
SUBPRINT            2030
SUBPRINTADD         2074
SUBPRINTAND         2064
SUBPRINTEND         2084
SUBPRINTSUB         2054
SUBSIZE1            1E06
SUBSIZE11           1E2C
SUBSIZE12           1E42
SUBSIZE2            1E46
SUBSIZE21           1E6C
SUBSIZE22           1E82
SUBSIZE3            1E86
SUBSIZE31           1EAC
SUBSIZE32           1EC2
SUBSIZE4            1EC6
SUBSIZE41           1EF0
SUBSIZE42           1F06
SUBSIZE5            1F0A
SUBSIZE51           1F34
SUBSIZE52           1F4A
SUBSIZE6            1F4E
SUBSIZE61           1F7C
SUBSIZE62           1F92
SUBSIZE7            1FBA
SUBSIZE71           1FDC
SUBSIZE72           1FF2
SUBSIZE8            1FF6
SUBSIZE81           2016
SUBSIZE82           202A
TAB                 24C1
