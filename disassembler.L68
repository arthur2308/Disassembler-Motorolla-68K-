00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/29/2015 12:52:44 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Team A (Phat, Felicia, Arthur)
00000000                             4  * Date       : Thanksgiving 2015 (We started earlier but I happen to be filling this in today)
00000000                             5  * Description: Converts assembly language written in hex to readable human code (CSS422 Project)
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00000000                             9  ********************************
00000000                            10  * INFO:
00000000                            11  * bit0-4 are used to store information about binary op-code split into it's split-up stage
00000000                            12  * They are stored at the end of the code. (You can find code for storage at the end, after all the messages.)
00000000                            13  *   bit0 - Store first hex of op code
00000000                            14  *   bit1 - Store first 'bit' of a split op code
00000000                            15  *   bit2 - Store second 'bit' of a split op code
00000000                            16  *   bit3 - Store third 'bit' of a split op code
00000000                            17  *   bit4 - Store fourth 'bit' of a split op code
00000000                            18  * 
00000000                            19  * 
00000000                            20  * 
00000000                            21  * COMPLETED WORK:
00000000                            22  * SUB
00000000                            23  * SUBA
00000000                            24  * AND
00000000                            25  * ADD   - NOT TESTED
00000000                            26  * SUBI
00000000                            27  * ORI   - EORI and CMPI uses the same logic as these two
00000000                            28  * NOT
00000000                            29  * 
00000000                            30  * 
00000000                            31  ****************************************************************************
00000000                            32  
00000000                            33  
00000000                            34  * sets start and end address
00000000                            35  * temp hard code
00000000                            36  * make UI later for input
00000000  =00007000                 37  addr1   EQU     $7000
00000000                            38  *addr2   EQU     $7050
00000000  =0000725A                 39  addr2   EQU     $725A
00000000                            40  
00000000                            41  
00001000                            42      ORG    $1000
00001000                            43  START:                  ; first instruction of program
00001000                            44  
00001000                            45          
00001000                            46  
00001000                            47  
00001000                            48          *   this stores some test EA into memory
00001000                            49          *LEA     addr1,A1
00001000                            50          *MOVE.W  #$0440,(A1)+        *917C
00001000                            51          *MOVE.W  #$917C,(A1)+       
00001000                            52          *MOVE.L  #$5555A7FF,(A1)+
00001000                            53          *MOVE.W  #$9078,(A1)+
00001000                            54          *MOVE.W  #$5555,(A1)+
00001000                            55          
00001000                            56          *MOVE.L  #$0,A1              This clears the memory at A1, not sure why i didn't it but its probably important
00001000                            57          
00001000  31FC 3846 7000            58          MOVE.W  #$3846, $7000
00001006                            59          
00001006                            60  ******************************************** displays address location***********************************************
00001006                            61  * This displays the address location of the op-code being worked on
00001006                            62  * A6 is used as current address
00001006                            63  
00001006  2C7C 00007000             64          MOVEA.L #addr1,A6            Moves starting addr into A6 register
0000100C                            65          
0000100C                            66  NEWADDR
0000100C  2E0E                      67          MOVE.L  A6,D7               Loads the current address into D7
0000100E  BEBC 0000725A             68          CMP.L   #addr2,D7            Compares current address to end address
00001014  6E00 1012                 69          BGT     DONE                Branches to done if current address > end address
00001018                            70          
00001018                            71          
00001018  1C3C 0002                 72          MOVE.B  #2,D6               D6 is a counter, used for looping
0000101C  2407                      73          MOVE.L  D7,D2               Copies opcode saved in D7 to D2 to be manipulated
0000101E  4842                      74          SWAP    D2                  Swaps the location to be displayed (Display first word of a long word)
00001020  6000 0004                 75          BRA     DISPADDR2           Skips the second part to do later
00001024                            76  
00001024                            77  DISPADDR1
00001024  3407                      78          MOVE.W  D7,D2
00001026                            79  DISPADDR2
00001026  3202                      80          MOVE.W  D2,D1               D1 will be the first byte of the word
00001028  3602                      81          MOVE.W  D2,D3               D3 will be the second byte of the word
0000102A  3802                      82          MOVE.W  D2,D4               D4 will be the third byte of the word
0000102C  3A02                      83          MOVE.W  D2,D5               D5 will be the fourth byte of the word
0000102E                            84  
0000102E  E049                      85          LSR.W   #8,D1               Shifts D1 right 12 times to move the first byte of the word to the last byte
00001030  E849                      86          LSR.W   #4,D1
00001032  E94B                      87          LSL.W   #4,D3               Shifts D3 left 4 times to get rid of the first byte
00001034  E04B                      88          LSR.W   #8,D3                 Then shifts D3 right 12 times to move it to the last byte
00001036  E84B                      89          LSR.W   #4,D3
00001038  E14C                      90          LSL.W   #8,D4               Shifts D4 to the left 8 times to get rid of first 2 bytes
0000103A  E04C                      91          LSR.W   #8,D4                 Then shifts it right 12 times to move it to the last byte
0000103C  E84C                      92          LSR.W   #4,D4
0000103E  E14D                      93          LSL.W   #8,D5               Shifts D5 to the left 12 times to get rid of the first 3 bytes
00001040  E94D                      94          LSL.W   #4,D5                 Then shifts it back to the left 12 times to move it to the last byte position
00001042  E04D                      95          LSR.W   #8,D5
00001044  E84D                      96          LSR.W   #4,D5
00001046                            97          
00001046                            98          
00001046  47F9 0000105A             99          LEA     DISPADDR3,A3        Place address of TENS into A3 to continue from there after conversion
0000104C  B23C 0009                100          CMP.B   #9,D1               Compares digit to 9
00001050  6E00 0F52                101          BGT     CONV                Print out letter representation if greater than 9
00001054                           102  
00001054  103C 0003                103          MOVE.B  #3,D0               Displays digit if it is less than A
00001058  4E4F                     104          TRAP    #15
0000105A                           105          
0000105A                           106  DISPADDR3   
0000105A  1203                     107          MOVE.B  D3,D1               Displays digit in 1's place second
0000105C                           108  
0000105C                           109          *   converts digits 10+ into letters
0000105C  47F9 00001070            110          LEA     DISPADDR4,A3           Places address of NEXT into A3 to continue from there after conversion
00001062  B23C 0009                111          CMP.B   #9,D1               Compares digit to 9
00001066  6E00 0F3C                112          BGT     CONV                Print out letter representation if greater than 9
0000106A                           113          
0000106A  103C 0003                114          MOVE.B  #3,D0               Displays digit if it is less than A
0000106E  4E4F                     115          TRAP    #15
00001070                           116  
00001070                           117  DISPADDR4
00001070  1204                     118          MOVE.B  D4,D1               Displays digit in 1's place second
00001072                           119  
00001072                           120          *   converts digits 10+ into letters
00001072  47F9 00001086            121          LEA     DISPADDR5,A3           Places address of NEXT into A3 to continue from there after conversion
00001078  B23C 0009                122          CMP.B   #9,D1               Compares digit to 9
0000107C  6E00 0F26                123          BGT     CONV                Print out letter representation if greater than 9
00001080                           124          
00001080  103C 0003                125          MOVE.B  #3,D0               Displays digit if it is less than A
00001084  4E4F                     126          TRAP    #15
00001086                           127  
00001086                           128  DISPADDR5
00001086  1205                     129          MOVE.B  D5,D1               Displays digit in 1's place second
00001088                           130  
00001088                           131          *   converts digits 10+ into letters
00001088  47F9 0000109C            132          LEA     DISPADDR6,A3           Places address of NEXT into A3 to continue from there after conversion
0000108E  B23C 0009                133          CMP.B   #9,D1               Compares digit to 9
00001092  6E00 0F10                134          BGT     CONV                Print out letter representation if greater than 9
00001096                           135          
00001096  103C 0003                136          MOVE.B  #3,D0               Displays digit if it is less than A
0000109A  4E4F                     137          TRAP    #15
0000109C                           138          
0000109C                           139  DISPADDR6
0000109C                           140  * Display counter -- creates new line every 8 bytes
0000109C                           141          * D6 is used as counter
0000109C                           142          
0000109C  5306                     143          SUB.B   #1,D6
0000109E  BC3C 0000                144          CMP.B   #0,D6
000010A2  6680                     145          BNE     DISPADDR1
000010A4                           146  
000010A4  43F9 0000203F            147          LEA     TAB,A1
000010AA  103C 000E                148          MOVE.B  #14,D0
000010AE  4E4F                     149          TRAP    #15
000010B0                           150          
000010B0                           151  *********************************************************************************************************************
000010B0                           152  * Splits the first byte of the op code into nibbles
000010B0                           153  * then sends it to the branch-table to jump to the appropiate section to be decoded
000010B0                           154  
000010B0  4281                     155          CLR.L   D1                  Clears the data registers
000010B2  4282                     156          CLR.L   D2
000010B4  4283                     157          CLR.L   D3
000010B6  4284                     158          CLR.L   D4
000010B8  4285                     159          CLR.L   D5
000010BA  4286                     160          CLR.L   D6
000010BC  3C16                     161          MOVE.W  (A6),D6
000010BE  141E                     162          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
000010C0                           163    
000010C0  1E02                     164          MOVE.B  D2,D7
000010C2  E14F                     165          LSL.W   #8,D7
000010C4                           166          
000010C4  1602                     167          MOVE.B  D2,D3               Copies data at D2 to D3
000010C6                           168          *   this gets digit in 10's place
000010C6  E80B                     169          LSR.B   #4,D3               Shifts right to get rid of 1's place
000010C8                           170          *   this gets digit in 1's place
000010C8  E90A                     171          LSL.B   #4,D2               Shifts left to get rid of 10's place
000010CA  E80A                     172          LSR.B   #4,D2               Shifts back right into 1's place
000010CC                           173          
000010CC                           174          *   D3 holds digit in 10's place
000010CC                           175          *   D2 holds digit in 1's place
000010CC                           176  
000010CC                           177          *   Moves second nibble to D5 to be used later
000010CC  1A02                     178          MOVE.B  D2,D5
000010CE  13C3 000020EB            179          MOVE.B  D3,bit0
000010D4                           180          *   Goes to a branch-table to figure out which op code it is
000010D4  6000 0002                181          BRA     CODE
000010D8                           182  
000010D8                           183  ******************************************************************************************************
000010D8                           184  *   This is where the table goes to detirmine which op-code to use
000010D8                           185  CODE    
000010D8  B63C 0000                186          CMP.B   #$0,D3              Goes to immediate operation section
000010DC  6700 061E                187          BEQ     IMD
000010E0  B63C 0004                188          CMP.B   #$4,D3              Goes to miscellaneous section
000010E4  6700 0726                189          BEQ     MISC
000010E8  B63C 0009                190          CMP.B   #$9,D3              Goes to sub section
000010EC  6700 07E0                191          BEQ     SUB
000010F0  B63C 000C                192          CMP.B   #$C,D3              Goes to sub but displays as AND
000010F4  6700 07D8                193          BEQ     SUB
000010F8  B63C 000D                194          CMP.B   #$D,D3              Goes to sub but displays as ADD
000010FC  6700 07D0                195          BEQ     SUB
00001100  B63C 0001                196          CMP.B   #$1,D3
00001104  6700 01D6                197          BEQ     MOVB                Goes to movb
00001108  B63C 0003                198          CMP.B   #$3,D3
0000110C  6700 000E                199          BEQ     MOVW                Goes to movb
00001110  B63C 0002                200          CMP.B   #$2,D3
00001114  6700 00E6                201          BEQ     MOVL                Goes to movb
00001118                           202  
00001118  6000 0E06                203          BRA     INVOPCODE
0000111C                           204  
0000111C                           205  MOVW
0000111C                           206          
0000111C                           207          
0000111C  E20A                     208          LSR.B   #1, D2
0000111E  13C2 000020EC            209          MOVE.B  D2, bit1
00001124                           210          
00001124  1416                     211          MOVE.B  (A6), D2
00001126  EB0A                     212          LSL.B   #5, D2
00001128  EA0A                     213          LSR.B   #5, D2
0000112A  13C2 000020EF            214          MOVE.B  D2, bit4
00001130                           215          
00001130  1416                     216          MOVE.B  (A6), D2
00001132  E50A                     217          LSL.B   #2, D2
00001134  EA0A                     218          LSR.B   #5, D2
00001136  13C2 000020EE            219          MOVE.B  D2, bit3
0000113C                           220          
0000113C  EF4E                     221          LSL.W   #7, D6
0000113E  E04E                     222          LSR.W   #8, D6 
00001140  EA4E                     223          LSR.W   #5, D6 
00001142  13C6 000020ED            224          MOVE.B  D6, bit2
00001148                           225  
00001148  0C39 0001 000020ED       226          CMP.B   #$1, bit2
00001150  6700 0056                227          BEQ     MOVEAW
00001154                           228  
00001154  43F9 00002071            229          LEA MMOVEW, A1
0000115A  103C 000E                230          MOVE.B  #14, D0
0000115E  4E4F                     231          TRAP    #15 
00001160                           232  
00001160  0C39 0000 000020EE       233          CMP.B   #$0, bit3           
00001168  6700 0426                234          BEQ     MOVBDN1
0000116C  0C39 0001 000020EE       235          CMP.B   #$1, bit3
00001174  6700 020A                236          BEQ     MOVEAN1
00001178  0C39 0002 000020EE       237          CMP.B   #$2, bit3
00001180  6700 026A                238          BEQ     MOVEIAN1
00001184  0C39 0003 000020EE       239          CMP.B   #$3, bit3
0000118C  6700 02E2                240          BEQ     MOVEIANI1
00001190  0C39 0004 000020EE       241          CMP.B   #$4, bit3
00001198  6700 0366                242          BEQ     MOVEIAND1
0000119C  0C39 0007 000020EE       243          CMP.B   #$7, bit3
000011A4  6700 01B6                244          BEQ     ADDIMD
000011A8                           245          
000011A8                           246          * Add INVOP 
000011A8                           247  
000011A8                           248  MOVEAW
000011A8  43F9 0000207F            249          LEA MMOVEAW, A1
000011AE  103C 000E                250          MOVE.B  #14, D0
000011B2  4E4F                     251          TRAP    #15 
000011B4                           252          
000011B4  0C39 0000 000020EE       253          CMP.B   #$0, bit3           
000011BC  6700 03D2                254          BEQ     MOVBDN1
000011C0  0C39 0001 000020EE       255          CMP.B   #$1, bit3
000011C8  6700 01B6                256          BEQ     MOVEAN1
000011CC  0C39 0002 000020EE       257          CMP.B   #$2, bit3
000011D4  6700 0216                258          BEQ     MOVEIAN1
000011D8  0C39 0003 000020EE       259          CMP.B   #$3, bit3
000011E0  6700 028E                260          BEQ     MOVEIANI1
000011E4  0C39 0004 000020EE       261          CMP.B   #$4, bit3
000011EC  6700 0312                262          BEQ     MOVEIAND1
000011F0  0C39 0007 000020EE       263          CMP.B   #$7, bit3
000011F8  6700 0162                264          BEQ     ADDIMD
000011FC                           265  
000011FC                           266  MOVL
000011FC  E20A                     267          LSR.B   #1, D2
000011FE  13C2 000020EC            268          MOVE.B  D2, bit1
00001204                           269          
00001204  1416                     270          MOVE.B  (A6), D2
00001206  EB0A                     271          LSL.B   #5, D2
00001208  EA0A                     272          LSR.B   #5, D2
0000120A  13C2 000020EF            273          MOVE.B  D2, bit4
00001210                           274          
00001210  1416                     275          MOVE.B  (A6), D2
00001212  E50A                     276          LSL.B   #2, D2
00001214  EA0A                     277          LSR.B   #5, D2
00001216  13C2 000020EE            278          MOVE.B  D2, bit3
0000121C                           279          
0000121C  EF4E                     280          LSL.W   #7, D6
0000121E  E04E                     281          LSR.W   #8, D6 
00001220  EA4E                     282          LSR.W   #5, D6 
00001222  13C6 000020ED            283          MOVE.B  D6, bit2
00001228                           284          
00001228  0C39 0001 000020ED       285          CMP.B   #$1, bit2
00001230  6700 0056                286          BEQ     MOVEAL
00001234                           287  
00001234  43F9 00002078            288          LEA MMOVEL, A1
0000123A  103C 000E                289          MOVE.B  #14, D0
0000123E  4E4F                     290          TRAP    #15 
00001240                           291          
00001240  0C39 0000 000020EE       292          CMP.B   #$0, bit3           
00001248  6700 0346                293          BEQ     MOVBDN1
0000124C  0C39 0001 000020EE       294          CMP.B   #$1, bit3
00001254  6700 012A                295          BEQ     MOVEAN1
00001258  0C39 0002 000020EE       296          CMP.B   #$2, bit3
00001260  6700 018A                297          BEQ     MOVEIAN1
00001264  0C39 0003 000020EE       298          CMP.B   #$3, bit3
0000126C  6700 0202                299          BEQ     MOVEIANI1
00001270  0C39 0004 000020EE       300          CMP.B   #$4, bit3
00001278  6700 0286                301          BEQ     MOVEIAND1
0000127C  0C39 0007 000020EE       302          CMP.B   #$7, bit3
00001284  6700 00D6                303          BEQ     ADDIMD
00001288                           304          
00001288                           305  MOVEAL
00001288  43F9 00002087            306          LEA MMOVEAL, A1
0000128E  103C 000E                307          MOVE.B  #14, D0
00001292  4E4F                     308          TRAP    #15 
00001294                           309          
00001294  0C39 0000 000020EE       310          CMP.B   #$0, bit3           
0000129C  6700 02F2                311          BEQ     MOVBDN1
000012A0  0C39 0001 000020EE       312          CMP.B   #$1, bit3
000012A8  6700 00D6                313          BEQ     MOVEAN1
000012AC  0C39 0002 000020EE       314          CMP.B   #$2, bit3
000012B4  6700 0136                315          BEQ     MOVEIAN1
000012B8  0C39 0003 000020EE       316          CMP.B   #$3, bit3
000012C0  6700 01AE                317          BEQ     MOVEIANI1
000012C4  0C39 0004 000020EE       318          CMP.B   #$4, bit3
000012CC  6700 0232                319          BEQ     MOVEIAND1
000012D0  0C39 0007 000020EE       320          CMP.B   #$7, bit3
000012D8  6700 0082                321          BEQ     ADDIMD        
000012DC                           322  
000012DC                           323  MOVB
000012DC  43F9 0000206A            324          LEA MMOVEB, A1
000012E2  103C 000E                325          MOVE.B  #14, D0
000012E6  4E4F                     326          TRAP    #15 
000012E8                           327          
000012E8  E20A                     328          LSR.B   #1, D2
000012EA  13C2 000020EC            329          MOVE.B  D2, bit1
000012F0                           330          
000012F0  1416                     331          MOVE.B  (A6), D2
000012F2  EB0A                     332          LSL.B   #5, D2
000012F4  EA0A                     333          LSR.B   #5, D2
000012F6  13C2 000020EF            334          MOVE.B  D2, bit4
000012FC                           335          
000012FC  1416                     336          MOVE.B  (A6), D2
000012FE  E50A                     337          LSL.B   #2, D2
00001300  EA0A                     338          LSR.B   #5, D2
00001302  13C2 000020EE            339          MOVE.B  D2, bit3
00001308                           340          
00001308  EF4E                     341          LSL.W   #7, D6
0000130A  E04E                     342          LSR.W   #8, D6 
0000130C  EA4E                     343          LSR.W   #5, D6 
0000130E  13C6 000020ED            344          MOVE.B  D6, bit2
00001314                           345          
00001314  0C39 0000 000020EE       346          CMP.B   #$0, bit3           
0000131C  6700 0272                347          BEQ     MOVBDN1
00001320  0C39 0001 000020EE       348          CMP.B   #$1, bit3
00001328  6700 0056                349          BEQ     MOVEAN1
0000132C  0C39 0002 000020EE       350          CMP.B   #$2, bit3
00001334  6700 00B6                351          BEQ     MOVEIAN1
00001338  0C39 0003 000020EE       352          CMP.B   #$3, bit3
00001340  6700 012E                353          BEQ     MOVEIANI1
00001344  0C39 0004 000020EE       354          CMP.B   #$4, bit3
0000134C  6700 01B2                355          BEQ     MOVEIAND1
00001350  0C39 0007 000020EE       356          CMP.B   #$7, bit3
00001358  6700 0002                357          BEQ     ADDIMD
0000135C                           358  
0000135C                           359  ADDIMD
0000135C  0C39 0000 000020EF       360      CMP.B   #$0, bit4
00001364  6700 001A                361      BEQ     ADDIMD0
00001368  0C39 0001 000020EF       362      CMP.B   #$1, bit4
00001370  6700 000E                363      BEQ     ADDIMD1
00001374  0C39 0003 000020EF       364      CMP.B   #$3, bit4
0000137C  6700 0002                365      BEQ     ADDIMD3
00001380                           366  
00001380                           367  ADDIMD0
00001380                           368      * TODO 
00001380                           369  ADDIMD1 
00001380                           370      * TODO
00001380                           371  ADDIMD3
00001380                           372      * TODO    
00001380                           373  MOVEAN1
00001380  43F9 0000203F            374      LEA TAB, A1
00001386  103C 000E                375      MOVE.B  #14,D0
0000138A  4E4F                     376      TRAP    #15
0000138C                           377  
0000138C  43F9 0000204F            378      LEA DISPA,A1
00001392  103C 000E                379      MOVE.B  #14,D0
00001396  4E4F                     380      TRAP    #15
00001398                           381      
00001398  1239 000020EF            382      MOVE.B  bit4, D1
0000139E  103C 0003                383      MOVE.B  #3, D0
000013A2  4E4F                     384      TRAP    #15
000013A4                           385      
000013A4  43F9 00002043            386      LEA COMMA, A1
000013AA  103C 000E                387      MOVE.B  #14,D0
000013AE  4E4F                     388      TRAP    #15
000013B0                           389      
000013B0  0C39 0000 000020ED       390      CMP.B   #$0,bit2
000013B8  6700 0322                391      BEQ     MOVBDN2
000013BC  0C39 0001 000020ED       392      CMP.B   #$1,bit2
000013C4  6700 0236                393      BEQ     MOVEAN2
000013C8  0C39 0002 000020ED       394      CMP.B   #$2, bit2 
000013D0  6700 024A                395      BEQ     MOVIAN2
000013D4  0C39 0003 000020ED       396      CMP.B   #$3, bit2 
000013DC  6700 0276                397      BEQ     MOVIANI2
000013E0  0C39 0004 000020ED       398      CMP.B   #$4, bit2 
000013E8  6700 02AE                399      BEQ     MOVIAND2
000013EC                           400      
000013EC                           401  MOVEIAN1
000013EC  43F9 0000203F            402      LEA TAB, A1
000013F2  103C 000E                403      MOVE.B  #14,D0
000013F6  4E4F                     404      TRAP    #15
000013F8                           405      
000013F8  43F9 00002045            406      LEA OPENBRA, A1
000013FE  103C 000E                407      MOVE.B  #14,D0
00001402  4E4F                     408      TRAP    #15
00001404                           409  
00001404  43F9 0000204F            410      LEA DISPA,A1
0000140A  103C 000E                411      MOVE.B  #14,D0
0000140E  4E4F                     412      TRAP    #15
00001410                           413      
00001410  1239 000020EF            414      MOVE.B  bit4, D1
00001416  103C 0003                415      MOVE.B  #3, D0
0000141A  4E4F                     416      TRAP    #15
0000141C                           417      
0000141C  43F9 00002047            418      LEA CLOSEBRA, A1
00001422  103C 000E                419      MOVE.B  #14,D0
00001426  4E4F                     420      TRAP    #15
00001428                           421      
00001428  43F9 00002043            422      LEA COMMA, A1
0000142E  103C 000E                423      MOVE.B  #14,D0
00001432  4E4F                     424      TRAP    #15
00001434                           425      
00001434  0C39 0000 000020ED       426      CMP.B   #$0,bit2
0000143C  6700 029E                427      BEQ     MOVBDN2
00001440  0C39 0001 000020ED       428      CMP.B   #$1,bit2
00001448  6700 01B2                429      BEQ     MOVEAN2
0000144C  0C39 0002 000020ED       430      CMP.B   #$2, bit2 
00001454  6700 01C6                431      BEQ     MOVIAN2
00001458  0C39 0003 000020ED       432      CMP.B   #$3, bit2 
00001460  6700 01F2                433      BEQ     MOVIANI2
00001464  0C39 0004 000020ED       434      CMP.B   #$4, bit2 
0000146C  6700 022A                435      BEQ     MOVIAND2
00001470                           436  
00001470                           437  MOVEIANI1
00001470  43F9 0000203F            438      LEA TAB, A1
00001476  103C 000E                439      MOVE.B  #14,D0
0000147A  4E4F                     440      TRAP    #15
0000147C                           441      
0000147C  43F9 00002045            442      LEA OPENBRA, A1
00001482  103C 000E                443      MOVE.B  #14,D0
00001486  4E4F                     444      TRAP    #15
00001488                           445  
00001488  43F9 0000204F            446      LEA DISPA,A1
0000148E  103C 000E                447      MOVE.B  #14,D0
00001492  4E4F                     448      TRAP    #15
00001494                           449      
00001494  1239 000020EF            450      MOVE.B  bit4, D1
0000149A  103C 0003                451      MOVE.B  #3, D0
0000149E  4E4F                     452      TRAP    #15
000014A0                           453      
000014A0  43F9 00002047            454      LEA CLOSEBRA, A1
000014A6  103C 000E                455      MOVE.B  #14,D0
000014AA  4E4F                     456      TRAP    #15
000014AC                           457      
000014AC  43F9 00002049            458      LEA POS, A1
000014B2  103C 000E                459      MOVE.B  #14,D0
000014B6  4E4F                     460      TRAP    #15
000014B8                           461      
000014B8  43F9 00002043            462      LEA COMMA, A1
000014BE  103C 000E                463      MOVE.B  #14,D0
000014C2  4E4F                     464      TRAP    #15
000014C4                           465      
000014C4  0C39 0000 000020ED       466      CMP.B   #$0,bit2
000014CC  6700 020E                467      BEQ     MOVBDN2
000014D0  0C39 0001 000020ED       468      CMP.B   #$1,bit2
000014D8  6700 0122                469      BEQ     MOVEAN2
000014DC  0C39 0002 000020ED       470      CMP.B   #$2, bit2 
000014E4  6700 0136                471      BEQ     MOVIAN2
000014E8  0C39 0003 000020ED       472      CMP.B   #$3, bit2 
000014F0  6700 0162                473      BEQ     MOVIANI2
000014F4  0C39 0004 000020ED       474      CMP.B   #$4, bit2 
000014FC  6700 019A                475      BEQ     MOVIAND2
00001500                           476  
00001500                           477  MOVEIAND1
00001500  43F9 0000203F            478      LEA TAB, A1
00001506  103C 000E                479      MOVE.B  #14,D0
0000150A  4E4F                     480      TRAP    #15
0000150C                           481      
0000150C  43F9 0000204B            482      LEA NEG, A1
00001512  103C 000E                483      MOVE.B  #14,D0
00001516  4E4F                     484      TRAP    #15
00001518                           485      
00001518  43F9 00002045            486      LEA OPENBRA, A1
0000151E  103C 000E                487      MOVE.B  #14,D0
00001522  4E4F                     488      TRAP    #15
00001524                           489  
00001524  43F9 0000204F            490      LEA DISPA,A1
0000152A  103C 000E                491      MOVE.B  #14,D0
0000152E  4E4F                     492      TRAP    #15
00001530                           493      
00001530  1239 000020EF            494      MOVE.B  bit4, D1
00001536  103C 0003                495      MOVE.B  #3, D0
0000153A  4E4F                     496      TRAP    #15
0000153C                           497      
0000153C  43F9 00002047            498      LEA CLOSEBRA, A1
00001542  103C 000E                499      MOVE.B  #14,D0
00001546  4E4F                     500      TRAP    #15
00001548                           501      
00001548  43F9 00002043            502      LEA COMMA, A1
0000154E  103C 000E                503      MOVE.B  #14,D0
00001552  4E4F                     504      TRAP    #15
00001554                           505      
00001554  0C39 0000 000020ED       506      CMP.B   #$0,bit2
0000155C  6700 017E                507      BEQ     MOVBDN2
00001560  0C39 0001 000020ED       508      CMP.B   #$1,bit2
00001568  6700 0092                509      BEQ     MOVEAN2
0000156C  0C39 0002 000020ED       510      CMP.B   #$2, bit2 
00001574  6700 00A6                511      BEQ     MOVIAN2
00001578  0C39 0003 000020ED       512      CMP.B   #$3, bit2 
00001580  6700 00D2                513      BEQ     MOVIANI2
00001584  0C39 0004 000020ED       514      CMP.B   #$4, bit2 
0000158C  6700 010A                515      BEQ     MOVIAND2
00001590                           516  
00001590                           517  MOVBDN1
00001590  43F9 0000203F            518      LEA TAB, A1
00001596  103C 000E                519      MOVE.B  #14,D0
0000159A  4E4F                     520      TRAP    #15
0000159C                           521      
0000159C  43F9 00002055            522      LEA DISPD, A1
000015A2  103C 000E                523      MOVE.B  #14,D0
000015A6  4E4F                     524      TRAP    #15
000015A8                           525      
000015A8  1239 000020EF            526      MOVE.B  bit4, D1
000015AE  103C 0003                527      MOVE.B  #3,D0
000015B2  4E4F                     528      TRAP    #15
000015B4                           529      
000015B4  43F9 00002043            530      LEA COMMA, A1
000015BA  103C 000E                531      MOVE.B  #14,D0
000015BE  4E4F                     532      TRAP    #15
000015C0                           533      
000015C0  0C39 0000 000020ED       534      CMP.B   #$0,bit2
000015C8  6700 0112                535      BEQ     MOVBDN2
000015CC  0C39 0001 000020ED       536      CMP.B   #$1,bit2
000015D4  6700 0026                537      BEQ     MOVEAN2
000015D8  0C39 0002 000020ED       538      CMP.B   #$2, bit2 
000015E0  6700 003A                539      BEQ     MOVIAN2
000015E4  0C39 0003 000020ED       540      CMP.B   #$3, bit2 
000015EC  6700 0066                541      BEQ     MOVIANI2
000015F0  0C39 0004 000020ED       542      CMP.B   #$4, bit2 
000015F8  6700 009E                543      BEQ     MOVIAND2
000015FC                           544      
000015FC                           545  MOVEAN2
000015FC  43F9 0000204F            546      LEA DISPA,A1
00001602  103C 000E                547      MOVE.B  #14,D0
00001606  4E4F                     548      TRAP    #15
00001608                           549      
00001608  1239 000020EC            550      MOVE.B  bit1, D1
0000160E  103C 0003                551      MOVE.B  #3, D0
00001612  4E4F                     552      TRAP    #15
00001614                           553  
00001614  11DE 7500                554      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001618  6000 097A                555      BRA     ENDNEWLINE    
0000161C                           556      
0000161C                           557  MOVIAN2
0000161C  43F9 00002045            558      LEA OPENBRA, A1
00001622  103C 000E                559      MOVE.B  #14,D0
00001626  4E4F                     560      TRAP    #15
00001628                           561  
00001628  43F9 0000204F            562      LEA DISPA,A1
0000162E  103C 000E                563      MOVE.B  #14,D0
00001632  4E4F                     564      TRAP    #15
00001634                           565      
00001634  1239 000020EC            566      MOVE.B  bit1, D1
0000163A  103C 0003                567      MOVE.B  #3, D0
0000163E  4E4F                     568      TRAP    #15
00001640                           569      
00001640  43F9 00002047            570      LEA CLOSEBRA, A1
00001646  103C 000E                571      MOVE.B  #14,D0
0000164A  4E4F                     572      TRAP    #15
0000164C                           573      
0000164C  11DE 7500                574      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001650  6000 0942                575      BRA     ENDNEWLINE
00001654                           576  
00001654                           577  MOVIANI2
00001654  43F9 00002045            578      LEA OPENBRA, A1
0000165A  103C 000E                579      MOVE.B  #14,D0
0000165E  4E4F                     580      TRAP    #15
00001660                           581  
00001660  43F9 0000204F            582      LEA DISPA,A1
00001666  103C 000E                583      MOVE.B  #14,D0
0000166A  4E4F                     584      TRAP    #15
0000166C                           585      
0000166C  1239 000020EC            586      MOVE.B  bit1, D1
00001672  103C 0003                587      MOVE.B  #3, D0
00001676  4E4F                     588      TRAP    #15
00001678                           589      
00001678  43F9 00002047            590      LEA CLOSEBRA, A1
0000167E  103C 000E                591      MOVE.B  #14,D0
00001682  4E4F                     592      TRAP    #15
00001684                           593      
00001684  43F9 00002049            594      LEA POS, A1
0000168A  103C 000E                595      MOVE.B  #14,D0
0000168E  4E4F                     596      TRAP    #15
00001690                           597      
00001690  11DE 7500                598      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
00001694  6000 08FE                599      BRA     ENDNEWLINE
00001698                           600  
00001698                           601  MOVIAND2
00001698  43F9 0000204B            602      LEA NEG, A1
0000169E  103C 000E                603      MOVE.B  #14,D0
000016A2  4E4F                     604      TRAP    #15
000016A4                           605      
000016A4  43F9 00002045            606      LEA OPENBRA, A1
000016AA  103C 000E                607      MOVE.B  #14,D0
000016AE  4E4F                     608      TRAP    #15
000016B0                           609  
000016B0  43F9 0000204F            610      LEA DISPA,A1
000016B6  103C 000E                611      MOVE.B  #14,D0
000016BA  4E4F                     612      TRAP    #15
000016BC                           613      
000016BC  1239 000020EC            614      MOVE.B  bit1, D1
000016C2  103C 0003                615      MOVE.B  #3, D0
000016C6  4E4F                     616      TRAP    #15
000016C8                           617      
000016C8  43F9 00002047            618      LEA CLOSEBRA, A1
000016CE  103C 000E                619      MOVE.B  #14,D0
000016D2  4E4F                     620      TRAP    #15
000016D4                           621  
000016D4  11DE 7500                622      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000016D8  6000 08BA                623      BRA     ENDNEWLINE
000016DC                           624  
000016DC                           625  MOVBDN2
000016DC  43F9 00002055            626      LEA DISPD, A1
000016E2  103C 000E                627      MOVE.B  #14,D0
000016E6  4E4F                     628      TRAP    #15
000016E8                           629          
000016E8  1239 000020EC            630      MOVE.B  bit1, D1
000016EE  103C 0003                631      MOVE.B  #3,D0
000016F2  4E4F                     632      TRAP    #15   
000016F4                           633      
000016F4  11DE 7500                634      MOVE.B  (A6)+, $7500            * Kind of sketch but makes it work 
000016F8  6000 089A                635      BRA     ENDNEWLINE
000016FC                           636      
000016FC                           637      
000016FC                           638  ******************************************************************************************************
000016FC                           639  *   Immediate data arithmetic operations
000016FC                           640  *   SUBI
000016FC                           641  
000016FC  13C5 000020EC            642  IMD     MOVE.B  D5,bit1
00001702  141E                     643          MOVE.B  (A6)+,D2
00001704                           644  
00001704  DE02                     645          ADD.B   D2,D7
00001706                           646  
00001706  1602                     647          MOVE.B  D2,D3               Copies data at D2 to D3
00001708                           648          *   this gets digit in 10's place
00001708  E80B                     649          LSR.B   #4,D3               Shifts right to get rid of 1's place
0000170A                           650          *   this gets digit in 1's place
0000170A  E90A                     651          LSL.B   #4,D2               Shifts left to get rid of 10's place
0000170C  E80A                     652          LSR.B   #4,D2               Shifts back right into 1's place
0000170E                           653  
0000170E                           654          *   D3 holds digit in 10's place
0000170E                           655          *   D2 holds digit in 1's place
0000170E                           656  
0000170E  E20B                     657          LSR.B   #1,D3
00001710  6400 0004                658          BCC     IMD2
00001714  5404                     659          ADD.B   #$2,D4
00001716  E20B                     660  IMD2    LSR.B   #1,D3
00001718  6400 0004                661          BCC     IMD3
0000171C  5804                     662          ADD.B   #$4,D4
0000171E  B43C 0007                663  IMD3    CMP.B   #$7,D2
00001722  6D00 0006                664          BLT     IMD4
00001726  5204                     665          ADD.B   #$1,D4
00001728  5102                     666          SUB.B   #$8,D2
0000172A                           667  
0000172A                           668          *   Stores them into addr
0000172A  13C3 000020ED            669  IMD4    MOVE.B  D3,bit2
00001730  13C4 000020EE            670          MOVE.B  D4,bit3
00001736  13C2 000020EF            671          MOVE.B  D2,bit4
0000173C                           672  
0000173C                           673  **************************
0000173C                           674  * This finds the size of the operation
0000173C                           675  
0000173C  0C39 0000 000020ED       676          CMP.B   #$0,bit2
00001744  6700 0068                677          BEQ     IMDBYTE
00001748  0C39 0001 000020ED       678          CMP.B   #$1,bit2
00001750  6700 006C                679          BEQ     IMDWORD
00001754  0C39 0002 000020ED       680          CMP.B   #$2,bit2
0000175C  6700 006E                681          BEQ     IMDLONG
00001760  6000 07C0                682          BRA     INVOP
00001764                           683  
00001764                           684  *************************************************************
00001764                           685  * Display IMD op-code
00001764                           686  IMDPRINT
00001764  0C39 0000 000020EC       687          CMP.B   #$0,bit1
0000176C  6700 001A                688          BEQ     IMDPRINTORI
00001770  0C39 0004 000020EC       689          CMP.B   #$4,bit1
00001778  6700 0018                690          BEQ     IMDPRINTSUBI
0000177C  0C39 0006 000020EC       691          CMP.B   #$6,bit1
00001784  6700 0016                692          BEQ     IMDPRINTNOT
00001788                           693  
00001788                           694  IMDPRINTORI
00001788  43F9 000020AF            695          LEA     MORI,A1
0000178E  6000 0016                696          BRA     IMDPRINTEND
00001792                           697  
00001792                           698  IMDPRINTSUBI
00001792  43F9 000020A9            699          LEA     MSUBI,A1
00001798  6000 000C                700          BRA     IMDPRINTEND
0000179C                           701  
0000179C                           702  * NOT isn't part of immediate operation, but they share similar structure so I put it here too
0000179C                           703  IMDPRINTNOT
0000179C  43F9 000020B4            704          LEA     MNOT,A1
000017A2  6000 0002                705          BRA     IMDPRINTEND
000017A6                           706  
000017A6                           707  IMDPRINTEND
000017A6  103C 000E                708          MOVE.B  #14,D0
000017AA  4E4F                     709          TRAP    #15
000017AC  4E75                     710          RTS
000017AE                           711  
000017AE                           712  *************************************************************
000017AE                           713  * Immediate data operation size BYTE
000017AE                           714  IMDBYTE
000017AE  61B4                     715          BSR     IMDPRINT
000017B0  43F9 0000205D            716          LEA     MBYTE,A1
000017B6                           717  
000017B6                           718          * Moves size to D4, needed to use DISPEA
000017B6  183C 0001                719          MOVE.B  #$1,D4
000017BA  6000 001A                720          BRA     IMDEA
000017BE                           721  
000017BE                           722  *************************************************************
000017BE                           723  * Immediate data operation size WORD
000017BE                           724  IMDWORD
000017BE  61A4                     725          BSR     IMDPRINT
000017C0  43F9 00002060            726          LEA     MWORD,A1
000017C6                           727  
000017C6  1803                     728          MOVE.B  D3,D4
000017C8  6000 000C                729          BRA     IMDEA
000017CC                           730  
000017CC                           731  
000017CC                           732  *************************************************************
000017CC                           733  * Immediate data operation size LONG
000017CC                           734  IMDLONG
000017CC  6196                     735          BSR     IMDPRINT
000017CE  43F9 00002063            736          LEA     MLONG,A1
000017D4                           737          
000017D4                           738  
000017D4                           739          * Moves size to D4, needed to use DISPEA
000017D4  1803                     740          MOVE.B  D3,D4
000017D6                           741  
000017D6                           742  IMDEA
000017D6                           743          * This prints out the size and creates tab
000017D6  103C 000E                744          MOVE.B  #14,D0
000017DA  4E4F                     745          TRAP    #15
000017DC  43F9 0000203F            746          LEA     TAB,A1
000017E2  103C 000E                747          MOVE.B  #14,D0
000017E6  4E4F                     748          TRAP    #15
000017E8                           749          * Loads return address into A2
000017E8  45F9 000017F2            750          LEA     IMDEA2,A2
000017EE  6000 06CA                751          BRA     DISPEA
000017F2                           752  IMDEA2
000017F2  43F9 00002043            753          LEA     COMMA,A1
000017F8  103C 000E                754          MOVE.B  #14,D0
000017FC  4E4F                     755          TRAP    #15
000017FE                           756  
000017FE  45F9 00001808            757          LEA     IMDEA3,A2
00001804  6000 0564                758          BRA     SUBEA
00001808                           759  IMDEA3
00001808  6000 078A                760          BRA     ENDNEWLINE
0000180C                           761  
0000180C                           762  ******************************************************************************************************
0000180C                           763  * Miscellaneous section
0000180C                           764  *   Not goes here
0000180C                           765  
0000180C                           766  MISC
0000180C  13C5 000020EC            767          MOVE.B  D5,bit1
00001812  141E                     768          MOVE.B  (A6)+,D2
00001814                           769  
00001814  DE02                     770          ADD.B   D2,D7
00001816                           771  
00001816  1602                     772          MOVE.B  D2,D3               Copies data at D2 to D3
00001818                           773          *   this gets digit in 10's place
00001818  E80B                     774          LSR.B   #4,D3               Shifts right to get rid of 1's place
0000181A                           775          *   this gets digit in 1's place
0000181A  E90A                     776          LSL.B   #4,D2               Shifts left to get rid of 10's place
0000181C  E80A                     777          LSR.B   #4,D2               Shifts back right into 1's place
0000181E                           778  
0000181E                           779          *   D3 holds digit in 10's place
0000181E                           780          *   D2 holds digit in 1's place
0000181E                           781  
0000181E  E20B                     782          LSR.B   #1,D3
00001820  6400 0004                783          BCC     MISC2
00001824  5404                     784          ADD.B   #$2,D4
00001826  E20B                     785  MISC2   LSR.B   #1,D3
00001828  6400 0004                786          BCC     MISC3
0000182C  5804                     787          ADD.B   #$4,D4
0000182E  B43C 0007                788  MISC3   CMP.B   #$7,D2
00001832  6D00 0006                789          BLT     MISC4
00001836  5204                     790          ADD.B   #$1,D4
00001838  5102                     791          SUB.B   #$8,D2
0000183A                           792  
0000183A                           793          *   Stores them into addr
0000183A  13C3 000020ED            794  MISC4   MOVE.B  D3,bit2
00001840  13C4 000020EE            795          MOVE.B  D4,bit3
00001846  13C2 000020EF            796          MOVE.B  D2,bit4
0000184C                           797  
0000184C                           798  **************************
0000184C                           799  * This finds the size of the operation
0000184C                           800  
0000184C  0C39 0006 000020EC       801          CMP.B   #$6,bit1
00001854  6700 0006                802          BEQ     MISCNOT
00001858  6000 06C8                803          BRA     INVOP
0000185C                           804  
0000185C                           805  ******************************************************
0000185C                           806  * NOT
0000185C                           807  * Reuses some of IMD section to display because they have similar format
0000185C                           808  *  (I was kinda lazy too)
0000185C                           809  MISCNOT
0000185C  0C39 0000 000020ED       810          CMP.B   #$0,bit2
00001864  6700 001A                811          BEQ     MISCBYTE
00001868  0C39 0001 000020ED       812          CMP.B   #$1,bit2
00001870  6700 0020                813          BEQ     MISCWORD
00001874  0C39 0002 000020ED       814          CMP.B   #$2,bit2
0000187C  6700 0024                815          BEQ     MISCLONG
00001880                           816  
00001880                           817  *************************************************************
00001880                           818  * Immediate data operation size BYTE
00001880                           819  MISCBYTE
00001880  6100 FEE2                820          BSR     IMDPRINT
00001884  43F9 0000205D            821          LEA     MBYTE,A1
0000188A                           822  
0000188A                           823          * Moves size to D4, needed to use DISPEA
0000188A  183C 0001                824          MOVE.B  #$1,D4
0000188E  6000 001E                825          BRA     MISCEA
00001892                           826  
00001892                           827  *************************************************************
00001892                           828  * Immediate data operation size WORD
00001892                           829  MISCWORD
00001892  6100 FED0                830          BSR     IMDPRINT
00001896  43F9 00002060            831          LEA     MWORD,A1
0000189C                           832  
0000189C  1803                     833          MOVE.B  D3,D4
0000189E  6000 000E                834          BRA     MISCEA
000018A2                           835  
000018A2                           836  
000018A2                           837  *************************************************************
000018A2                           838  * Immediate data operation size LONG
000018A2                           839  MISCLONG
000018A2  6100 FEC0                840          BSR     IMDPRINT
000018A6  43F9 00002063            841          LEA     MLONG,A1
000018AC                           842  
000018AC                           843          * Moves size to D4, needed to use DISPEA
000018AC  1803                     844          MOVE.B  D3,D4
000018AE                           845  
000018AE                           846  MISCEA
000018AE  103C 000E                847          MOVE.B  #14,D0
000018B2  4E4F                     848          TRAP    #15
000018B4  43F9 0000203F            849          LEA     TAB,A1
000018BA  103C 000E                850          MOVE.B  #14,D0
000018BE  4E4F                     851          TRAP    #15
000018C0                           852  
000018C0  45F9 000018CA            853          LEA     MISCEA2,A2
000018C6  6000 04A2                854          BRA     SUBEA
000018CA                           855  MISCEA2
000018CA  6000 06C8                856          BRA     ENDNEWLINE
000018CE                           857  
000018CE                           858  
000018CE                           859  ******************************************************************************************************
000018CE                           860  * SUB section
000018CE                           861  
000018CE                           862          *   Grabs next two nibbles
000018CE  141E                     863  SUB     MOVE.B  (A6)+,D2
000018D0                           864  
000018D0  DE02                     865          ADD.B   D2,D7
000018D2                           866  
000018D2  1602                     867          MOVE.B  D2,D3               Copies data at D2 to D3
000018D4                           868          *   this gets digit in 10's place
000018D4  E80B                     869          LSR.B   #4,D3               Shifts right to get rid of 1's place
000018D6                           870          *   this gets digit in 1's place
000018D6  E90A                     871          LSL.B   #4,D2               Shifts left to get rid of 10's place
000018D8  E80A                     872          LSR.B   #4,D2               Shifts back right into 1's place
000018DA                           873  
000018DA                           874          *   D3 holds digit in 10's place
000018DA                           875          *   D2 holds digit in 1's place
000018DA                           876  
000018DA                           877          
000018DA                           878          *   Converts nibble into 3-bit parts
000018DA  E20B                     879          LSR.B   #1,D3
000018DC  6400 0004                880          BCC     SUB2
000018E0  5404                     881          ADD.B   #$2,D4
000018E2                           882          
000018E2  E20B                     883  SUB2    LSR.B   #1,D3
000018E4  6400 0004                884          BCC     SUB3
000018E8  5804                     885          ADD.B   #$4,D4
000018EA                           886          
000018EA  1205                     887  SUB3    MOVE.B  D5,D1
000018EC  E209                     888          LSR.B   #1,D1
000018EE  6400 0004                889          BCC     SUB4
000018F2  5803                     890          ADD.B   #$4,D3
000018F4                           891  
000018F4  B43C 0007                892  SUB4    CMP.B   #$7,D2
000018F8  6D00 0006                893          BLT     SUB1
000018FC  5204                     894          ADD.B   #$1,D4
000018FE  5102                     895          SUB.B   #$8,D2
00001900                           896  
00001900                           897          *   Stores them into addr
00001900  13C1 000020EC            898  SUB1    MOVE.B  D1,bit1
00001906  13C3 000020ED            899          MOVE.B  D3,bit2
0000190C  13C4 000020EE            900          MOVE.B  D4,bit3
00001912  13C2 000020EF            901          MOVE.B  D2,bit4
00001918                           902  
00001918                           903          * do this later
00001918  4241                     904          CLR     D1
0000191A  7400                     905          MOVE.L  #0,D2
0000191C  7600                     906          MOVE.L  #0,D3
0000191E  7800                     907          MOVE.L  #0,D4
00001920  7A00                     908          MOVE.L  #0,D5
00001922  7C00                     909          MOVE.L  #0,D6
00001924                           910  
00001924                           911          
00001924                           912  ******************************************************************************************************
00001924                           913  * After spliting the op-code into SUB's defined groupings
00001924                           914  *   This figures out which operation it is and goes to that sub-routine
00001924                           915  
00001924                           916          * This will display SUBA instead  -- check this later
00001924  0C39 0003 000020ED       917          CMP.B   #$3,bit2
0000192C  6700 01E6                918          BEQ     SUBA
00001930  0C39 0007 000020ED       919          CMP.B   #$7,bit2
00001938  6700 01DA                920          BEQ     SUBA
0000193C                           921  
0000193C                           922  
0000193C                           923          * This will find the size and stuff
0000193C  0C39 0000 000020ED       924          CMP.B   #$0,bit2
00001944  6700 003E                925          BEQ     SUBSIZE1
00001948  0C39 0001 000020ED       926          CMP.B   #$1,bit2
00001950  6700 0072                927          BEQ     SUBSIZE2
00001954  0C39 0002 000020ED       928          CMP.B   #$2,bit2
0000195C  6700 00A6                929          BEQ     SUBSIZE3
00001960  0C39 0004 000020ED       930          CMP.B   #$4,bit2
00001968  6700 00DA                931          BEQ     SUBSIZE4
0000196C  0C39 0005 000020ED       932          CMP.B   #$5,bit2
00001974  6700 0112                933          BEQ     SUBSIZE5
00001978  0C39 0006 000020ED       934          CMP.B   #$6,bit2
00001980  6700 014A                935          BEQ     SUBSIZE6
00001984                           936     
00001984                           937  ******************************************************************************************************
00001984                           938  *   Displays size, then does operation order
00001984                           939  
00001984                           940  *   000 byte    EA,DN
00001984                           941  SUBSIZE1
00001984  6100 0228                942          BSR     SUBPRINT
00001988  43F9 0000205D            943          LEA     MBYTE,A1
0000198E  103C 000E                944          MOVE.B  #14,D0
00001992  4E4F                     945          TRAP    #15
00001994  43F9 0000203F            946          LEA     TAB,A1
0000199A  103C 000E                947          MOVE.B  #14,D0
0000199E  4E4F                     948          TRAP    #15
000019A0                           949  
000019A0  45F9 000019AA            950          LEA     SUBSIZE11,A2
000019A6  6000 03C2                951          BRA     SUBEA
000019AA                           952  SUBSIZE11
000019AA  45F9 000019C0            953          LEA     SUBSIZE12,A2
000019B0  43F9 00002043            954          LEA     COMMA,A1
000019B6  103C 000E                955          MOVE.B  #14,D0
000019BA  4E4F                     956          TRAP    #15
000019BC  6000 0288                957          BRA     SUBDN
000019C0                           958  SUBSIZE12
000019C0  6000 05D2                959          BRA     ENDNEWLINE
000019C4                           960  
000019C4                           961  *************************************************
000019C4                           962  *   001 word    EA,DN
000019C4                           963  SUBSIZE2
000019C4  6100 01E8                964          BSR     SUBPRINT
000019C8  43F9 00002060            965          LEA     MWORD,A1
000019CE  103C 000E                966          MOVE.B  #14,D0
000019D2  4E4F                     967          TRAP    #15
000019D4  43F9 0000203F            968          LEA     TAB,A1
000019DA  103C 000E                969          MOVE.B  #14,D0
000019DE  4E4F                     970          TRAP    #15
000019E0                           971  
000019E0  45F9 000019EA            972          LEA     SUBSIZE21,A2
000019E6  6000 0382                973          BRA     SUBEA
000019EA                           974  SUBSIZE21
000019EA  45F9 00001A00            975          LEA     SUBSIZE22,A2
000019F0  43F9 00002043            976          LEA     COMMA,A1
000019F6  103C 000E                977          MOVE.B  #14,D0
000019FA  4E4F                     978          TRAP    #15
000019FC  6000 0248                979          BRA     SUBDN
00001A00                           980  SUBSIZE22
00001A00  6000 0592                981          BRA     ENDNEWLINE
00001A04                           982  
00001A04                           983  *************************************************
00001A04                           984  *   010 long    EA,DN
00001A04                           985  SUBSIZE3
00001A04  6100 01A8                986          BSR     SUBPRINT
00001A08  43F9 00002063            987          LEA     MLONG,A1
00001A0E  103C 000E                988          MOVE.B  #14,D0
00001A12  4E4F                     989          TRAP    #15
00001A14  43F9 0000203F            990          LEA     TAB,A1
00001A1A  103C 000E                991          MOVE.B  #14,D0
00001A1E  4E4F                     992          TRAP    #15
00001A20                           993  
00001A20  45F9 00001A2A            994          LEA     SUBSIZE31,A2
00001A26  6000 0342                995          BRA     SUBEA
00001A2A                           996  SUBSIZE31
00001A2A  45F9 00001A40            997          LEA     SUBSIZE32,A2
00001A30  43F9 00002043            998          LEA     COMMA,A1
00001A36  103C 000E                999          MOVE.B  #14,D0
00001A3A  4E4F                    1000          TRAP    #15
00001A3C  6000 0208               1001          BRA     SUBDN
00001A40                          1002  SUBSIZE32
00001A40  6000 0552               1003          BRA     ENDNEWLINE
00001A44                          1004  
00001A44                          1005  *************************************************
00001A44                          1006  *   100 byte    DN,EA
00001A44                          1007  SUBSIZE4
00001A44  6100 0168               1008          BSR     SUBPRINT
00001A48  43F9 0000205D           1009          LEA     MBYTE,A1
00001A4E  103C 000E               1010          MOVE.B  #14,D0
00001A52  4E4F                    1011          TRAP    #15
00001A54  43F9 0000203F           1012          LEA     TAB,A1
00001A5A  103C 000E               1013          MOVE.B  #14,D0
00001A5E  4E4F                    1014          TRAP    #15
00001A60                          1015  
00001A60  6100 01A2               1016          BSR     SUBERRORTEST1
00001A64                          1017  
00001A64  45F9 00001A6E           1018          LEA     SUBSIZE41,A2
00001A6A  6000 01DA               1019          BRA     SUBDN
00001A6E                          1020  SUBSIZE41
00001A6E  45F9 00001A84           1021          LEA     SUBSIZE42,A2
00001A74  43F9 00002043           1022          LEA     COMMA,A1
00001A7A  103C 000E               1023          MOVE.B  #14,D0
00001A7E  4E4F                    1024          TRAP    #15
00001A80  6000 02E8               1025          BRA     SUBEA
00001A84                          1026  SUBSIZE42
00001A84  6000 050E               1027          BRA     ENDNEWLINE
00001A88                          1028  
00001A88                          1029  *************************************************
00001A88                          1030  *   101 word    DN,EA
00001A88                          1031  SUBSIZE5
00001A88  6100 017A               1032          BSR     SUBERRORTEST1               * This does error testing
00001A8C  6100 0120               1033          BSR     SUBPRINT                    * Prints out 'SUB.'
00001A90  43F9 00002060           1034          LEA     MWORD,A1
00001A96  103C 000E               1035          MOVE.B  #14,D0
00001A9A  4E4F                    1036          TRAP    #15
00001A9C  43F9 0000203F           1037          LEA     TAB,A1
00001AA2  103C 000E               1038          MOVE.B  #14,D0
00001AA6  4E4F                    1039          TRAP    #15
00001AA8                          1040  
00001AA8  45F9 00001AB2           1041          LEA     SUBSIZE51,A2
00001AAE  6000 0196               1042          BRA     SUBDN
00001AB2                          1043  SUBSIZE51
00001AB2  45F9 00001AC8           1044          LEA     SUBSIZE52,A2
00001AB8  43F9 00002043           1045          LEA     COMMA,A1
00001ABE  103C 000E               1046          MOVE.B  #14,D0
00001AC2  4E4F                    1047          TRAP    #15
00001AC4  6000 02A4               1048          BRA     SUBEA
00001AC8                          1049  SUBSIZE52
00001AC8  6000 04CA               1050          BRA     ENDNEWLINE
00001ACC                          1051  
00001ACC                          1052  *************************************************
00001ACC                          1053  *   110 long    DN,EA
00001ACC                          1054  SUBSIZE6
00001ACC  6100 0136               1055          BSR     SUBERRORTEST1               * This does error testing
00001AD0  6100 00DC               1056          BSR     SUBPRINT                    * Prints out 'SUB.'
00001AD4  43F9 00002063           1057          LEA     MLONG,A1
00001ADA  103C 000E               1058          MOVE.B  #14,D0
00001ADE  4E4F                    1059          TRAP    #15
00001AE0  43F9 0000203F           1060          LEA     TAB,A1
00001AE6  103C 000E               1061          MOVE.B  #14,D0
00001AEA  4E4F                    1062          TRAP    #15
00001AEC                          1063  
00001AEC  6100 0116               1064          BSR     SUBERRORTEST1
00001AF0                          1065  
00001AF0  45F9 00001AFA           1066          LEA     SUBSIZE61,A2
00001AF6  6000 014E               1067          BRA     SUBDN
00001AFA                          1068  SUBSIZE61
00001AFA  45F9 00001B10           1069          LEA     SUBSIZE62,A2
00001B00  43F9 00002043           1070          LEA     COMMA,A1
00001B06  103C 000E               1071          MOVE.B  #14,D0
00001B0A  4E4F                    1072          TRAP    #15
00001B0C  6000 025C               1073          BRA     SUBEA
00001B10                          1074  SUBSIZE62
00001B10  6000 0482               1075          BRA     ENDNEWLINE
00001B14                          1076  
00001B14                          1077  ****************************************************************************
00001B14                          1078  *   This section is for SUBA
00001B14                          1079  *   Displays 'SUBA.' then decodes the op-code as SUBA
00001B14                          1080  SUBA
00001B14  43F9 00002099           1081          LEA     MSUBA,A1                    Displays 'SUBA.'
00001B1A  103C 000E               1082          MOVE.B  #14,D0
00001B1E  4E4F                    1083          TRAP    #15
00001B20                          1084          
00001B20                          1085          * Does the rest of SUBA
00001B20  0C39 0003 000020ED      1086          CMP.B   #$3,bit2
00001B28  6700 000E               1087          BEQ     SUBSIZE7
00001B2C  0C39 0007 000020ED      1088          CMP.B   #$7,bit2
00001B34  6700 003E               1089          BEQ     SUBSIZE8
00001B38                          1090  
00001B38                          1091  *************************************************
00001B38                          1092  *   SUBA Word   ea,An
00001B38                          1093  SUBSIZE7
00001B38  43F9 00002060           1094          LEA     MWORD,A1
00001B3E  103C 000E               1095          MOVE.B  #14,D0
00001B42  4E4F                    1096          TRAP    #15
00001B44  43F9 0000203F           1097          LEA     TAB,A1
00001B4A  103C 000E               1098          MOVE.B  #14,D0
00001B4E  4E4F                    1099          TRAP    #15
00001B50                          1100  
00001B50  45F9 00001B5A           1101          LEA     SUBSIZE71,A2
00001B56  6000 0212               1102          BRA     SUBEA
00001B5A                          1103  SUBSIZE71
00001B5A  45F9 00001B70           1104          LEA     SUBSIZE72,A2
00001B60  43F9 00002043           1105          LEA     COMMA,A1
00001B66  103C 000E               1106          MOVE.B  #14,D0
00001B6A  4E4F                    1107          TRAP    #15
00001B6C  6000 012C               1108          BRA     SUBAN2
00001B70                          1109  SUBSIZE72
00001B70  6000 0422               1110          BRA     ENDNEWLINE
00001B74                          1111  
00001B74                          1112  *************************************************
00001B74                          1113  *   SUBA longword   ea,An
00001B74                          1114  SUBSIZE8
00001B74  43F9 00002063           1115          LEA     MLONG,A1
00001B7A  103C 000E               1116          MOVE.B  #14,D0
00001B7E  4E4F                    1117          TRAP    #15
00001B80  43F9 0000203F           1118          LEA     TAB,A1
00001B86  103C 000E               1119          MOVE.B  #14,D0
00001B8A  4E4F                    1120          TRAP    #15
00001B8C                          1121  
00001B8C  45F8 1B5A               1122          LEA     SUBSIZE71,A2
00001B90  6000 01D8               1123          BRA     SUBEA
00001B94                          1124  SUBSIZE81
00001B94  45F8 1B70               1125          LEA     SUBSIZE72,A2
00001B98  43F9 00002043           1126          LEA     COMMA,A1
00001B9E  103C 000E               1127          MOVE.B  #14,D0
00001BA2  4E4F                    1128          TRAP    #15
00001BA4  6000 00F4               1129          BRA     SUBAN2
00001BA8                          1130  SUBSIZE82
00001BA8  6000 03EA               1131          BRA     ENDNEWLINE
00001BAC                          1132  
00001BAC                          1133  *************************************************
00001BAC                          1134  * Jumps to memory location at A2
00001BAC                          1135  SUBJMPA2
00001BAC  4ED2                    1136          JMP     (A2)
00001BAE                          1137  
00001BAE                          1138  *************************************************
00001BAE                          1139  * Prints out opcode name
00001BAE                          1140  SUBPRINT
00001BAE  0C39 0009 000020EB      1141          CMP.B   #$9,bit0                Prints SUB
00001BB6  6700 001A               1142          BEQ     SUBPRINTSUB
00001BBA  0C39 000C 000020EB      1143          CMP.B   #$C,bit0                Prints AND
00001BC2  6700 001E               1144          BEQ     SUBPRINTAND
00001BC6  0C39 000D 000020EB      1145          CMP.B   #$D,bit0                Prints ADD
00001BCE  6700 0022               1146          BEQ     SUBPRINTADD
00001BD2                          1147  
00001BD2                          1148  
00001BD2                          1149  
00001BD2                          1150  SUBPRINTSUB   * Displays 'SUB.' 
00001BD2  43F9 00002094           1151          LEA     MSUB,A1
00001BD8  103C 000E               1152          MOVE.B  #14,D0
00001BDC  4E4F                    1153          TRAP    #15
00001BDE  6000 0022               1154          BRA     SUBPRINTEND
00001BE2                          1155  
00001BE2                          1156  SUBPRINTAND   * Displays 'AND.' 
00001BE2  43F9 0000209F           1157          LEA     MAND,A1
00001BE8  103C 000E               1158          MOVE.B  #14,D0
00001BEC  4E4F                    1159          TRAP    #15
00001BEE  6000 0012               1160          BRA     SUBPRINTEND
00001BF2                          1161  
00001BF2                          1162  SUBPRINTADD   * Displays 'ADD.' 
00001BF2  43F9 000020A4           1163          LEA     MADD,A1
00001BF8  103C 000E               1164          MOVE.B  #14,D0
00001BFC  4E4F                    1165          TRAP    #15
00001BFE  6000 0002               1166          BRA     SUBPRINTEND
00001C02                          1167  
00001C02                          1168  
00001C02                          1169  SUBPRINTEND
00001C02  4E75                    1170          RTS
00001C04                          1171  
00001C04                          1172  
00001C04                          1173  *******************************************************************
00001C04                          1174  * Error testing for DN->EA operations
00001C04                          1175  *  Data register, address register, and immediate data cannot be destinations
00001C04                          1176  SUBERRORTEST1
00001C04                          1177          * test for DN or AN register, branches to invalid op code if true
00001C04  0C39 0000 000020EE      1178          CMP.B   #0,bit3
00001C0C  6700 0314               1179          BEQ     INVOP
00001C10  0C39 0001 000020EE      1180          CMP.B   #1,bit3
00001C18  6700 0308               1181          BEQ     INVOP
00001C1C                          1182          
00001C1C                          1183          * check if destination is immediate data
00001C1C  0C39 0007 000020EE      1184          CMP.B   #7,bit3
00001C24  6600 001E               1185          BNE     SUBERRORTEST11
00001C28  0C39 0000 000020EF      1186          CMP.B   #0,bit4
00001C30  6700 0012               1187          BEQ     SUBERRORTEST11
00001C34  0C39 0001 000020EF      1188          CMP.B   #1,bit4
00001C3C  6700 0006               1189          BEQ     SUBERRORTEST11
00001C40  6000 02E0               1190          BRA     INVOP
00001C44                          1191          
00001C44                          1192  SUBERRORTEST11
00001C44  4E75                    1193          RTS
00001C46                          1194  
00001C46                          1195  
00001C46                          1196  ******************************************************************************************************
00001C46                          1197  *   Displays data register
00001C46                          1198  SUBDN
00001C46  43F9 00002066           1199          LEA     MDN,A1
00001C4C  103C 000E               1200          MOVE.B  #14,D0
00001C50  4E4F                    1201          TRAP    #15
00001C52                          1202  
00001C52  1239 000020EC           1203          MOVE.B  bit1,D1
00001C58  103C 0003               1204          MOVE.B  #3,D0
00001C5C  4E4F                    1205          TRAP    #15
00001C5E                          1206          
00001C5E  6000 FF4C               1207          BRA     SUBJMPA2
00001C62                          1208  
00001C62                          1209  *   Displays data register
00001C62                          1210  *   This is for Dn -> Dn cases. Source Dn uses bit4 as register instead of bit1
00001C62                          1211  SUBDN2
00001C62  43F9 00002066           1212          LEA     MDN,A1
00001C68  103C 000E               1213          MOVE.B  #14,D0
00001C6C  4E4F                    1214          TRAP    #15
00001C6E                          1215  
00001C6E  1239 000020EF           1216          MOVE.B  bit4,D1
00001C74  103C 0003               1217          MOVE.B  #3,D0
00001C78  4E4F                    1218          TRAP    #15
00001C7A                          1219          
00001C7A  6000 FF30               1220          BRA     SUBJMPA2
00001C7E                          1221  
00001C7E                          1222  *   Displays address register
00001C7E                          1223  SUBAN
00001C7E  43F9 00002068           1224          LEA     MAN,A1
00001C84  103C 000E               1225          MOVE.B  #14,D0
00001C88  4E4F                    1226          TRAP    #15
00001C8A                          1227  
00001C8A  1239 000020EF           1228          MOVE.B  bit4,D1
00001C90  103C 0003               1229          MOVE.B  #3,D0
00001C94  4E4F                    1230          TRAP    #15
00001C96                          1231          
00001C96  6000 FF14               1232          BRA     SUBJMPA2
00001C9A                          1233  
00001C9A                          1234  *   Displays address register
00001C9A                          1235  *   This is for SUBA, SUBA puts An into bit1
00001C9A                          1236  SUBAN2
00001C9A  43F9 00002068           1237          LEA     MAN,A1
00001CA0  103C 000E               1238          MOVE.B  #14,D0
00001CA4  4E4F                    1239          TRAP    #15
00001CA6                          1240  
00001CA6  1239 000020EC           1241          MOVE.B  bit1,D1
00001CAC  103C 0003               1242          MOVE.B  #3,D0
00001CB0  4E4F                    1243          TRAP    #15
00001CB2                          1244          
00001CB2  6000 FEF8               1245          BRA     SUBJMPA2
00001CB6                          1246  
00001CB6                          1247  
00001CB6                          1248  *   Displays indirect address register
00001CB6                          1249  SUBANID
00001CB6  43F9 00002045           1250          LEA     OPENBRA,A1
00001CBC  103C 000E               1251          MOVE.B  #14,D0
00001CC0  4E4F                    1252          TRAP    #15
00001CC2                          1253  
00001CC2  43F9 00002068           1254          LEA     MAN,A1
00001CC8  103C 000E               1255          MOVE.B  #14,D0
00001CCC  4E4F                    1256          TRAP    #15
00001CCE                          1257  
00001CCE  1239 000020EF           1258          MOVE.B  bit4,D1
00001CD4  103C 0003               1259          MOVE.B  #3,D0
00001CD8  4E4F                    1260          TRAP    #15
00001CDA                          1261  
00001CDA  43F9 00002047           1262          LEA     CLOSEBRA,A1
00001CE0  103C 000E               1263          MOVE.B  #14,D0
00001CE4  4E4F                    1264          TRAP    #15
00001CE6                          1265  
00001CE6  6000 FEC4               1266          BRA     SUBJMPA2
00001CEA                          1267  
00001CEA                          1268  *   Displays indirect address register with post increment
00001CEA                          1269  SUBANIDPOS
00001CEA  43F9 00002045           1270          LEA     OPENBRA,A1
00001CF0  103C 000E               1271          MOVE.B  #14,D0
00001CF4  4E4F                    1272          TRAP    #15
00001CF6                          1273  
00001CF6  43F9 00002068           1274          LEA     MAN,A1
00001CFC  103C 000E               1275          MOVE.B  #14,D0
00001D00  4E4F                    1276          TRAP    #15
00001D02                          1277  
00001D02  1239 000020EF           1278          MOVE.B  bit4,D1
00001D08  103C 0003               1279          MOVE.B  #3,D0
00001D0C  4E4F                    1280          TRAP    #15
00001D0E                          1281  
00001D0E  43F9 00002047           1282          LEA     CLOSEBRA,A1
00001D14  103C 000E               1283          MOVE.B  #14,D0
00001D18  4E4F                    1284          TRAP    #15
00001D1A                          1285  
00001D1A  43F9 00002049           1286          LEA     POS,A1
00001D20  103C 000E               1287          MOVE.B  #14,D0
00001D24  4E4F                    1288          TRAP    #15
00001D26                          1289  
00001D26  6000 FE84               1290          BRA     SUBJMPA2
00001D2A                          1291  
00001D2A                          1292  *   Displays indirect address register with pre decrement
00001D2A                          1293  SUBANIDNEG
00001D2A  43F9 0000204B           1294          LEA     NEG,A1
00001D30  103C 000E               1295          MOVE.B  #14,D0
00001D34  4E4F                    1296          TRAP    #15
00001D36                          1297  
00001D36  43F9 00002045           1298          LEA     OPENBRA,A1
00001D3C  103C 000E               1299          MOVE.B  #14,D0
00001D40  4E4F                    1300          TRAP    #15
00001D42                          1301  
00001D42  43F9 00002068           1302          LEA     MAN,A1
00001D48  103C 000E               1303          MOVE.B  #14,D0
00001D4C  4E4F                    1304          TRAP    #15
00001D4E                          1305  
00001D4E  1239 000020EF           1306          MOVE.B  bit4,D1
00001D54  103C 0003               1307          MOVE.B  #3,D0
00001D58  4E4F                    1308          TRAP    #15
00001D5A                          1309  
00001D5A  43F9 00002047           1310          LEA     CLOSEBRA,A1
00001D60  103C 000E               1311          MOVE.B  #14,D0
00001D64  4E4F                    1312          TRAP    #15
00001D66                          1313  
00001D66  6000 FE44               1314          BRA     SUBJMPA2
00001D6A                          1315  
00001D6A                          1316  
00001D6A                          1317  
00001D6A                          1318  
00001D6A                          1319  ******************************************************************************************************
00001D6A                          1320  * Displays the EA as hex numbers
00001D6A                          1321  * 
00001D6A                          1322  SUBEA
00001D6A                          1323          *   This finds which mode to use
00001D6A  0C39 0000 000020EE      1324          CMP.B   #$0,bit3
00001D72  6700 FEEE               1325          BEQ     SUBDN2
00001D76  0C39 0001 000020EE      1326          CMP.B   #$1,bit3                BYTE SIZED OPERATIONS ARE NOT ALLOWED FOR An
00001D7E  6700 FEFE               1327          BEQ     SUBAN
00001D82  0C39 0002 000020EE      1328          CMP.B   #$2,bit3
00001D8A  6700 FF2A               1329          BEQ     SUBANID
00001D8E  0C39 0003 000020EE      1330          CMP.B   #$3,bit3
00001D96  6700 FF52               1331          BEQ     SUBANIDPOS
00001D9A  0C39 0004 000020EE      1332          CMP.B   #$4,bit3
00001DA2  6786                    1333          BEQ     SUBANIDNEG
00001DA4  0C39 0005 000020EE      1334          CMP.B   #$5,bit3
00001DAC  6700 026A               1335          BEQ     ERROR
00001DB0  0C39 0006 000020EE      1336          CMP.B   #$6,bit3
00001DB8  6700 025E               1337          BEQ     ERROR
00001DBC  0C39 0007 000020EE      1338          CMP.B   #$7,bit3
00001DC4  6700 0002               1339          BEQ     SUBEAHEX
00001DC8                          1340  
00001DC8                          1341  SUBEAHEX
00001DC8  0C39 0004 000020EF      1342          CMP.B   #$4,bit4            Branches to immediate data section of bit4 is 4
00001DD0  6700 0086               1343          BEQ     SUBEAID
00001DD4                          1344  SUBEAID2
00001DD4                          1345          *   Else it will assume it is absolute addressing mode
00001DD4  43F9 0000205B           1346          LEA     MHEX,A1
00001DDA  103C 000E               1347          MOVE.B  #14,D0
00001DDE  4E4F                    1348          TRAP    #15
00001DE0                          1349  
00001DE0  0C39 0000 000020EF      1350          CMP.B   #$0,bit4
00001DE8  6700 007E               1351          BEQ     SUBEAHEX1
00001DEC  0C39 0001 000020EF      1352          CMP.B   #$1,bit4
00001DF4  6700 007A               1353          BEQ     SUBEAHEX2
00001DF8                          1354  
00001DF8  0C39 0000 000020ED      1355          CMP.B   #$0,bit2            * SUB byte displays as word
00001E00  6700 0066               1356          BEQ     SUBEAHEX1
00001E04  0C39 0004 000020ED      1357          CMP.B   #$4,bit2            * SUB byte displays as word
00001E0C  6700 005A               1358          BEQ     SUBEAHEX1
00001E10  0C39 0001 000020ED      1359          CMP.B   #$1,bit2            * SUB word
00001E18  6700 004E               1360          BEQ     SUBEAHEX1
00001E1C  0C39 0005 000020ED      1361          CMP.B   #$5,bit2            * SUB word
00001E24  6700 0042               1362          BEQ     SUBEAHEX1
00001E28  0C39 0003 000020ED      1363          CMP.B   #$3,bit2            * SUBA word
00001E30  6700 0036               1364          BEQ     SUBEAHEX1
00001E34  0C39 0002 000020ED      1365          CMP.B   #$2,bit2            * SUB longword
00001E3C  6700 0032               1366          BEQ     SUBEAHEX2
00001E40  0C39 0006 000020ED      1367          CMP.B   #$6,bit2            * SUB longword
00001E48  6700 0026               1368          BEQ     SUBEAHEX2
00001E4C  0C39 0007 000020ED      1369          CMP.B   #$7,bit2            * SUBA longword
00001E54  6700 001A               1370          BEQ     SUBEAHEX2
00001E58                          1371  
00001E58                          1372  SUBEAID
00001E58  43F9 0000204D           1373          LEA     HASH,A1
00001E5E  103C 000E               1374          MOVE.B  #14,D0
00001E62  4E4F                    1375          TRAP    #15
00001E64  6000 FF6E               1376          BRA     SUBEAID2
00001E68                          1377  
00001E68                          1378  SUBEAHEX1  
00001E68                          1379          *absolute address word
00001E68  1E3C 0002               1380          MOVE.B  #2,D7
00001E6C  6000 000A               1381          BRA     SUBEAHEX3
00001E70                          1382  
00001E70                          1383  SUBEAHEX2  *absolute address long
00001E70  1E3C 0004               1384          MOVE.B  #4,D7
00001E74  6000 0002               1385          BRA     SUBEAHEX3
00001E78                          1386  
00001E78                          1387  SUBEAHEX3
00001E78  BE3C 0000               1388          CMP.B   #0,D7               Compares current addr to ending addr
00001E7C  6700 FD2E               1389          BEQ     SUBJMPA2            Branches to done if they are equal
00001E80                          1390  
00001E80                          1391      
00001E80  141E                    1392          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
00001E82                          1393          
00001E82  1602                    1394          MOVE.B  D2,D3               Copies data at D2 to D3
00001E84                          1395          *   this gets digit in 10's place
00001E84  E80B                    1396          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001E86                          1397          *   this gets digit in 1's place
00001E86  E90A                    1398          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001E88  E80A                    1399          LSR.B   #4,D2               Shifts back right into 1's place
00001E8A                          1400  
00001E8A                          1401          
00001E8A                          1402          *   D3 holds digit in 10's place
00001E8A                          1403          *   D2 holds digit in 1's place
00001E8A                          1404          
00001E8A  1203                    1405          MOVE.B  D3,D1               Displays digit in 10's place first
00001E8C                          1406  
00001E8C                          1407          *   converts digits 10+ into letters
00001E8C                          1408  
00001E8C  47F9 00001EA0           1409          LEA     SUBEAHEX4,A3        Place address of TENS into A3 to continue from there after conversion
00001E92  B23C 0009               1410          CMP.B   #9,D1               Compares digit to 9
00001E96  6E00 010C               1411          BGT     CONV                Print out letter representation if greater than 9
00001E9A                          1412  
00001E9A  103C 0003               1413          MOVE.B  #3,D0               Displays digit if it is less than A
00001E9E  4E4F                    1414          TRAP    #15
00001EA0                          1415          
00001EA0                          1416  SUBEAHEX4    
00001EA0  1202                    1417          MOVE.B  D2,D1               Displays digit in 1's place second
00001EA2                          1418  
00001EA2                          1419          *   converts digits 10+ into letters
00001EA2  47F9 00001EB6           1420          LEA     SUBEAHEX5,A3           Places address of NEXT into A3 to continue from there after conversion
00001EA8  B23C 0009               1421          CMP.B   #9,D1               Compares digit to 9
00001EAC  6E00 00F6               1422          BGT     CONV                Print out letter representation if greater than 9
00001EB0                          1423          
00001EB0  103C 0003               1424          MOVE.B  #3,D0               Displays digit if it is less than A
00001EB4  4E4F                    1425          TRAP    #15
00001EB6                          1426          
00001EB6                          1427  SUBEAHEX5         
00001EB6                          1428  * Display counter -- creates new line every 8 bytes
00001EB6                          1429          * D7 is used as counter
00001EB6                          1430          
00001EB6  5307                    1431          SUB.B   #1,D7                       
00001EB8  60BE                    1432          BRA     SUBEAHEX3              Loops back to display next address
00001EBA                          1433  
00001EBA                          1434  ***   display EA ends here
00001EBA                          1435  
00001EBA                          1436  ******************************************************************************************************
00001EBA                          1437  * Displays the EA as hex numbers
00001EBA                          1438  * INPUT: Size of EA in D4; 1 = word, 2 = longword
00001EBA                          1439  * OUTPUT: Displays size of EA reading from A6
00001EBA                          1440  * Jumps to location stored in A2 when finished
00001EBA                          1441  DISPEA
00001EBA  43F9 0000205B           1442          LEA     MHEX,A1
00001EC0  103C 000E               1443          MOVE.B  #14,D0
00001EC4  4E4F                    1444          TRAP    #15
00001EC6                          1445  
00001EC6  B83C 0002               1446          CMP.B   #$2,D4              Branches to longword display if size is 2
00001ECA  6700 000A               1447          BEQ     DISPEALONG          Else it will assume word length
00001ECE                          1448  
00001ECE                          1449  DISPEAWORD
00001ECE                          1450          *absolute address word
00001ECE  1E3C 0002               1451          MOVE.B  #2,D7
00001ED2  6000 000A               1452          BRA     DISPEA3
00001ED6                          1453   
00001ED6                          1454  DISPEALONG
00001ED6                          1455          *absolute address long
00001ED6  1E3C 0004               1456          MOVE.B  #4,D7
00001EDA  6000 0002               1457          BRA     DISPEA3
00001EDE                          1458  
00001EDE                          1459  DISPEA3
00001EDE  BE3C 0000               1460          CMP.B   #0,D7               Compares current addr to ending addr
00001EE2  6700 FCC8               1461          BEQ     SUBJMPA2            Branches to done if they are equal
00001EE6                          1462  
00001EE6                          1463      
00001EE6  141E                    1464          MOVE.B  (A6)+,D2            Moves data at current address to D1, then increments
00001EE8                          1465          
00001EE8  1602                    1466          MOVE.B  D2,D3               Copies data at D2 to D3
00001EEA                          1467          *   this gets digit in 10's place
00001EEA  E80B                    1468          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001EEC                          1469          *   this gets digit in 1's place
00001EEC  E90A                    1470          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001EEE  E80A                    1471          LSR.B   #4,D2               Shifts back right into 1's place
00001EF0                          1472  
00001EF0                          1473          
00001EF0                          1474          *   D3 holds digit in 10's place
00001EF0                          1475          *   D2 holds digit in 1's place
00001EF0                          1476          
00001EF0  1203                    1477          MOVE.B  D3,D1               Displays digit in 10's place first
00001EF2                          1478  
00001EF2                          1479          *   converts digits 10+ into letters
00001EF2                          1480  
00001EF2  47F9 00001F06           1481          LEA     DISPEA4,A3        Place address of TENS into A3 to continue from there after conversion
00001EF8  B23C 0009               1482          CMP.B   #9,D1               Compares digit to 9
00001EFC  6E00 00A6               1483          BGT     CONV                Print out letter representation if greater than 9
00001F00                          1484  
00001F00  103C 0003               1485          MOVE.B  #3,D0               Displays digit if it is less than A
00001F04  4E4F                    1486          TRAP    #15
00001F06                          1487    
00001F06                          1488  DISPEA4
00001F06  1202                    1489          MOVE.B  D2,D1               Displays digit in 1's place second
00001F08                          1490  
00001F08                          1491          *   converts digits 10+ into letters
00001F08  47F9 00001F1C           1492          LEA     DISPEA5,A3           Places address of NEXT into A3 to continue from there after conversion
00001F0E  B23C 0009               1493          CMP.B   #9,D1               Compares digit to 9
00001F12  6E00 0090               1494          BGT     CONV                Print out letter representation if greater than 9
00001F16                          1495          
00001F16  103C 0003               1496          MOVE.B  #3,D0               Displays digit if it is less than A
00001F1A  4E4F                    1497          TRAP    #15
00001F1C                          1498        
00001F1C                          1499  DISPEA5
00001F1C                          1500  * Display counter -- creates new line every 8 bytes
00001F1C                          1501          * D7 is used as counter
00001F1C                          1502          
00001F1C  5307                    1503          SUB.B   #1,D7                       
00001F1E  60BE                    1504          BRA     DISPEA3              Loops back to display next address
00001F20                          1505  
00001F20                          1506  ***   display EA ends here
00001F20                          1507  
00001F20                          1508  
00001F20                          1509  ********************************************************************
00001F20                          1510  * Invalid op-code handling
00001F20                          1511  * Displays DATA YYYY
00001F20                          1512  *  YYYY represents the op-code that failed
00001F20                          1513  INVOPCODE
00001F20  DE1E                    1514          ADD.B   (A6)+,D7
00001F22                          1515  
00001F22                          1516  INVOP
00001F22  43F9 0000208F           1517          LEA     MDATA,A1
00001F28  103C 000E               1518          MOVE.B  #14,D0
00001F2C  4E4F                    1519          TRAP    #15
00001F2E  43F9 0000203F           1520          LEA     TAB,A1
00001F34  103C 000E               1521          MOVE.B  #14,D0
00001F38  4E4F                    1522          TRAP    #15
00001F3A  43F9 0000205B           1523          LEA     MHEX,A1
00001F40  103C 000E               1524          MOVE.B  #14,D0
00001F44  4E4F                    1525          TRAP    #15
00001F46                          1526          
00001F46  1C3C 0002               1527          MOVE.B  #2,D6               D6 is a counter, used to know loop back once
00001F4A                          1528          
00001F4A  3407                    1529          MOVE.W  D7,D2               Copies opcode saved in D2 to D7
00001F4C  E04A                    1530          LSR.W   #8,D2               Shifts D2 right 8 spaces to get the first byte of the word
00001F4E  6000 0004               1531          BRA     INVOP2              Skips the second part to do later
00001F52                          1532  
00001F52                          1533  INVOP1
00001F52  1407                    1534          MOVE.B  D7,D2
00001F54                          1535  INVOP2
00001F54  1602                    1536          MOVE.B  D2,D3               Copies data at D2 to D3
00001F56                          1537          *   this gets digit in 10's place
00001F56  E80B                    1538          LSR.B   #4,D3               Shifts right to get rid of 1's place
00001F58                          1539          *   this gets digit in 1's place
00001F58  E90A                    1540          LSL.B   #4,D2               Shifts left to get rid of 10's place
00001F5A  E80A                    1541          LSR.B   #4,D2               Shifts back right into 1's place
00001F5C                          1542  
00001F5C                          1543          
00001F5C                          1544          *   D3 holds digit in 10's place
00001F5C                          1545          *   D2 holds digit in 1's place
00001F5C                          1546          
00001F5C  1203                    1547          MOVE.B  D3,D1               Displays digit in 10's place first
00001F5E                          1548  
00001F5E                          1549          *   converts digits 10+ into letters
00001F5E                          1550  
00001F5E  47F9 00001F72           1551          LEA     INVOP3,A3        Place address of TENS into A3 to continue from there after conversion
00001F64  B23C 0009               1552          CMP.B   #9,D1               Compares digit to 9
00001F68  6E00 003A               1553          BGT     CONV                Print out letter representation if greater than 9
00001F6C                          1554  
00001F6C  103C 0003               1555          MOVE.B  #3,D0               Displays digit if it is less than A
00001F70  4E4F                    1556          TRAP    #15
00001F72                          1557          
00001F72                          1558  INVOP3   
00001F72  1202                    1559          MOVE.B  D2,D1               Displays digit in 1's place second
00001F74                          1560  
00001F74                          1561          *   converts digits 10+ into letters
00001F74  47F9 00001F88           1562          LEA     INVOP4,A3           Places address of NEXT into A3 to continue from there after conversion
00001F7A  B23C 0009               1563          CMP.B   #9,D1               Compares digit to 9
00001F7E  6E00 0024               1564          BGT     CONV                Print out letter representation if greater than 9
00001F82                          1565          
00001F82  103C 0003               1566          MOVE.B  #3,D0               Displays digit if it is less than A
00001F86  4E4F                    1567          TRAP    #15
00001F88                          1568          
00001F88                          1569  INVOP4
00001F88                          1570  * Display counter -- creates new line every 8 bytes
00001F88                          1571          * D6 is used as counter
00001F88                          1572          
00001F88  5306                    1573          SUB.B   #1,D6
00001F8A  BC3C 0000               1574          CMP.B   #0,D6
00001F8E  6700 0004               1575          BEQ     ENDNEWLINE
00001F92  60BE                    1576          BRA     INVOP1              Loops back to display next address
00001F94                          1577  
00001F94                          1578  
00001F94                          1579  ******************************************************************************************************
00001F94                          1580  * Creates a new line after an op-code is displayed, loops back to start to display next code
00001F94                          1581  ENDNEWLINE
00001F94  43F9 0000203C           1582          LEA     NEWLINE,A1
00001F9A  103C 000E               1583          MOVE.B  #14,D0
00001F9E  4E4F                    1584          TRAP    #15
00001FA0  6000 F06A               1585          BRA     NEWADDR
00001FA4                          1586  
00001FA4                          1587  ******************************************************************************************************
00001FA4                          1588  * Converts decimal number into hex and displays it
00001FA4                          1589  *   converts number 10-15 to A-F
00001FA4                          1590  *   INPUT: decimal number in D1
00001FA4                          1591  *   OUTPUT: HEX number to output
00001FA4  B23C 000A               1592  CONV    CMP.B   #10,D1              Displays 10 as A
00001FA8  6700 002A               1593          BEQ     HEXA
00001FAC  B23C 000B               1594          CMP.B   #11,D1              Displays 11 as B
00001FB0  6700 002C               1595          BEQ     HEXB
00001FB4  B23C 000C               1596          CMP.B   #12,D1              Displays 12 as C
00001FB8  6700 002E               1597          BEQ     HEXC
00001FBC  B23C 000D               1598          CMP.B   #13,D1              Displays 13 as D
00001FC0  6700 0030               1599          BEQ     HEXD
00001FC4  B23C 000E               1600          CMP.B   #14,D1              Displays 14 as E
00001FC8  6700 0032               1601          BEQ     HEXE
00001FCC  B23C 000F               1602          CMP.B   #15,D1              Displays 15 as F
00001FD0  6700 0034               1603          BEQ     HEXF
00001FD4                          1604  
00001FD4  43F9 0000204F           1605  HEXA    LEA     DISPA,A1            Loads A character
00001FDA  6000 0034               1606          BRA     PRINT
00001FDE                          1607    
00001FDE  43F9 00002051           1608  HEXB    LEA     DISPB,A1            Loads B character
00001FE4  6000 002A               1609          BRA     PRINT
00001FE8                          1610  
00001FE8  43F9 00002053           1611  HEXC    LEA     DISPC,A1            Loads C character
00001FEE  6000 0020               1612          BRA     PRINT
00001FF2                          1613  
00001FF2  43F9 00002055           1614  HEXD    LEA     DISPD,A1            Loads D character
00001FF8  6000 0016               1615          BRA     PRINT
00001FFC                          1616  
00001FFC  43F9 00002057           1617  HEXE    LEA     DISPE,A1            Loads E character
00002002  6000 000C               1618          BRA     PRINT
00002006                          1619  
00002006  43F9 00002059           1620  HEXF    LEA     DISPF,A1            Loads F character
0000200C  6000 0002               1621          BRA     PRINT
00002010                          1622  
00002010  103C 000E               1623  PRINT   MOVE.B  #14,D0              Sets trap task to #14
00002014  4E4F                    1624          TRAP    #15                 Prints out message in A1
00002016  4ED3                    1625          JMP     (A3)
00002018                          1626  
00002018  43F9 000020B9           1627  ERROR   LEA     MERROR,A1
0000201E  103C 000E               1628          MOVE.B  #14,D0
00002022  4E4F                    1629          TRAP    #15
00002024  6000 000E               1630          BRA     EXIT
00002028                          1631  
00002028  43F9 000020D0           1632  DONE    LEA     MDONE,A1
0000202E  103C 000E               1633          MOVE.B  #14,D0
00002032  4E4F                    1634          TRAP    #15
00002034                          1635  
00002034  103C 0009               1636  EXIT    MOVE.B  #9,D0
00002038  4E4F                    1637          TRAP    #15
0000203A                          1638  
0000203A                          1639  ************************************ Output stuff **************************************
0000203A                          1640  * Stuff for output
0000203A                          1641  
0000203A  =0000000D               1642  CR      EQU     $0D
0000203A  =0000000A               1643  LF      EQU     $0A
0000203A                          1644  
0000203A= 20 00                   1645  SPACE       DC.B    ' ',0
0000203C= 0D 0A 00                1646  NEWLINE     DC.B    '',CR,LF,0
0000203F= 20 20 20 00             1647  TAB         DC.B    '   ',0
00002043= 2C 00                   1648  COMMA       DC.B    ',',0
00002045= 28 00                   1649  OPENBRA     DC.B    '(',0
00002047= 29 00                   1650  CLOSEBRA    DC.B    ')',0
00002049= 2B 00                   1651  POS         DC.B    '+',0
0000204B= 2D 00                   1652  NEG         DC.B    '-',0
0000204D= 23 00                   1653  HASH        DC.B    '#',0
0000204F                          1654  
0000204F                          1655  
0000204F= 41 00                   1656  DISPA       DC.B    'A',0
00002051= 42 00                   1657  DISPB       DC.B    'B',0
00002053= 43 00                   1658  DISPC       DC.B    'C',0
00002055= 44 00                   1659  DISPD       DC.B    'D',0
00002057= 45 00                   1660  DISPE       DC.B    'E',0
00002059= 46 00                   1661  DISPF       DC.B    'F',0
0000205B                          1662  
0000205B= 24 00                   1663  MHEX        DC.B    '$',0
0000205D= 42 20 00                1664  MBYTE       DC.B    'B ',0
00002060= 57 20 00                1665  MWORD       DC.B    'W ',0
00002063= 4C 20 00                1666  MLONG       DC.B    'L ',0
00002066= 44 00                   1667  MDN         DC.B    'D',0
00002068= 41 00                   1668  MAN         DC.B    'A',0
0000206A                          1669  
0000206A= 4D 4F 56 45 2E 42 00    1670  MMOVEB      DC.B    'MOVE.B',0
00002071= 4D 4F 56 45 2E 57 00    1671  MMOVEW      DC.B    'MOVE.W',0
00002078= 4D 4F 56 45 2E 4C 00    1672  MMOVEL      DC.B    'MOVE.L',0
0000207F= 4D 4F 56 45 41 2E ...   1673  MMOVEAW     DC.B    'MOVEA.W',0
00002087= 4D 4F 56 45 41 2E ...   1674  MMOVEAL     DC.B    'MOVEA.L',0
0000208F= 44 41 54 41 00          1675  MDATA       DC.B    'DATA',0
00002094= 53 55 42 2E 00          1676  MSUB        DC.B    'SUB.',0
00002099= 53 55 42 41 2E 00       1677  MSUBA       DC.B    'SUBA.',0
0000209F= 41 4E 44 2E 00          1678  MAND        DC.B    'AND.',0
000020A4= 41 44 44 2E 00          1679  MADD        DC.B    'ADD.',0
000020A9= 53 55 42 49 2E 00       1680  MSUBI       DC.B    'SUBI.',0
000020AF= 4F 52 49 2E 00          1681  MORI        DC.B    'ORI.',0
000020B4= 4E 4F 54 2E 00          1682  MNOT        DC.B    'NOT.',0
000020B9                          1683  
000020B9= 45 52 52 4F 52 3A ...   1684  MERROR      DC.B    'ERROR: Something broke',0
000020D0= 43 4F 4D 50 4C 45 ...   1685  MDONE       DC.B    'COMPLETE: IT DID NOT CRASH',0
000020EB                          1686  
000020EB                          1687  
000020EB                          1688  ********************************** MEMORY STORAGE **********************************************
000020EB                          1689  * Stores memory locations at the end of the program
000020EB                          1690  * How DS works: Give it a variable name.
000020EB                          1691  *   DS means Define Storage. Give it a size of how big you want the storage to be (Byte, Word, Longword)
000020EB                          1692  *   Last is the number of storage you want. 
000020EB                          1693  *   Example: DS.W   1   This creates a 1 longword location to be used. Memory would look like: FF FF
000020EB                          1694  *            DS.B   3   This creates three byte-sized locations to be used. Memory would look like: FF FF FF
000020EB                          1695  *            
000020EB                          1696  
000020EB                          1697  bit0        DS.B    1           SEE NOTE UP TOP
000020EC                          1698  bit1        DS.B    1           SEE NOTE UP TOP
000020ED                          1699  bit2        DS.B    1           SEE NOTE UP TOP
000020EE                          1700  bit3        DS.B    1           SEE NOTE UP TOP
000020EF                          1701  bit4        DS.B    1           SEE NOTE UP TOP
000020F0                          1702  
000020F0                          1703  
000020F0                          1704      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDIMD              135C
ADDIMD0             1380
ADDIMD1             1380
ADDIMD3             1380
ADDR1               7000
ADDR2               725A
BIT0                20EB
BIT1                20EC
BIT2                20ED
BIT3                20EE
BIT4                20EF
CLOSEBRA            2047
CODE                10D8
COMMA               2043
CONV                1FA4
CR                  D
DISPA               204F
DISPADDR1           1024
DISPADDR2           1026
DISPADDR3           105A
DISPADDR4           1070
DISPADDR5           1086
DISPADDR6           109C
DISPB               2051
DISPC               2053
DISPD               2055
DISPE               2057
DISPEA              1EBA
DISPEA3             1EDE
DISPEA4             1F06
DISPEA5             1F1C
DISPEALONG          1ED6
DISPEAWORD          1ECE
DISPF               2059
DONE                2028
ENDNEWLINE          1F94
ERROR               2018
EXIT                2034
HASH                204D
HEXA                1FD4
HEXB                1FDE
HEXC                1FE8
HEXD                1FF2
HEXE                1FFC
HEXF                2006
IMD                 16FC
IMD2                1716
IMD3                171E
IMD4                172A
IMDBYTE             17AE
IMDEA               17D6
IMDEA2              17F2
IMDEA3              1808
IMDLONG             17CC
IMDPRINT            1764
IMDPRINTEND         17A6
IMDPRINTNOT         179C
IMDPRINTORI         1788
IMDPRINTSUBI        1792
IMDWORD             17BE
INVOP               1F22
INVOP1              1F52
INVOP2              1F54
INVOP3              1F72
INVOP4              1F88
INVOPCODE           1F20
LF                  A
MADD                20A4
MAN                 2068
MAND                209F
MBYTE               205D
MDATA               208F
MDN                 2066
MDONE               20D0
MERROR              20B9
MHEX                205B
MISC                180C
MISC2               1826
MISC3               182E
MISC4               183A
MISCBYTE            1880
MISCEA              18AE
MISCEA2             18CA
MISCLONG            18A2
MISCNOT             185C
MISCWORD            1892
MLONG               2063
MMOVEAL             2087
MMOVEAW             207F
MMOVEB              206A
MMOVEL              2078
MMOVEW              2071
MNOT                20B4
MORI                20AF
MOVB                12DC
MOVBDN1             1590
MOVBDN2             16DC
MOVEAL              1288
MOVEAN1             1380
MOVEAN2             15FC
MOVEAW              11A8
MOVEIAN1            13EC
MOVEIAND1           1500
MOVEIANI1           1470
MOVIAN2             161C
MOVIAND2            1698
MOVIANI2            1654
MOVL                11FC
MOVW                111C
MSUB                2094
MSUBA               2099
MSUBI               20A9
MWORD               2060
NEG                 204B
NEWADDR             100C
NEWLINE             203C
OPENBRA             2045
POS                 2049
PRINT               2010
SPACE               203A
START               1000
SUB                 18CE
SUB1                1900
SUB2                18E2
SUB3                18EA
SUB4                18F4
SUBA                1B14
SUBAN               1C7E
SUBAN2              1C9A
SUBANID             1CB6
SUBANIDNEG          1D2A
SUBANIDPOS          1CEA
SUBDN               1C46
SUBDN2              1C62
SUBEA               1D6A
SUBEAHEX            1DC8
SUBEAHEX1           1E68
SUBEAHEX2           1E70
SUBEAHEX3           1E78
SUBEAHEX4           1EA0
SUBEAHEX5           1EB6
SUBEAID             1E58
SUBEAID2            1DD4
SUBERRORTEST1       1C04
SUBERRORTEST11      1C44
SUBJMPA2            1BAC
SUBPRINT            1BAE
SUBPRINTADD         1BF2
SUBPRINTAND         1BE2
SUBPRINTEND         1C02
SUBPRINTSUB         1BD2
SUBSIZE1            1984
SUBSIZE11           19AA
SUBSIZE12           19C0
SUBSIZE2            19C4
SUBSIZE21           19EA
SUBSIZE22           1A00
SUBSIZE3            1A04
SUBSIZE31           1A2A
SUBSIZE32           1A40
SUBSIZE4            1A44
SUBSIZE41           1A6E
SUBSIZE42           1A84
SUBSIZE5            1A88
SUBSIZE51           1AB2
SUBSIZE52           1AC8
SUBSIZE6            1ACC
SUBSIZE61           1AFA
SUBSIZE62           1B10
SUBSIZE7            1B38
SUBSIZE71           1B5A
SUBSIZE72           1B70
SUBSIZE8            1B74
SUBSIZE81           1B94
SUBSIZE82           1BA8
TAB                 203F
