00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 11/18/2015 12:52:29 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Lab 2
00000000                             3  * Written by :Phat Tran
00000000                             4  * Date       :10/21/15
00000000                             5  * Description:CSS422 lab work
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000  =00001000                  8  addr1   EQU     $1000               starting address
00000000  =000010A0                  9  addr2   EQU     $10A0               ending address
00000000                            10  
00001000                            11      ORG    $1000
00001000                            12  START:                              ; first instruction of program
00001000                            13  
00001000                            14  *   Code for output
00001000  43F9 00001094             15          LEA     MESSAGE,A1          Loads message into register A1
00001006  103C 000E                 16          MOVE.B  #14,D0              Moves the number 14 into data register D0
0000100A  4E4F                      17          TRAP    #15                 Displays message
0000100C                            18          
0000100C                            19  *   Code for setting addresses
0000100C                            20          * starting address = A4
0000100C                            21          * ending address   = A5
0000100C                            22          * current address  = A6
0000100C                            23          
0000100C  287C 00001000             24          MOVEA.L #addr1,A4           Moves starting address to A4
00001012  2A7C 000010A0             25          MOVEA.L #addr2,A5           Moves ending address to A5
00001018                            26  
00001018  2C4C                      27          MOVEA.L A4,A6               Moves starting address to A6
0000101A                            28          
0000101A                            29  *   Code for retrieving data and displaying it
0000101A  BBCE                      30  LOOP    CMPA.L  A6,A5               Compares current addr to ending addr
0000101C  6700 0058                 31          BEQ     DONE                Branches to done if they are equal
00001020                            32  
00001020                            33      
00001020  121E                      34          MOVE.B  (A6)+,D1            Moves data at current address to D1, then increments
00001022                            35  
00001022                            36      * Reason this is needed is because data at A0 and up are seen as negative since the leading
00001022                            37      *   bit is 1. This code skips those numbers are they are higher than zero and 10. 
00001022  B23C 0000                 38          CMP.B   #0,D1               Compares D1 to zero
00001026  6D00 000A                 39          BLT     HEX                 Branches to HEX if it is less than zero
0000102A                            40  
0000102A  B23C 0010                 41          CMP.B   #$10,D1             Compares data to hex 10
0000102E  6D00 0038                 42          BLT     ZERO                Adds a zero if it is single hex
00001032                            43  
00001032  82FC 0002                 44  HEX     DIVU.W  #0002,D1
00001036                            45   
00001036  143C 0010                 46          MOVE.B  #16,D2              Sets D1 as a HEX number for trap task 15
0000103A  103C 000F                 47          MOVE.B  #15,D0              Sets trap task as #15
0000103E  4E4F                      48          TRAP    #15
00001040                            49          
00001040  43F9 000010A0             50          LEA     SPACE,A1            Loads message into register A1
00001046  103C 000E                 51          MOVE.B  #14,D0              Moves the number 14 into data register D0
0000104A  4E4F                      52          TRAP    #15                 Displays message
0000104C                            53          
0000104C                            54  * Display counter -- creates new line every 8 bytes
0000104C                            55          * D7 is used as counter
0000104C                            56          
0000104C  5207                      57          ADDQ.B  #1,D7               Adds 1 to D7
0000104E  BE3C 0010                 58          CMP.B   #16,D7               Compares 8 to D7
00001052  6700 0004                 59          BEQ     RESET
00001056                            60          
00001056  60C2                      61          BRA     LOOP                Loops back to display next address
00001058                            62  
00001058  7E00                      63  RESET   MOVEQ   #0,D7               Sets counter back to zero
0000105A  43F9 000010A2             64          LEA     LINE,A1             Creates a new line
00001060  103C 000E                 65          MOVE.B  #14,D0
00001064  4E4F                      66          TRAP    #15
00001066  60B2                      67          BRA     LOOP                Goes back into loop
00001068                            68  
00001068  43F9 0000109E             69  ZERO    LEA     DISPZERO,A1         Loads zero
0000106E  103C 000E                 70          MOVE.B  #14,D0              Sets trap task to #14
00001072  4E4F                      71          TRAP    #15
00001074  60BC                      72          BRA     HEX
00001076                            73  
00001076  43F9 000010A2             74  DONE    LEA     LINE,A1             Creates a new line
0000107C  103C 000E                 75          MOVE.B  #14,D0
00001080  4E4F                      76          TRAP    #15
00001082  43F9 000010A5             77          LEA     CLOSE,A1            Displays closing message
00001088  103C 000E                 78          MOVE.B  #14,D0
0000108C  4E4F                      79          TRAP    #15
0000108E  103C 0009                 80          MOVE.B  #9,D0               Halts simulator
00001092  4E4F                      81          TRAP    #15
00001094                            82      
00001094  =0000000D                 83  CR      EQU     $0D                 ASCII code for carriage return
00001094  =0000000A                 84  LF      EQU     $0A                 ASCII code for line feed
00001094                            85  
00001094                            86  
00001094= 57 65 6C 63 6F 6D ...     87  MESSAGE     DC.B    'Welcome',CR,LF,0                input message
0000109E= 30 00                     88  DISPZERO    DC.B    '0',0             message for #0
000010A0= 20 00                     89  SPACE       DC.B    ' ',0
000010A2= 0D 0A 00                  90  LINE        DC.B    '',CR,LF,0
000010A5= 47 6F 6F 64 62 79 ...     91  CLOSE       DC.B    'Goodbye!',CR,LF,0
000010B0                            92  
000010B0                            93          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR1               1000
ADDR2               10A0
CLOSE               10A5
CR                  D
DISPZERO            109E
DONE                1076
HEX                 1032
LF                  A
LINE                10A2
LOOP                101A
MESSAGE             1094
RESET               1058
SPACE               10A0
START               1000
ZERO                1068
